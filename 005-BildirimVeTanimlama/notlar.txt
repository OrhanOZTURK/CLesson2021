
Bildirim ve Tanımlama

variables --- degişkenler

declaration
definition

declaration ---> isimlerin ne oldugunu anlatan cümle
definition ---> derleyici bellekte bir yer ayırıyorsa bu bir definition yani tanım


Her ikiside isim bildirir
declaration birden fazla yapılabilir amam definition tek olmak zorundadır.

Bildirim nasıl yapılır ?

ilk olarka değişkenin türü sonra değişkene verdiğimiz isim ve comman operatorle sonlandır;

[değişkenin türü] değişken isim;

int x;


Bildirim yapar iken 2 tane sentaks variables

1- T x; // T bir türü temsil etsin

2- T y = expr; // tanımlama deildir bu bir ilk deger verme dir (initilaziotion)


#include <stdio.h>

int main()
{
    int x;

    int y = 10;

    return 0;
}



Bir bildirimi yaparken kullanacagımız türler


signed
unsigned
_Bool
char
short
int
long
float
double
long double

/***************************************************/

 Karşımıza çıkacak tür kombinasyonları

 işaretli kısa tam sayı türü

 signed short int
 signed short
 short int
 short

 sıranın önemi yoktur


/***********************************************/

işaretsiz  kısa tam sayı türü

 unsigned short int
 unsigned short

/***********************************************/

 işaretli tam sayı türü

 signed int
 int
 signed


/***********************************************/
 işaretsiz tam sayı türü

 unsigned int
 unsigned

/***********************************************/

işaretli uzun tam sayı türü

signed long int
signed long
long int
long


/***********************************************/

işaretsiz uzun tam sayı türü

unsigned long int
unsigned long

/***********************************************/

işaretli uzun uzun tam sayı türü

signed long long int
signed long long
long long int
long long


/***********************************************/

işaretsiz uzun uzun tam sayı türü

unsigned long long  int
unsigned long long

/***********************************************/


 gerçek sayılarda bu türlerden baska secenegimiz yoktur

float
double
long double

/***********************************************/

Ornek

int long x;   gecerli

unsigned double y;  gecersiz


/*******************************************************/

Degişken tanımlama

 int x;

identifier

 A....Z
 a....z
 0....9
 _

 isimlendirmeye neden dikkat etmeliyiz

 C dili case sensitive bir dil

 Değişken isminin bütün karakterlerini büyük harf ile yazar (all caps) denir


/************************************************/

 Değişken isimleri tanımlar iken temel konvesiyonlar

 snake_case
 camel_case

 snake_case --> bosluk hissi vermek için sozcukler arasında _ karakteri kulllanılır

Örnek

 int sum_of_matrix_elements;

 camel_case --> sozcuklerin ilk harfleri buyuk yapmak diger harfleri kucuk yapama natosyonu

 int sumOfMatrixElements;

 macar notasyonu --> bunu genellik sistem programcılaerı kullanır


/******************************************************************/

 Önemli konu araya koyalım

 ,  --- separetor

 comma operator


 int x, y, z; ---> separeted  işlemi yapar


 coma separeted list (virgulerle ayrılmış liste) olarak gecer.

 karsımza cıkan yer degişken tanımlamada....


/******************************************************************/

 Değişkenelere ilk deger verme sentaksı


  int x = 10; //ilk deger verme


  ilk olarak isim bildirmi yapıyoruz ve bu deişkenin hayata baslama degerını veriyoruz.

/*************************************************/

 ömür (storage duration) storage class


 ne demek omur -- ne zaman hayata gelecek -- storage nasıl elde edılır

 Omur kategorileri 3 ayrılır

 static storage class (statik omurlu nesneler)
 automatic storage class (otomatik omurlu nesneler)
 dynamic storage class (dinamik omurlu nesneler)


static storage class
 programın başında hayata gelir
 main baslamadan hayata gelir ve program sonlanana kdar hayatı devam eder
 program sonlanınca hayatı biter

Yani statik omurlu nesneler program basından sonuna kadar aynı bellek yerinde muhafaza edilir

automatic storage class
programın akışı bir kod parçassına girdiğinde hayata gelen, o kodun yütütülmesi süresince hataı
devam eden ama o kodun işi bitince hayatı bite n nesnelerdir.


dynamic storage class
bu nesneler yeri dinamik omurlu nesneler derleyici tarafından koda bakılarak anlasılmaz
programın çalışma zamanında kosturaln bir kodla elde edilir.
Yani bu nesenlerin yerleri storageları programın çalışma zamınına elde edilir

Aslında bunları programcı istediği zaman hayata baslatabilr ve istediği zaman hayatını bitirebilir


/******************************************************/

global yerde tanımladıgımız degıskenler static ömürlüdür.


int g = 10; // global variables static variable
//static int g = 10;


otomatik omurlu nesneler

#include <stdio.h>

/* parametre ve local degısken otomatik omurludur */

void func(int x) // parametre değişkeni
{
    int y; // yerel değişken local variable
}

int main()
{
   int z = 10;
   func(z);

   return 0;
}


/*****************************/

 yerele degıskenler static tanımlama -- global degıskenler gibi program basından sonuna kadar hatalarını
 sürdürür.

/* parametre ve local degısken otomatik omurludur */

void func(int x) // parametre değişkeni
{
    int y; // yerel değişken local variable
    static int t = 5; // static omurludur
}

/******************************************/


 ilk deger vermeye geri donelım

 int y = 10;

 int x;


statik omurlu degıskenler hayata 0 degeri ile baslar bu granti altındadır


#include <stdio.h>


int g; // hayata 0 ilk degeri ile baslar


int main()
{
   static int x; // hayata 0 ilk degeri ile baslar

   printf("g : %d\n", g);
   printf("x : %d\n", x);



   return 0;
}


yerel degısken ---çöp deger
#include <stdio.h>

//yerel degısknelere ilk deger verilmezse hayata çöp degeri ile baslar
//çöp deger = garbage value
//indeterminate value --- belirlenmemiş deger

void func()
{
    int y;

}

int main()
{
   int x;

   printf("x : %d\n", x);

   return 0;
}

/**********************************/

Dikkat

Eger biz yerel degişkeni ilk deger vermeden hayata getirirsek çöp deger ile baslar
bu degişkeni program akısında deger atamadan kullanırsak tanımsız davranış ile karsılasırız
Tanımsız davranış = undefined behavior


tanımsız davranıs  === benim kodumun ne yapacagını Allah bilir
tanımsız davranıs  === Yazdıgımız bize hangi davranısı sergıleyeegını bilmeyecegımız için kodumuz çöptür
tanımsız davranıs  === işten atılma sebebimiz


/**********************************/

#include <stdio.h>


//Yerel değişkenler çagrıldıkca tekrar tekrar hayata gelir
void func(void)
{
    int x = 10;

    printf("x = %d\n", x);

    ++x;
}

int main()
{

    func();
    func();
    func();

   return 0;
}


/***********************************************/
/***********************************************/

int main()
{

    for(int i = 0; i < 10; ++i)
    {
        int x = 10;

        printf("x = %d\n", x);

        x += 5;
    }

   return 0;
}


/********************************************************/
/********************************************************/

#include <stdio.h>

// static anahtar sözcüğü ile static ömürlü yaptık degişkeni
int main()
{

    for(int i = 0; i < 10; ++i)
    {
        static int x = 10;

        printf("x = %d\n", x);

        x += 5;
    }

   return 0;
}


/********************************************************/
/********************************************************/




