
#include "utility.h"
#include <stdio.h>

int main()
{
    int x, y;
    printf("iki tam sayi girin : ");
    scanf("%d%d", &x, &y);

    for (int i = x; i < y; ++i) {
        if(isprime(i)){
            printf("%d ",i);
            sleep(0.08);
        }
    }

    dashline();

    return 0;
}

/****************************************************/
/****************************************************/


switch kontrol deyimi
goto kontrol deyimi


switch kontrol deyimi
programın akışını expression ifadesine göre farklı noktalara yönlendirir

integer expression ---> gercerk sayı ve pointer ifade olamaz

case label

switch(integer expression)
{
case integer_constant_exp1:
   statement1;
   statement2;
   statement3;
case integer_constant_exp2:
   statement1;
   statement2;
case integer_constant_exp3:
   statement1;
   statement2;
   statement3;

}


#include "utility.h"
#include <stdio.h>

int main()
{
    int n;
    printf("haftanin kacinci gunu : ");
    scanf("%d", &n);

    switch (n) {
        case 1: printf("pazartesi\n");
        case 2: printf("sali\n");
        case 3: printf("carsamba\n");
        case 4: printf("persembe\n");
        case 5: printf("cuma\n");
        case 6: printf("cumartesi\n");
        case 7: printf("pazar\n");
    }

    printf("switch deyimi yurutuldu\n");

    return 0;
}

/****************************************************/
/****************************************************/


#include "utility.h"
#include <stdio.h>

int main()
{
    int n;
    printf("haftanin kacinci gunu : ");
    scanf("%d", &n);

    switch (n) {
        case 1: printf("pazartesi\n");break;
        case 2: printf("sali\n");break;
        case 3: printf("carsamba\n");break;
        case 4: printf("persembe\n");break;
        case 5: printf("cuma\n");break;
        case 6: printf("cumartesi\n");break;
        case 7: printf("pazar\n");break;
    }

    printf("switch deyimi yurutuldu\n");

    return 0;
}

/****************************************************/
/****************************************************/

case label 'larında ne kullanabilirim


tam sayı türlerinden sabit ifadeleri olmak zorunda

case 'A'    bu gecerli

case 3


#define    BLUE   1
#define    BLACK  2

switch(n){
 case BLUE:
 case BLACK:
}

//bunu kullanmayın
switch(n){
 case 5*2-6+7:
}

----------

C dilinde her labeldan sonra bir deyim olmak zorunda


#include "utility.h"
#include <stdio.h>

int main()
{
    int n;
    printf("haftanin kacinci gunu : ");
    scanf("%d", &n);

    switch (n) {
    case 1:
    case 2:
    case 3: printf("carsamba\n");
    case 4:

    }




    return 0;
}

/****************************************************/
/****************************************************/


#include "utility.h"
#include <stdio.h>

int main()
{
    int n;
    printf("haftanin kacinci gunu : ");
    scanf("%d", &n);

    //içi boş switch gecerli
    switch (n) {

    }




    return 0;
}

/****************************************************/
/****************************************************/



#include "utility.h"
#include <stdio.h>

int main()
{
    int n;
    printf("haftanin kacinci gunu : ");
    scanf("%d", &n);

    switch (n) {
        case 1: printf("pazartesi\n");break;
        case 2: printf("sali\n");break;
        case 3: printf("carsamba\n");break;
        case 4: printf("persembe\n");break;
        case 5: printf("cuma\n");break;
        case 6: printf("cumartesi\n");break;
        case 7: printf("pazar\n");break;
    default: printf("gecersiz\n");
    }

    printf("switch deyimi yurutuldu\n");

    return 0;
}

/****************************************************/
/****************************************************/

#include "utility.h"
#include <stdio.h>

int main()
{
    int n;
    printf("haftanin kacinci gunu : ");
    scanf("%d", &n);

    switch (n) {
        default: printf("gecersiz\n"); break;
        case 1: printf("pazartesi\n");break;
        case 2: printf("sali\n");break;
        case 3: printf("carsamba\n");break;
        case 4: printf("persembe\n");break;
        case 5: printf("cuma\n");break;
        case 6: printf("cumartesi\n");break;
        case 7: printf("pazar\n");break;

    }

    printf("switch deyimi yurutuldu\n");

    return 0;
}

/****************************************************/
/****************************************************/


#include "utility.h"
#include <stdio.h>

int main()
{
    int n;
    printf("haftanin kacinci gunu : ");
    scanf("%d", &n);

    switch (n) {
        case 4: printf("persembe\n");break;
        case 1: printf("pazartesi\n");break;
        case 7: printf("pazar\n");break;
        case 3: printf("carsamba\n");break;
        default: printf("gecersiz\n"); break;
        case 5: printf("cuma\n");break;
        case 2: printf("sali\n");break;
        case 6: printf("cumartesi\n");break;

    }

    printf("switch deyimi yurutuldu\n");

    return 0;
}

/****************************************************/
/****************************************************/


#include "utility.h"
#include <stdio.h>

int main()
{
    int n;
    printf("haftanin kacinci gunu : ");
    scanf("%d", &n);

    //7
    switch (n) {
        case 4: printf("persembe\n");break;
        case 1: printf("pazartesi\n");break;
        case 7: printf("pazar\n");
        case 3: printf("carsamba\n");break;
        default: printf("gecersiz\n"); break;
        case 5: printf("cuma\n");
        case 2: printf("sali\n");break;
        case 6: printf("cumartesi\n");break;

    }

    printf("switch deyimi yurutuldu\n");

    return 0;
}

/****************************************************/
/****************************************************/



#include "utility.h"
#include <stdio.h>

int main()
{
    int n;
    printf("haftanin kacinci gunu : ");
    scanf("%d", &n);


    switch (n)
    case 4: printf("persembe\n");
        break;//bu sentaks hatası switch scope da değil


    printf("switch deyimi yurutuldu\n");

    return 0;
}

/****************************************************/
/****************************************************/
#include "utility.h"
#include <stdio.h>


//militry format
//5th May 1992

void display_date(int day, int month, int year)
{
    printf("%d", day);

    switch (day) {
        case 1:
        case 21:
        case 31: printf("st "); break;
        case 2:
        case 22: printf("nd "); break;
        case 3:
        case 23: printf("rd "); break;
        default: printf("th "); break;
    }

    switch (month) {
        case 1: printf("Jan "); break;
        case 2: printf("Feb "); break;
        case 3: printf("Mar "); break;
        case 4: printf("Apr "); break;
        case 5: printf("May "); break;
        case 6: printf("Jun "); break;
        case 7: printf("Jul "); break;
        case 8: printf("Aug "); break;
        case 9: printf("Sep "); break;
        case 10: printf("Oct "); break;
        case 11: printf("Nov "); break;
        case 12: printf("Dec "); break;
    }

    printf("%d\n", year);

}

int main()
{
    int day, month, year;

    printf("gun ay yil olarak tarih girin : ");
    scanf("%d%d%d", &day, &month, &year);

    display_date(day, month, year);


    return 0;
}

/****************************************************/
/****************************************************/

#include "utility.h"
#include <stdio.h>


int main()
{
    int day, month, year;

    printf("gun ay yil olarak tarih girin : ");
    scanf("%d%d%d", &day, &month, &year);

    switch (day) {
      case 1: printf("1\n"); //fallthrough
      case 2: printf("2\n"); break;
      case 3: printf("3\n"); break;
    }

    //C++


    return 0;
}

/****************************************************/
/****************************************************/

#include "utility.h"
#include <stdio.h>

int day_of_year(int d, int m, int y)
{
    int sum = d;

    switch (m-1) {
        case 11: sum += 30; //fallthrough
        case 10: sum += 31; //fallthrough
        case 9: sum += 30; //fallthrough
        case 8: sum += 31; //fallthrough
        case 7: sum += 31; //fallthrough
        case 6: sum += 30; //fallthrough
        case 5: sum += 31; //fallthrough
        case 4: sum += 30; //fallthrough
        case 3: sum += 31; //fallthrough
        case 2: sum += (isleap(y) ? 29 : 28); //fallthrough
        case 1: sum += 31; //fallthrough
    }

    return sum;
}

int main()
{
    int day, month, year;

    printf("gun ay yil olarak tarih girin : ");
    scanf("%d%d%d", &day, &month, &year);

    printf("%d yilin %d. gunu\n", year, day_of_year(day, month, year));


    return 0;
}

/****************************************************/
/****************************************************/



goto statement

programın akısını belirli bir noktaya yönlendirme işlemidir


goto deyimi local jump görevi vardır

void func()
{
}

gercek bir ihtiyac olmadıgı sürece kullanmayın


labe lar

identifier dır

etiket:  seklinde kulanacaz

etiketten sonra bir statement gelmek zorunda

label:
   statement;


#include "utility.h"
#include <stdio.h>


int main()
{

    http://github.com
        ;


    return 0;
}

/****************************************************/
/****************************************************/


#include "utility.h"
#include <stdio.h>


int a = 10;

int func(void)
{
    //statement
    //statement
    //statement

    goto OUT;

    //statement
    //statement
    //statement
    //statement
OUT:
   a = 5;

}

int main()
{

    return 0;
}

/****************************************************/
/****************************************************/


#include "utility.h"
#include <stdio.h>


int a = 10;

int func(void)
{

OUT:
   a = 5;

    //statement
    //statement
    //statement

    goto OUT;

    //statement
    //statement
    //statement
    //statement

}


int main()
{

    return 0;
}

/****************************************************/
/****************************************************/

ne zamn goto kullanabiliriz

nested loops iç içe donguler




#include "utility.h"
#include <stdio.h>


int main()
{
    int flag = 0;

    for (int i = 0; i < 10; ++i) {
        int  n = 20;

        while (--n) {
            //statement

            for (int k = 0; k < 10000; ++k) {
                if(1){
                    flag = 1;
                    break;
                }
            }

            if(flag)
                break;
        }

        if(flag)
            break;
    }

    return 0;
}

/****************************************************/
/****************************************************/


#include "utility.h"
#include <stdio.h>

void foo(void);

int main()
{
    for (int i = 0; i < 10; ++i) {
        int  n = 20;

        while (--n) {
            //statement

            for (int k = 0; k < 10000; ++k) {
                if(1){
                    goto out;
                }
            }
        }
    }
out:
    foo();

    //

    return 0;
}

/****************************************************/
/****************************************************/





#include "utility.h"
#include <stdio.h>

int a = 10;

int func(void)
{
    //statement
    //statement
    //statement

    int OUT;

    goto OUT;

    //statement
    //statement
    //statement
    //statement
OUT:
   a = 5;

}

int main()
{


    return 0;
}

/****************************************************/
/****************************************************/

type conversions -- tur donusumleri

bir ifadenin dogrudan kullanılması yerine onun
farklı bir turde ifade edilerek o turde kullanılması işlemidir


iki gruba ayırıyoruz

implicit type conversions // gizli tür dönüşümleri
   kodda boyle bir talep olmasına ragmen derleyici durumdan vazife çıkartıp
   tur donusumu gercekleştiriyor


explicit type conversions  //acık tur donusumu
 kullanıcı tarafından gerceklestirilen
 yani bilerek ve isteyerek
 bunun için type-cast operatoru kullanılır



implicit type conversions

iki ayrı senoryoda karşımıza çıkacak
  usual arithmetic convertion
   operatorlerin kullanılması durumunda yapılan conversionlar

   a+b
   +x
   a > b

  as if assignment
  atam donusumleri

   x = y // atama
   T a = b; //ilk deger verme
   func(i) // fonksiyon cagırma
   return ival // deger donme

  hepsinin ortak özelliği kopyalama




#include "utility.h"
#include <stdio.h>


int main()
{
    int x = -1;
    unsigned int y = 234;

    if( x > y)
        printf("DOGRU\n");
    else
        printf("YANLIS\n");

    return 0;
}

/****************************************************/
/****************************************************/




#include "utility.h"
#include <stdio.h>


int main()
{
    char c = 165;

    if( c == 165)
        printf("DOGRU\n");
    else
        printf("YANLIS\n");

    return 0;
}

/****************************************************/
/****************************************************/


#include "utility.h"
#include <stdio.h>


int main()
{
    float f = 0.4f;

    if( f == 0.4)
        printf("DOGRU\n");
    else
        printf("YANLIS\n");

    return 0;
}

/****************************************************/
/****************************************************/


#include "utility.h"
#include <stdio.h>

//usual aritmatic conversion

int main()
{
    int x = 10;
    double d = x / 3;

    printf("sonuc = %f\n", d);

    return 0;
}

/****************************************************/
/****************************************************/

neden donusume ihtiyac var
cunkü veri kaybını onelmek ve yanlıs işlemlerdden kacınmak için


operandlardan biri long double turunde ise
 digerinin long double turunde ise
 işlem long double türünde yacaz


operandlardan biri double turunde ise
 digerinin double turunde ise
 işlem double türünde yacaz


operandlardan biri float turunde ise
 digerinin float turunde ise
 işlem float türünde yacaz

--------------------------------



------------------------------------------->
char short int logn float double long double
rank

operandların turu ve rank aynı ise aynı turden işlem yapılır

ranklar farklı ise ve yuksek olan rank işaretsiz ve düşük olan rank işaretli
ise işlem işaretsiz yüksek rankta yapılacak.
unsigned long  signed int   ---> unsigned long


rank aynı işaretler farklı ise, herzaman türler işaretsiz olan türde yapıalcak
signed int unsigned int   --> unsigned int

ranklar farklı işaretler farklı ve buyuk olan rank işaretli kucuk olan rank işaretsiz ise
örnek
   signed long  unsigned int
     4 byte      4 byte        --> unsigned long      -32344  32343     0   65345
     4 byte      2 byte        --> signed long       -32344  32452     0   1284

eger signed long unsigned int degerlerini kapsar ise signed long ta
işlem yapıalcak
kapasamaz ise unsigned long te işlem yapıalcak


long long / unsigned long long
long / unsigned long
int / unsigned int



---------------------------------------


int türünden daha kucuk türler işleme sokukmadan önce
int türüne yukseltiliyorlar
buna integral promotion denir...


short
char / signed char unsigned char
_Bool

------------------------------------------------

#include "utility.h"
#include <iostream>

int main()
{
    char ch1 = 4;
    char ch2 = 5;

    std::cout << typeid (ch1 + ch2).name() << "\n";

    return 0;
}

/****************************************************/
/****************************************************/


#include "utility.h"
#include <iostream>

int main()
{
    char ch1 = 4;
    short ch2 = 5;

    //integral type  ile int  yukselyme olur
    std::cout << typeid (ch1 + ch2).name() << "\n";

    return 0;
}

/****************************************************/
/****************************************************/



#include "utility.h"
#include <iostream>

int main()
{
    short ch1 = 4;
    short ch2 = 5;

    //integral type  ile int  yukselyme olur
    std::cout << typeid (ch1 + ch2).name() << "\n";

    return 0;
}

/****************************************************/
/****************************************************/



#include "utility.h"
#include <iostream>

int main()
{
    int ch1 = 4;
    unsigned int ch2 = 5;

    //integral type  ile int  yukselyme olur
    std::cout << typeid (ch1 + ch2).name() << "\n";

    return 0;
}

/****************************************************/
/****************************************************/

#include "utility.h"
#include <iostream>

int main()
{
    long ch1 = 4;
    unsigned long ch2 = 5;

    //integral type  ile int  yukselyme olur
    std::cout << typeid (ch1 + ch2).name() << "\n";

    return 0;
}

/****************************************************/
/****************************************************/

#include "utility.h"
#include <iostream>

int main()
{
    int ch1 = 4;
    unsigned long ch2 = 5;

    //integral type  ile int  yukselyme olur
    std::cout << typeid (ch1 + ch2).name() << "\n";

    return 0;
}

/****************************************************/
/****************************************************/


#include "utility.h"
#include <iostream>

int main()
{
    unsigned int ch1 = 4;
    long ch2 = 5;

    //integral type  ile int  yukselyme olur
    std::cout << typeid (ch1 + ch2).name() << "\n";

    //std::cout << sizeof (unsigned int) << "\n";
    //std::cout << sizeof (long) << "\n";

    return 0;
}

/****************************************************/
/****************************************************/

#include "utility.h"
#include <iostream>

int main()
{
    char c = 12;

    std::cout << typeid (+c).name() << "\n";


    return 0;
}

/****************************************************/
/****************************************************/



#include "utility.h"
#include <iostream>

int main()
{

    //kousl operatoru her iki operandın turene bakıp karaverioyr
    //aynı ise turleri aynı türden uretıyor
    //farklı ise hangisinin ranki ve işaretli işsaretsiz olmasına göre  degerlendiriyor
    std::cout << typeid (10 > 5 ? 3 : .5).name() << "\n";


    return 0;
}

/****************************************************/
/****************************************************/


#include "utility.h"
#include <iostream>

int main()
{
    int x = 12;
    int y = 5;

    double dval = x / y;

    std::cout << typeid (x / y).name() << "\n";
    std::cout << typeid (dval).name() << "\n";


    return 0;
}

/****************************************************/
/****************************************************/



#include "utility.h"
#include <stdio.h>
#include <limits.h>

int main()
{
    int x = -1;
    unsigned int y = 1;

    //unsigned int

    // -1  butun bitler  1111 1111 1111  1111 1111
    //4 byte alabilecegi en buyuk tam sayıya donusur


    if(x > y)
        printf("DOGRU\n");
    else
        printf("YANLIS\n");

    return 0;
}

/****************************************************/
/****************************************************/


dikkat

işsaretli türlerde taşma tanımsız davranış

işsaretsiz türlerde taşma - modüler aritmatic devreye girer
x ve y unsigned int türünden olsun

x * y // eger sonuc alabilecek degerin üsütndey ise


carpma sonucu degeri unsigned int  türünün en buyuk deger + 1

peki bu ne demek

en büyük degere  + 1 toplar iseniz bu size 0 degerini verir







#include "utility.h"
#include <stdio.h>
#include <limits.h>

int main()
{
    unsigned x = UINT_MAX;

    printf("x  = %u\n", x);
    ++x;
    printf("x  = %u\n", x);

    return 0;
}

/****************************************************/
/****************************************************/

#include "utility.h"
#include <stdio.h>
#include <limits.h>

int main()
{
    unsigned x = UINT_MAX;

    printf("x  = %u\n", x);
    x += 20;
    printf("x  = %u\n", x);

    return 0;
}

/****************************************************/
/****************************************************/


atama tür dönüşümleri

1- bir değişkene ilk degerme
2- atama yapıldıgında
3- bir fonksiyona argüman olarak gönderildiğinde
4- fonksiyonun return deyimiydi


atama hangi türe ise donusum o yöne yapıalcak


int = double // int türne donuusm olacak
burda veri kaybı yasarsınız


float = short // float
veri kaybı olmaz





#include "utility.h"
#include <stdio.h>
#include <limits.h>

int main()
{

    unsigned int x = -1;

    //1111 1111 1111 1111 1111 ...

    printf("x = %u\n", x);
    printf("x = %u\n", UINT_MAX);

    return 0;
}

/****************************************************/
/****************************************************/


#include "utility.h"
#include <stdio.h>
#include <limits.h>

int main()
{

    unsigned long long x = -1;

    //-1 --  signed int
    //1111 1111 1111 1111 1111 1111 1111 11111

    //burada sign extention yapılır 1111 ile doldurulur unsigned oldugu için
    // 1111 1111 1111 1111 1111 1111 1111 11111 1111 1111 1111 1111 1111 1111 1111 11111


    printf("x = %llu\n", x);

    return 0;
}

/****************************************************/
/****************************************************/


#include "utility.h"
#include <stdio.h>
#include <limits.h>

int main()
{

    double dval = 67542;

    printf("dval = %f\n", dval);

    return 0;
}

/****************************************************/
/****************************************************/

#include "utility.h"
#include <stdio.h>
#include <limits.h>

int main()
{
    //ufak kayıplar yasanır dikkatli olun
    //boyle buyuk sayılarda
    float dval = 2000000001;

    printf("dval = %f\n", dval);

    return 0;
}

/****************************************************/
/****************************************************/

truncation  --- budama


2a bc 14 fa

eger bu deger i 2 bute lik sisteme atar isek

yuksek anlamlı bitleri

14 fa degerlerini alır


#include "utility.h"
#include <stdio.h>
#include <limits.h>

int main()
{
    unsigned short x = 0x1ac4d2e5;

    printf("x = %x\n", x);
    printf("x = %d\n", x);

    return 0;
}

/****************************************************/
/****************************************************/


#include "utility.h"
#include <stdio.h>
#include <limits.h>

int main()
{
    //short 2 byte
    short s = 1000000;  // F 42 40

    printf("s = %d\n", s); // 16 960
    printf("s = %x\n", s);

    return 0;
}

/****************************************************/
/****************************************************/



#include "utility.h"
#include <stdio.h>
#include <limits.h>

int main()
{
    //ufak kayıplar yasanır dikkatli olun
    //boyle buyuk sayılarda

    float dval = 20000001;

    printf("dval = %f\n", dval);

    return 0;
}

/****************************************************/
/****************************************************/






























































