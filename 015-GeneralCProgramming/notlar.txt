
#include "utility.h"
#include <stdio.h>

int main()
{
    int x, y;
    printf("iki tam sayi girin : ");
    scanf("%d%d", &x, &y);

    for (int i = x; i < y; ++i) {
        if(isprime(i)){
            printf("%d ",i);
            sleep(0.08);
        }
    }

    dashline();

    return 0;
}

/****************************************************/
/****************************************************/


switch kontrol deyimi
goto kontrol deyimi


switch kontrol deyimi
programın akışını expression ifadesine göre farklı noktalara yönlendirir

integer expression ---> gercerk sayı ve pointer ifade olamaz

case label

switch(integer expression)
{
case integer_constant_exp1:
   statement1;
   statement2;
   statement3;
case integer_constant_exp2:
   statement1;
   statement2;
case integer_constant_exp3:
   statement1;
   statement2;
   statement3;

}


#include "utility.h"
#include <stdio.h>

int main()
{
    int n;
    printf("haftanin kacinci gunu : ");
    scanf("%d", &n);

    switch (n) {
        case 1: printf("pazartesi\n");
        case 2: printf("sali\n");
        case 3: printf("carsamba\n");
        case 4: printf("persembe\n");
        case 5: printf("cuma\n");
        case 6: printf("cumartesi\n");
        case 7: printf("pazar\n");
    }

    printf("switch deyimi yurutuldu\n");

    return 0;
}

/****************************************************/
/****************************************************/


#include "utility.h"
#include <stdio.h>

int main()
{
    int n;
    printf("haftanin kacinci gunu : ");
    scanf("%d", &n);

    switch (n) {
        case 1: printf("pazartesi\n");break;
        case 2: printf("sali\n");break;
        case 3: printf("carsamba\n");break;
        case 4: printf("persembe\n");break;
        case 5: printf("cuma\n");break;
        case 6: printf("cumartesi\n");break;
        case 7: printf("pazar\n");break;
    }

    printf("switch deyimi yurutuldu\n");

    return 0;
}

/****************************************************/
/****************************************************/

case label 'larında ne kullanabilirim


tam sayı türlerinden sabit ifadeleri olmak zorunda

case 'A'    bu gecerli

case 3


#define    BLUE   1
#define    BLACK  2

switch(n){
 case BLUE:
 case BLACK:
}

//bunu kullanmayın
switch(n){
 case 5*2-6+7:
}

----------

C dilinde her labeldan sonra bir deyim olmak zorunda


#include "utility.h"
#include <stdio.h>

int main()
{
    int n;
    printf("haftanin kacinci gunu : ");
    scanf("%d", &n);

    switch (n) {
    case 1:
    case 2:
    case 3: printf("carsamba\n");
    case 4:

    }




    return 0;
}

/****************************************************/
/****************************************************/


#include "utility.h"
#include <stdio.h>

int main()
{
    int n;
    printf("haftanin kacinci gunu : ");
    scanf("%d", &n);

    //içi boş switch gecerli
    switch (n) {

    }




    return 0;
}

/****************************************************/
/****************************************************/



#include "utility.h"
#include <stdio.h>

int main()
{
    int n;
    printf("haftanin kacinci gunu : ");
    scanf("%d", &n);

    switch (n) {
        case 1: printf("pazartesi\n");break;
        case 2: printf("sali\n");break;
        case 3: printf("carsamba\n");break;
        case 4: printf("persembe\n");break;
        case 5: printf("cuma\n");break;
        case 6: printf("cumartesi\n");break;
        case 7: printf("pazar\n");break;
    default: printf("gecersiz\n");
    }

    printf("switch deyimi yurutuldu\n");

    return 0;
}

/****************************************************/
/****************************************************/

#include "utility.h"
#include <stdio.h>

int main()
{
    int n;
    printf("haftanin kacinci gunu : ");
    scanf("%d", &n);

    switch (n) {
        default: printf("gecersiz\n"); break;
        case 1: printf("pazartesi\n");break;
        case 2: printf("sali\n");break;
        case 3: printf("carsamba\n");break;
        case 4: printf("persembe\n");break;
        case 5: printf("cuma\n");break;
        case 6: printf("cumartesi\n");break;
        case 7: printf("pazar\n");break;

    }

    printf("switch deyimi yurutuldu\n");

    return 0;
}

/****************************************************/
/****************************************************/


#include "utility.h"
#include <stdio.h>

int main()
{
    int n;
    printf("haftanin kacinci gunu : ");
    scanf("%d", &n);

    switch (n) {
        case 4: printf("persembe\n");break;
        case 1: printf("pazartesi\n");break;
        case 7: printf("pazar\n");break;
        case 3: printf("carsamba\n");break;
        default: printf("gecersiz\n"); break;
        case 5: printf("cuma\n");break;
        case 2: printf("sali\n");break;
        case 6: printf("cumartesi\n");break;

    }

    printf("switch deyimi yurutuldu\n");

    return 0;
}

/****************************************************/
/****************************************************/


#include "utility.h"
#include <stdio.h>

int main()
{
    int n;
    printf("haftanin kacinci gunu : ");
    scanf("%d", &n);

    //7
    switch (n) {
        case 4: printf("persembe\n");break;
        case 1: printf("pazartesi\n");break;
        case 7: printf("pazar\n");
        case 3: printf("carsamba\n");break;
        default: printf("gecersiz\n"); break;
        case 5: printf("cuma\n");
        case 2: printf("sali\n");break;
        case 6: printf("cumartesi\n");break;

    }

    printf("switch deyimi yurutuldu\n");

    return 0;
}

/****************************************************/
/****************************************************/



#include "utility.h"
#include <stdio.h>

int main()
{
    int n;
    printf("haftanin kacinci gunu : ");
    scanf("%d", &n);


    switch (n)
    case 4: printf("persembe\n");
        break;//bu sentaks hatası switch scope da değil


    printf("switch deyimi yurutuldu\n");

    return 0;
}

/****************************************************/
/****************************************************/
#include "utility.h"
#include <stdio.h>


//militry format
//5th May 1992

void display_date(int day, int month, int year)
{
    printf("%d", day);

    switch (day) {
        case 1:
        case 21:
        case 31: printf("st "); break;
        case 2:
        case 22: printf("nd "); break;
        case 3:
        case 23: printf("rd "); break;
        default: printf("th "); break;
    }

    switch (month) {
        case 1: printf("Jan "); break;
        case 2: printf("Feb "); break;
        case 3: printf("Mar "); break;
        case 4: printf("Apr "); break;
        case 5: printf("May "); break;
        case 6: printf("Jun "); break;
        case 7: printf("Jul "); break;
        case 8: printf("Aug "); break;
        case 9: printf("Sep "); break;
        case 10: printf("Oct "); break;
        case 11: printf("Nov "); break;
        case 12: printf("Dec "); break;
    }

    printf("%d\n", year);

}

int main()
{
    int day, month, year;

    printf("gun ay yil olarak tarih girin : ");
    scanf("%d%d%d", &day, &month, &year);

    display_date(day, month, year);


    return 0;
}

/****************************************************/
/****************************************************/

#include "utility.h"
#include <stdio.h>


int main()
{
    int day, month, year;

    printf("gun ay yil olarak tarih girin : ");
    scanf("%d%d%d", &day, &month, &year);

    switch (day) {
      case 1: printf("1\n"); //fallthrough
      case 2: printf("2\n"); break;
      case 3: printf("3\n"); break;
    }

    //C++


    return 0;
}

/****************************************************/
/****************************************************/

#include "utility.h"
#include <stdio.h>

int day_of_year(int d, int m, int y)
{
    int sum = d;

    switch (m-1) {
        case 11: sum += 30; //fallthrough
        case 10: sum += 31; //fallthrough
        case 9: sum += 30; //fallthrough
        case 8: sum += 31; //fallthrough
        case 7: sum += 31; //fallthrough
        case 6: sum += 30; //fallthrough
        case 5: sum += 31; //fallthrough
        case 4: sum += 30; //fallthrough
        case 3: sum += 31; //fallthrough
        case 2: sum += (isleap(y) ? 29 : 28); //fallthrough
        case 1: sum += 31; //fallthrough
    }

    return sum;
}

int main()
{
    int day, month, year;

    printf("gun ay yil olarak tarih girin : ");
    scanf("%d%d%d", &day, &month, &year);

    printf("%d yilin %d. gunu\n", year, day_of_year(day, month, year));


    return 0;
}

/****************************************************/
/****************************************************/



goto statement

programın akısını belirli bir noktaya yönlendirme işlemidir


goto deyimi local jump görevi vardır

void func()
{
}

gercek bir ihtiyac olmadıgı sürece kullanmayın


labe lar

identifier dır

etiket:  seklinde kulanacaz

etiketten sonra bir statement gelmek zorunda

label:
   statement;


#include "utility.h"
#include <stdio.h>


int main()
{

    http://github.com
        ;


    return 0;
}

/****************************************************/
/****************************************************/


#include "utility.h"
#include <stdio.h>


int a = 10;

int func(void)
{
    //statement
    //statement
    //statement

    goto OUT;

    //statement
    //statement
    //statement
    //statement
OUT:
   a = 5;

}

int main()
{

    return 0;
}

/****************************************************/
/****************************************************/


#include "utility.h"
#include <stdio.h>


int a = 10;

int func(void)
{

OUT:
   a = 5;

    //statement
    //statement
    //statement

    goto OUT;

    //statement
    //statement
    //statement
    //statement

}


int main()
{

    return 0;
}

/****************************************************/
/****************************************************/

ne zamn goto kullanabiliriz

nested loops iç içe donguler




#include "utility.h"
#include <stdio.h>


int main()
{
    int flag = 0;

    for (int i = 0; i < 10; ++i) {
        int  n = 20;

        while (--n) {
            //statement

            for (int k = 0; k < 10000; ++k) {
                if(1){
                    flag = 1;
                    break;
                }
            }

            if(flag)
                break;
        }

        if(flag)
            break;
    }

    return 0;
}

/****************************************************/
/****************************************************/


#include "utility.h"
#include <stdio.h>

void foo(void);

int main()
{
    for (int i = 0; i < 10; ++i) {
        int  n = 20;

        while (--n) {
            //statement

            for (int k = 0; k < 10000; ++k) {
                if(1){
                    goto out;
                }
            }
        }
    }
out:
    foo();

    //

    return 0;
}

/****************************************************/
/****************************************************/





#include "utility.h"
#include <stdio.h>

int a = 10;

int func(void)
{
    //statement
    //statement
    //statement

    int OUT;

    goto OUT;

    //statement
    //statement
    //statement
    //statement
OUT:
   a = 5;

}

int main()
{


    return 0;
}

/****************************************************/
/****************************************************/

type conversions -- tur donusumleri

bir ifadenin dogrudan kullanılması yerine onun
farklı bir turde ifade edilerek o turde kullanılması işlemidir


iki gruba ayırıyoruz

implicit type conversions // gizli tür dönüşümleri
   kodda boyle bir talep olmasına ragmen derleyici durumdan vazife çıkartıp
   tur donusumu gercekleştiriyor


explicit type conversions  //acık tur donusumu
 kullanıcı tarafından gerceklestirilen
 yani bilerek ve isteyerek
 bunun için type-cast operatoru kullanılır



implicit type conversions

iki ayrı senoryoda karşımıza çıkacak
  usual arithmetic convertion
   operatorlerin kullanılması durumunda yapılan conversionlar

   a+b
   +x
   a > b

  as if assignment
  atam donusumleri

   x = y // atama
   T a = b; //ilk deger verme
   func(i) // fonksiyon cagırma
   return ival // deger donme

  hepsinin ortak özelliği kopyalama




#include "utility.h"
#include <stdio.h>


int main()
{
    int x = -1;
    unsigned int y = 234;

    if( x > y)
        printf("DOGRU\n");
    else
        printf("YANLIS\n");

    return 0;
}

/****************************************************/
/****************************************************/




#include "utility.h"
#include <stdio.h>


int main()
{
    char c = 165;

    if( c == 165)
        printf("DOGRU\n");
    else
        printf("YANLIS\n");

    return 0;
}

/****************************************************/
/****************************************************/


#include "utility.h"
#include <stdio.h>


int main()
{
    float f = 0.4f;

    if( f == 0.4)
        printf("DOGRU\n");
    else
        printf("YANLIS\n");

    return 0;
}

/****************************************************/
/****************************************************/


#include "utility.h"
#include <stdio.h>

//usual aritmatic conversion

int main()
{
    int x = 10;
    double d = x / 3;

    printf("sonuc = %f\n", d);

    return 0;
}

/****************************************************/
/****************************************************/

neden donusume ihtiyac var
cunkü veri kaybını onelmek ve yanlıs işlemlerdden kacınmak için


operandlardan biri long double turunde ise
 digerinin long double turunde ise
 işlem long double türünde yacaz


operandlardan biri double turunde ise
 digerinin double turunde ise
 işlem double türünde yacaz


operandlardan biri float turunde ise
 digerinin float turunde ise
 işlem float türünde yacaz

--------------------------------



------------------------------------------->
char short int logn float double long double
rank

operandların turu ve rank aynı ise aynı turden işlem yapılır

ranklar farklı ise ve yuksek olan rank işaretsiz ve düşük olan rank işaretli
ise işlem işaretsiz yüksek rankta yapılacak.
unsigned long  signed int   ---> unsigned long


rank aynı işaretler farklı ise, herzaman türler işaretsiz olan türde yapıalcak
signed int unsigned int   --> unsigned int

ranklar farklı işaretler farklı ve buyuk olan rank işaretli kucuk olan rank işaretsiz ise
örnek
   signed long  unsigned int
     4 byte      4 byte        --> unsigned long      -32344  32343     0   65345
     4 byte      2 byte        --> signed long       -32344  32452     0   1284

eger signed long unsigned int degerlerini kapsar ise signed long ta
işlem yapıalcak
kapasamaz ise unsigned long te işlem yapıalcak


long long / unsigned long long
long / unsigned long
int / unsigned int



---------------------------------------


int türünden daha kucuk türler işleme sokukmadan önce
int türüne yukseltiliyorlar
buna integral promotion denir...


short
char / signed char unsigned char
_Bool

------------------------------------------------

#include "utility.h"
#include <iostream>

int main()
{
    char ch1 = 4;
    char ch2 = 5;

    std::cout << typeid (ch1 + ch2).name() << "\n";

    return 0;
}

/****************************************************/
/****************************************************/


#include "utility.h"
#include <iostream>

int main()
{
    char ch1 = 4;
    short ch2 = 5;

    //integral type  ile int  yukselyme olur
    std::cout << typeid (ch1 + ch2).name() << "\n";

    return 0;
}

/****************************************************/
/****************************************************/



#include "utility.h"
#include <iostream>

int main()
{
    short ch1 = 4;
    short ch2 = 5;

    //integral type  ile int  yukselyme olur
    std::cout << typeid (ch1 + ch2).name() << "\n";

    return 0;
}

/****************************************************/
/****************************************************/



#include "utility.h"
#include <iostream>

int main()
{
    int ch1 = 4;
    unsigned int ch2 = 5;

    //integral type  ile int  yukselyme olur
    std::cout << typeid (ch1 + ch2).name() << "\n";

    return 0;
}

/****************************************************/
/****************************************************/

#include "utility.h"
#include <iostream>

int main()
{
    long ch1 = 4;
    unsigned long ch2 = 5;

    //integral type  ile int  yukselyme olur
    std::cout << typeid (ch1 + ch2).name() << "\n";

    return 0;
}

/****************************************************/
/****************************************************/

#include "utility.h"
#include <iostream>

int main()
{
    int ch1 = 4;
    unsigned long ch2 = 5;

    //integral type  ile int  yukselyme olur
    std::cout << typeid (ch1 + ch2).name() << "\n";

    return 0;
}

/****************************************************/
/****************************************************/


#include "utility.h"
#include <iostream>

int main()
{
    unsigned int ch1 = 4;
    long ch2 = 5;

    //integral type  ile int  yukselyme olur
    std::cout << typeid (ch1 + ch2).name() << "\n";

    //std::cout << sizeof (unsigned int) << "\n";
    //std::cout << sizeof (long) << "\n";

    return 0;
}

/****************************************************/
/****************************************************/

#include "utility.h"
#include <iostream>

int main()
{
    char c = 12;

    std::cout << typeid (+c).name() << "\n";


    return 0;
}

/****************************************************/
/****************************************************/



#include "utility.h"
#include <iostream>

int main()
{

    //kousl operatoru her iki operandın turene bakıp karaverioyr
    //aynı ise turleri aynı türden uretıyor
    //farklı ise hangisinin ranki ve işaretli işsaretsiz olmasına göre  degerlendiriyor
    std::cout << typeid (10 > 5 ? 3 : .5).name() << "\n";


    return 0;
}

/****************************************************/
/****************************************************/


#include "utility.h"
#include <iostream>

int main()
{
    int x = 12;
    int y = 5;

    double dval = x / y;

    std::cout << typeid (x / y).name() << "\n";
    std::cout << typeid (dval).name() << "\n";


    return 0;
}

/****************************************************/
/****************************************************/



#include "utility.h"
#include <stdio.h>
#include <limits.h>

int main()
{
    int x = -1;
    unsigned int y = 1;

    //unsigned int

    // -1  butun bitler  1111 1111 1111  1111 1111
    //4 byte alabilecegi en buyuk tam sayıya donusur


    if(x > y)
        printf("DOGRU\n");
    else
        printf("YANLIS\n");

    return 0;
}

/****************************************************/
/****************************************************/


dikkat

işsaretli türlerde taşma tanımsız davranış

işsaretsiz türlerde taşma - modüler aritmatic devreye girer
x ve y unsigned int türünden olsun

x * y // eger sonuc alabilecek degerin üsütndey ise


carpma sonucu degeri unsigned int  türünün en buyuk deger + 1

peki bu ne demek

en büyük degere  + 1 toplar iseniz bu size 0 degerini verir







#include "utility.h"
#include <stdio.h>
#include <limits.h>

int main()
{
    unsigned x = UINT_MAX;

    printf("x  = %u\n", x);
    ++x;
    printf("x  = %u\n", x);

    return 0;
}

/****************************************************/
/****************************************************/

#include "utility.h"
#include <stdio.h>
#include <limits.h>

int main()
{
    unsigned x = UINT_MAX;

    printf("x  = %u\n", x);
    x += 20;
    printf("x  = %u\n", x);

    return 0;
}

/****************************************************/
/****************************************************/


atama tür dönüşümleri

1- bir değişkene ilk degerme
2- atama yapıldıgında
3- bir fonksiyona argüman olarak gönderildiğinde
4- fonksiyonun return deyimiydi


atama hangi türe ise donusum o yöne yapıalcak


int = double // int türne donuusm olacak
burda veri kaybı yasarsınız


float = short // float
veri kaybı olmaz





#include "utility.h"
#include <stdio.h>
#include <limits.h>

int main()
{

    unsigned int x = -1;

    //1111 1111 1111 1111 1111 ...

    printf("x = %u\n", x);
    printf("x = %u\n", UINT_MAX);

    return 0;
}

/****************************************************/
/****************************************************/


#include "utility.h"
#include <stdio.h>
#include <limits.h>

int main()
{

    unsigned long long x = -1;

    //-1 --  signed int
    //1111 1111 1111 1111 1111 1111 1111 11111

    //burada sign extention yapılır 1111 ile doldurulur unsigned oldugu için
    // 1111 1111 1111 1111 1111 1111 1111 11111 1111 1111 1111 1111 1111 1111 1111 11111


    printf("x = %llu\n", x);

    return 0;
}

/****************************************************/
/****************************************************/


#include "utility.h"
#include <stdio.h>
#include <limits.h>

int main()
{

    double dval = 67542;

    printf("dval = %f\n", dval);

    return 0;
}

/****************************************************/
/****************************************************/

#include "utility.h"
#include <stdio.h>
#include <limits.h>

int main()
{
    //ufak kayıplar yasanır dikkatli olun
    //boyle buyuk sayılarda
    float dval = 2000000001;

    printf("dval = %f\n", dval);

    return 0;
}

/****************************************************/
/****************************************************/

truncation  --- budama


2a bc 14 fa

eger bu deger i 2 bute lik sisteme atar isek

yuksek anlamlı bitleri

14 fa degerlerini alır


#include "utility.h"
#include <stdio.h>
#include <limits.h>

int main()
{
    unsigned short x = 0x1ac4d2e5;

    printf("x = %x\n", x);
    printf("x = %d\n", x);

    return 0;
}

/****************************************************/
/****************************************************/


#include "utility.h"
#include <stdio.h>
#include <limits.h>

int main()
{
    //short 2 byte
    short s = 1000000;  // F 42 40

    printf("s = %d\n", s); // 16 960
    printf("s = %x\n", s);

    return 0;
}

/****************************************************/
/****************************************************/



#include "utility.h"
#include <stdio.h>
#include <limits.h>

int main()
{
    //ufak kayıplar yasanır dikkatli olun
    //boyle buyuk sayılarda

    float dval = 20000001;

    printf("dval = %f\n", dval);

    return 0;
}

/****************************************************/
/****************************************************/

truncation -- budama

2a bc 14 fa


eger bu degeri 2 byte lık sisteme atar isek

yuksek anlamlı bitleri atar keser

14 fa degerleri elimiz de kalır


#include "utility.h"
#include <stdio.h>
#include <limits.h>

int main()
{
    unsigned short x = 0x1ac4d2e5;

    printf("x = %x\n", x);

    return 0;
}

/****************************************************/
/****************************************************/


#include "utility.h"
#include <stdio.h>
#include <limits.h>

int main()
{
    short x = 1000000; // F 4240
                        //4240
    printf("x = %d\n", x); //16960

    return 0;
}

/****************************************************/
/****************************************************/

#include "utility.h"
#include <stdio.h>
#include <limits.h>

int main()
{
    short x = 1000000; // F 4240
                        //4240
    char c = 1000000; //40   char 1 byte


    printf("x = %d\n", x); //16960
    printf("c = %d\n", c); //64


    return 0;
}

/****************************************************/
/****************************************************/


#include "utility.h"
#include <stdio.h>
#include <limits.h>

int main()
{
    short x = 0x16245080;

    char c =  0x80;

    // 0x80
    // 1010 0000  --> -128

    //signed ise ve geri kalan bitlerini  1111 1111 1111
    //unsigned ise geri kalan bitleri   0000 0000 0000 0000

    //char // unsigned signed
            //bende signed diyor
    //1010 0000 --> -128


    printf("x = %x\n", x);
    printf("c = %x\n", c);
    printf("x = %d\n", x);
    printf("c = %d\n", c);


    return 0;
}

/****************************************************/
/****************************************************/

#include "utility.h"
#include <stdio.h>
#include <limits.h>

int main()
{
    //negatif anlamlı birler 1111 lerle doldurulur
    //pozitif anlamlı bitler 0000 lar ile doldurulur

    //char türü derleyiciye göre işaretli veya işaretsiz olabilir
    //bizdeki işaretli ve bit düzeni değişmeyecek
    //1011 0000 c ye atanan -80 degeri atanı


    //int türüne yukseltirim   1111 1111 1111 1111 1111 1111 1111 1011 0000
    //unsigned int türünden    0000 0000 0000 0000 0000 0000 0000 1011 0000

    char c = 176; //0xB0  1011 0000

    printf("c = %x\n", c);
    printf("c = %d\n", c);

    if(c ==  176)
        printf("dogru\n");
    else
        printf("yanlis\n");

    return 0;
}

/****************************************************/
/****************************************************/


gercek sayı türünden tam sayı türne atama yapıldıgında

ondalık kısmı dogrudan atar
ilgili kısım ifade edilebiliyor ise gecerli olur
eger edilemiyor ise tanımsız davranış olur ..



#include "utility.h"
#include <stdio.h>
#include <limits.h>

int main()
{
    double dval = 7234.2344234;

    int ival;

    ival = dval;

    printf("ival = %d\n", ival);


    return 0;
}

/****************************************************/
/****************************************************/


#include "utility.h"
#include <stdio.h>
#include <limits.h>

int main()
{
    double dval = 9882334512.2344234;

    int ival;

    ival = dval;

    printf("ival = %d\n", ival);


    return 0;
}

/****************************************************/
/****************************************************/

tür dönüşüm operatoru

type cast operatoru --->  ()

unary bir operator

içine tür bilgisi yazılır (data type)

2. öncelik seviyesindedir


int x;

(target type)operand;

(double)x; seklinde kullanılır




#include "utility.h"
#include <stdio.h>


int main()
{
    int x = 10;
    int y = 3;

    //double dval = x / y;
    double dval = (double)x / y;

    printf("dval = %f\n", dval);


    return 0;
}

/****************************************************/
/****************************************************/


const cast (const luk donusumu)
adreslerle ilgili donusum (pointer)

konuları gelince ileriki derte anlatacaz


farklı bir casting olayına deyinelim



#include "utility.h"
#include <stdio.h>

int foo(int a)
{
    return 1;
}

int main()
{
    //ihtiyaç oldugun da kullanabiliriz
    //bilinçli olarak geri dönüş türünü kullanmıyacagım
    (void)foo(12);

    //hayır boylede bir sıkıntı olmaz
    foo(13);


    return 0;
}

/****************************************************/
/****************************************************/

#include "utility.h"
#include <stdio.h>

int foo(int a)
{
    return 1;
}

int main()
{
    int x = 10, y = 23;

    //bilinçli olarak printfin geri donus degerinin kullanmıyacam
    (void)printf("%d%d\n", x, y);


    return 0;
}

/****************************************************/
/****************************************************/

#include <stdio.h>

// 3.4   --> 3
// 3.7   --> 4
// -2.8  --> -3
// -2.2  --> -2

int main()
{
    double dval;

    printf("[-5 +5] aralgiinda bir gercek sayi giriniz : ");
    scanf("%lf\n", &dval);

    printf("%d\n", (int)(dval + (dval > 0. ? .5 : -.5)));


    return 0;
}

/****************************************************/
/****************************************************/

Rastgele sayi üretimi

random number generation

Rastgele sayi üretimi oyun programlama - genetik algoritma
- kriptoloji --  test işlemleri -- simulasyon programları
gibi cogu yerde cokca kullanılmakta


iki Rastgele sayi uretimi mevcut
1- true randım number generation
   Dogadan faydalanarak üretılen rastgele sayılar

2- pseudo random number generation
  sozde - aslında gercek sayı uretımı yok sadece varsaymak

bilgisayarın rastgele sayı uretme ozellıgı yok
cunku bilgisayar deterministik bir yapıya sahip

bir algoritma ile rastgele sayı uretımı hissiyatı verilen bir yapı kurulur
ama aslında rastgelelık yoktur bir algoritma oldugu için


seed value (tohum degeri)
tohum degerine göre rastgele sayı uretımı bize farklı sayı zinciri sunacaktır.


kullanılan bu algoritmalar içinde random generation için
mersene twister algoritması kullanılmakta


bu algoritmalar aslında yaptıgı sey
1010101010101010101010 rasgele bitleri saglamak


uniform distribution
1-10 --> 1 2 3 10
uretilecek bu sayıların gelme ve ya olusma olasilipği aynı olmasını saglamtadır.

farklı yontemler de mevcut
Gauss distribution -->


C ve C++ random generation da aralarında buyuk farklılıklar mevcut
C sadece 2 tane fonksiyon ile destek veriririken
C++ ise bunun için bir kütüphanesi mevcut ve çokca fazla destek vermektedir

C de cok fazla ıhtıyac var ise
Thirt Party uyglma veya kutuphane kullanabiliriz



<stdlib.h> kutupohanesinde
rand ile srand fonksiyonları

bir de Makro

RAND_MAX --> maksimum üretilebilecek en buyuk tam sayı degerını temsıl eder
RAND_MAX derleyiciye baglı olarak degisebilir

#include <stdio.h>
#include <stdlib.h>

//rand işlevi default olarak seed value degeri 1 i kullanır
int main()
{
    for (int i = 0; i < 10; ++i) {
        printf("%d \n", rand());
    }

    return 0;
}

/****************************************************/
/****************************************************/


#include <stdio.h>
#include <stdlib.h>

//rand işlevi default olarak seed value degeri 1 i kullanır
int main()
{

    srand(10u); //tohum degeri

//yeni tohum degeri fakat sabit oldugu için yine aynı sayıları uretecek
    for (int i = 0; i < 10; ++i) {
        printf("%d \n", rand());
    }

    return 0;
}

/****************************************************/
/****************************************************/

#include <stdio.h>
#include <stdlib.h>


void print_random_numbers(unsigned int seed)
{
    srand(seed);

    for (int i = 0; i < 10; ++i) {
        printf("%d \n", rand());
    }
}

int main()
{

    for (int i = 1; i < 1000; ++i) {
        printf("seed value is %5d\n", i);
        print_random_numbers(i);
        getchar();
        system("cls");
    }


    return 0;
}

/****************************************************/
/****************************************************/


int rand(void) yapıya sahip
void srand(unsigne int) yapiya sahip;

#include <stdio.h>
#include <stdlib.h>


int main()
{

//uniform dağılım için mod operatoru kkullanmayınız

    for (int i = 1; i < 1000; ++i) {
        printf("%d ", rand() % 6 + 1);
    }


    return 0;
}

/****************************************************/
/****************************************************/

#include <stdio.h>
#include <stdlib.h>

#define     RANDOM_MIN_YEAR     1960
#define     RANDOM_MAX_YEAR     2010

int main()
{
    for (int i = 1; i < 100; ++i) {
        printf("%d ", rand() % (RANDOM_MAX_YEAR - RANDOM_MIN_YEAR + 1) + RANDOM_MIN_YEAR);
    }

    return 0;
}

/****************************************************/
/****************************************************/

cleander time dediğimiz bir mekanizma var

01.01.1970 12:33

bunun arkda tarafta şu şekilde

456456234234 gibi bir degere takabul ediyor

bunun için time kutuphanesi gerekli


#include <stdio.h>
#include <stdlib.h>
#include <time.h>


int main()
{
    printf("%lld\n", time(NULL));


    return 0;
}

/****************************************************/
/****************************************************/

#include <stdio.h>
#include <stdlib.h>
#include <time.h>


int main()
{
    for (;;) {
        printf("%lld\r", time(NULL));
    }


    return 0;
}

/****************************************************/
/****************************************************/


#include <stdio.h>
#include <stdlib.h>
#include <time.h>


int main()
{
    srand((unsigned)time(NULL));

    return 0;
}

/****************************************************/
/****************************************************/


#include <stdio.h>
#include "utility.h"

int main()
{
    randomize();

    for (int i = 0; i < 5; ++i) {
        printf("%d\n", rand());
    }

    return 0;
}

/****************************************************/
/****************************************************/

#include <stdio.h>
#include "utility.h"

int main()
{
    randomize();

    for (int i = 0; i < 5; ++i) {
        printf("%d\n", rand());
    }

    return 0;
}

/****************************************************/
/****************************************************/


#include <stdio.h>
#include "utility.h"

int main()
{
    randomize();

    for (;;) {
        putchar(rand() % 26 + 'A');
        xSleep(0.05);
    }

    return 0;
}

/****************************************************/
/****************************************************/

#include <stdio.h>
#include <ctype.h>
#include "utility.h"

int main()
{
    randomize();

    for (;;) {
        int val = rand() % 128;
        if(isupper(val)){
            putchar(val);
            xSleep(0.05);
        };
    }

    return 0;
}

/****************************************************/
/****************************************************/

#include <stdio.h>
#include <ctype.h>
#include "utility.h"

int main()
{
    randomize();

    for (;;) {
        int val = rand() % 128;
        if(ispunct(val)){
            putchar(val);
            xSleep(0.05);
        };
    }

    return 0;
}

/****************************************************/
/****************************************************/


#include <stdio.h>
#include <ctype.h>
#include "utility.h"

int get_random_char(void)
{
    int c;

    while (1) {
        c = rand() % 128;
        if(isalpha(c)){
            return c;
        }
    }
}

void print_random_password(void)
{
    int len;

    len = rand() % 10 + 4;
    for (int i = 0; i < len; ++i) {
        putchar(get_random_char());
    }

    putchar('\n');
}

int main()
{
    randomize();

    for (int i = 0; i < 10; ++i) {
        print_random_password();
    }

    return 0;
}

/****************************************************/
/****************************************************/

#include <stdio.h>
#include <ctype.h>
#include "utility.h"

int get_random_char(void)
{
    int c;

    while (1) {
        c = rand() % 128;
        if(isalpha(c)){
            return c;
        }
    }
}

void print_random_password(void)
{
    int len;

    //randomize();
    len = rand() % 10 + 4;
    for (int i = 0; i < len; ++i) {
        putchar(get_random_char());
    }

    putchar('\n');
}

int main()
{
    randomize();
    for (int i = 0; i < 10; ++i) {
        print_random_password();
    }

    return 0;
}

/****************************************************/
/****************************************************/

#include <stdio.h>
#include <ctype.h>
#include "utility.h"

#define     NTOSS       100000
#define     HEADS       1   //tura


int main()
{
    randomize();

    int heads_count = 0;

    for (int i = 0; i < NTOSS; ++i) {
        if(rand() % 2 == HEADS)
            ++heads_count;
    }

    printf("olasilik = %f\n", (double) heads_count / NTOSS);

    return 0;
}

/****************************************************/
/****************************************************/

#include <stdio.h>
#include <ctype.h>
#include "utility.h"


/*
 * oyun kuralları
 *
 * zarların taoplamı en dusuk 2 en buyuk 12
 *
 * atılan zarların toplamına göre oyuncy ya para kaybetcek ya para kazancak
 *
 * eger zarların 1. atılışında
 * toplam
 *
 * 7 - 11 ise ---> oyuncu kazanır
 * 2 - 3 - 12 ise --> oyuncu kayber kasa kazanır
 * 4 - 5 - 8 - 9 - 10 ise --> oyunun kuralları değişir
 *
 * eger oyunun kuralları değişirse
 * örnek
 * 9 attık ve tekrar 9 atar isek kazandık
 * 5
 * 11
 * 3
 * 8
 * 6
 * 9 eger burada 9 yerine 7 atsaydım kasa kazandı ben kaybettim
 *
 *
 * soru su oyuncunun oyunu kazanma olasılıhı nedir
 * %49,3455   -->  kasıının ki -->%50.23434
 *
 *
 *
 *
 */

#define     NGAMES      1000000

int roll_dice(void)
{
    int dice_1 = rand() % 6 + 1;
    int dice_2 = rand() % 6 + 1;

    return dice_1 + dice_2;
}

int gameRule(int dice)
{
    while (1) {
        int new_dice = roll_dice();
        if(new_dice == dice)
            return 1;
        if(new_dice == 7)
            return 0;
    }
}

int game(void)
{
    int dice = roll_dice();

    switch (dice) {
    case 7:
    case 11: return 1;
    case 2:
    case 3:
    case 12: return 0;
    default: return gameRule(dice); break;
    }

}

int main()
{
    randomize();

    int win_count = 0;

    for (int i = 0; i < NGAMES; ++i) {
        win_count += game();
    }

    printf("kazanma olasiligi = %f\n", 100. * win_count / NGAMES);

    return 0;
}

/****************************************************/
/****************************************************/

C+++ random fnksiyonlarını yazalım


#include <stdio.h>
#include <ctype.h>
#include "utility.h"
#include <random>


/*
 * oyun kuralları
 *
 * zarların taoplamı en dusuk 2 en buyuk 12
 *
 * atılan zarların toplamına göre oyuncy ya para kaybetcek ya para kazancak
 *
 * eger zarların 1. atılışında
 * toplam
 *
 * 7 - 11 ise ---> oyuncu kazanır
 * 2 - 3 - 12 ise --> oyuncu kayber kasa kazanır
 * 4 - 5 - 8 - 9 - 10 ise --> oyunun kuralları değişir
 *
 * eger oyunun kuralları değişirse
 * örnek
 * 9 attık ve tekrar 9 atar isek kazandık
 * 5
 * 11
 * 3
 * 8
 * 6
 * 9 eger burada 9 yerine 7 atsaydım kasa kazandı ben kaybettim
 *
 *
 * soru su oyuncunun oyunu kazanma olasılıhı nedir
 * %49,3455   -->  kasıının ki -->%50.23434
 *
 *
 *
 *
 */

#define     NGAMES      1000000

int roll_dice(void)
{
    static std::mt19937 eng;
    static std::uniform_int_distribution<int> dist{1, 6};

    int dice_1 = dist(eng);
    int dice_2 = dist(eng);

    return dice_1 + dice_2;
}

int gameRule(int dice)
{
    while (1) {
        int new_dice = roll_dice();
        if(new_dice == dice)
            return 1;
        if(new_dice == 7)
            return 0;
    }
}

int game(void)
{
    int dice = roll_dice();

    switch (dice) {
    case 7:
    case 11: return 1;
    case 2:
    case 3:
    case 12: return 0;
    default: return gameRule(dice); break;
    }

}

int main()
{
    //randomize();

    int win_count = 0;

    for (int i = 0; i < NGAMES; ++i) {
        win_count += game();
    }

    printf("kazanma olasiligi = %f\n", 100. * win_count / NGAMES);

    return 0;
}

/****************************************************/
/****************************************************/

Ödev Sorusu

1- monte-carlo yöntemi ile pi sayısını hesapmanız isteniyor


2- Kumar oyunun sümilasyonu

oyuncunun 100 doları va ve kasaya karsı oynuyor kasanında 100 doları var

oyuna girebilmek için 10 doları verilir ve  yazı tura atıyor

kural şu

arka arkaya YAZI YAZI gelir ise 35 Dolar verir kasa size
Arka arkaya TURA TURA TURA gelir ise 60 dolar verir kasa size

soru şu oyuncunun bu oyunu kazanma olasılıgı nedir


kasanın kaybetmesi için 60 altına düştümü yani ödeme tutarının altına düşmesiyle kaybeder
ornek odemsi olacak kasanın 59 elinde kaldı o zamn kaybetti

oyuncuda 10 doların altına duser ise tekrar oyuna göremez ise kaybeder

2 Yazı gelince sayac sıfırlanır
3 T gelince sayac sıfırlanır

/*****************************************************/
/*****************************************************/

veri yapıları
algoritma

Array konusuna giriş



veri yapıları ve algoritmalar

veri yapsının  --> data structure
buna en yakın ADT(abstract data type) bahsedecez

Verilerin bellekte ne şekilde tutulduguna ilişkin organizasyon
Neden bu gerekli bu tutgumuz verilerin ne sekılde tutuyorsanız bu verielere
ulasmanız farklılık gosterebilir ve onemlidir



çok sayıda veri yapısı var işimize hangisi yarıyor ise onu seçmemiz lazım
veri yapısı C ye ozgu değil bir çok dile özgü genel bir konu

En çok hangi veri yapsıı kullanılıyor diyorsanız ---> dynamic array


sırası ile gelmesi verielerin avantajı
Fixed arrayın avantajı

index bilgisi ile veri elemnalrından birisine
constant time (sabit zamanda) ulasabiliriz

eger sık sık verielerde yuksek maliyet olmadan erişmek istiyor isek
en iyi veri yapsıı dinamik dizi


ayrıca dinamik dizilere veri ekleme maliyeti az
yani sondan ekleme işlemi constant time  da



Algoritma
programlama ile ilgili değil
amacı bir işi nasıl yapmalıyım hangi aşamalardan geçirmeliyim


algoritma elimizde bir veri yapısı olması lazım ki devre ye girebilsin

bir işi ne kadar surede ne kadar az işlemle yapılması için
kullanılan paremetreleeri iyi seçmeleyiz
ve kurdugumuz algoritmada en hızlısı ve en az işlemlisini seçmeliyiz
kullandıgı bellekte onemlidir.

algoritma karmaşıklıgı ---> complexcity karmaşıklıgı

iki faktor önemli
1- kaç tane işlemde devreye giriyor
2- kullanılan bellek açısından ele alınır


Big O notasyonu

Veri yapsıınıdaki öge sayısının artışıyla yapılan işlem sayısı arasındaki ilişki

O() --> parantez içine yazdıgımız ifadeler algortimanın karmasıklıgını gösteriyor

O(1)  constant time -->  veri yapısındaki öge sayısı ne kadar artarsa artsın maliyet
                        değişmiyor

O(n) liner complexcity  --> veri yapısındaki öge ne kadar artarsa maliyeti o kdar artıyor

O(n*log n)

O(n^2)  --> veri yapsıındaki oge sayısının karesı ile dogru orantılı olarak artıyot işlem maliyeti


O(n2 * log n)

O(n^3)
O(n!)

---------------------------------------------------------------------

C Array

teknik ismi --> Fix Array

-->Dynamic Array


--------------------------
teknik ismi --> Fix Array

bellekte ardışık olarak yerleştirilen  ve sonradan ekleme ve çıkartma olamayn data struct Fixed array
compile time da C derleyicisi bunu sabit ifadesi olarak alır

ardık olması ile index bilgisi ile constant time da ulaşılır


C de dizi tanımlama sentakslarından bahsedelim



#include <stdio.h>

int main()
{
    //boyutunu constan exprestion yazmanız lazım
    //tam saıy turu olması lazım yoksa sentaks hatası olur
    //boyutu sıfır olamaz sentaks hatası
    //negatif de olmaz senyaks hatası
    int arr[10];

    return 0;
}


/****************************************************/
/****************************************************/

#include <stdio.h>

#define     ARRAYSIZE       100

int main()
{

    int arr[ARRAYSIZE];

    return 0;
}


/****************************************************/
/****************************************************/

#include <stdio.h>

#define     ARRAYSIZE       100

int main()
{

    //böylebir yazım yapaibliriz ama yapmayalım görüntü kotu
    int x, arr[ARRAYSIZE] , b[10], t;

    return 0;
}


/****************************************************/
/****************************************************/

#include <stdio.h>

#define     ARRAYSIZE       100

//globak dizi
//ilk deger vermezsek hayata elemanları 0 degeri ile gelir
int a[10];

void func()
{
    //otomatik ömürlü elemanlarına deger vermez isek
    //çöp degeri ile hayata gelirler
    int b[20];

    //static omurlu dizi elemanlarına deger vermezsek 0 ile hayat gelir
    static int c[30];

}


int main()
{



    return 0;
}


/****************************************************/
/****************************************************/

C dilinde bir gonksiyonun parametre değişkeni dizi olamaz

#include <stdio.h>

//dizi niyeti ile yapmayın dizi değil çünkü
void func(int a[])
{


}


int main()
{

    return 0;
}


/****************************************************/
/****************************************************/

C dilinde bir fonsksiyonun geri donus türü dizi olamaz

bu işlemleri pointerlarda görecez



----------------------

assignable  --> atanabilir varlıklar anlamına gelir

int a[]
int b[]

a = b;  seklın bir kurduk


bir çok dilde diziyi boyle atayabiliriz
fakat C de böyle bir atma yok yapamayız

C de atama operatorunun sol operandı bir dizi olamz

-----------------------------------------

int a[];

a  --> &a[0]  bu ikiside aynı yeri işaret eder

dizinin ilk elemanın adresidir



#include <stdio.h>


int main()
{
    //bende int türünden 10 tane var demek
    int a[10];

    return 0;
}


/****************************************************/
/****************************************************/


bir dizinin elemanlarına erişmek için pointer kullanılır
şuan için ezbere kullanmıl olacaz ana detaylı oalrak pointer konusunda görecez

[] -> & *  bunlar pointer operatorudur


-----------------------------------------


dizinin ilk elemanına erişmek için 0 index'ine erişmek gerekli

dizi 10 eleman lı olsun

a[0]  --> birinci eleman
a[9]  --> son eleman



eger index biglisinnii buyuk veya kucuk verdim aşarsak sentaks hatası
tanımsız davranışa duser

bundan programcı sorumludur

#include <stdio.h>


int main()
{
    int a[100];

    //operator işlemlerinni yapabiliriz
    a[6];

    int x;

    a[7] = x;

    return 0;
}


/****************************************************/
/****************************************************/

traverse -- traversal  --> dizi yi dolaşmak anlamında kullanılır

iterate

bu terimler kullanılır diziyi dolaşmak için



#include <stdio.h>


int main()
{
    int a[100];

    for (int i = 0; i < 100; ++i) {
        a[i] = 1;
        ++a[i];
        a[i] += 1;
    }

    return 0;
}


/****************************************************/
/****************************************************/

#include <stdio.h>

#define     SIZE        10

int main()
{
    int a[SIZE];

    for (int i = 0; i < SIZE; ++i) {
        printf("%d ", a[i]);
    }

    return 0;
}


/****************************************************/
/****************************************************/


#include <stdio.h>

#define     SIZE        10

int a[SIZE];

int main()
{

    for (int i = 0; i < SIZE; ++i) {
        printf("%d ", a[i]);
    }

    putchar('\n');

    return 0;
}


/****************************************************/
/****************************************************/


#include <stdio.h>

#define     SIZE        10



int main()
{
    static int a[SIZE];

    for (int i = 0; i < SIZE; ++i) {
        printf("%d ", a[i]);
    }

    putchar('\n');

    return 0;
}


/****************************************************/
/****************************************************/

#include <stdio.h>

#define     SIZE        10

int main()
{
    int a[SIZE];

    int i;
    while (i < SIZE) {
        printf("%d ", a[i++]);
        //i++;
    }

    putchar('\n');

    return 0;
}


/****************************************************/
/****************************************************/


diziye ilk deger verme


#include <stdio.h>

#define     SIZE        5

int main()
{
    int a[SIZE] = {1, 3, 4 ,6, 7};

    for (int i = 0; i < SIZE; ++i) {
        printf("%d ", a[i]);
    }

    putchar('\n');

    return 0;
}


/****************************************************/
/****************************************************/


#include <stdio.h>

#define     SIZE        5

int main()
{
    //boyutunda fazla eleman vermek sentaks hatasına neden olur
    int a[SIZE] = {1, 3, 4 ,6, 7, 45, 23};

    for (int i = 0; i < SIZE; ++i) {
        printf("%d ", a[i]);
    }

    putchar('\n');

    return 0;
}


/****************************************************/
/****************************************************/
#include <stdio.h>

#define     SIZE        10

int main()
{
    //boyutun az eleman verir isek kalan ogeleri 0 ile dolduruyor
    int a[SIZE] = {1, 3, 4 ,6, 7, 45, 23};

    for (int i = 0; i < SIZE; ++i) {
        printf("%d ", a[i]);
    }

    putchar('\n');

    return 0;
}


/****************************************************/
/****************************************************/


#include <stdio.h>

#define     SIZE        10

int main()
{

    int a[SIZE] = {1};

    for (int i = 0; i < SIZE; ++i) {
        printf("%d ", a[i]);
    }

    putchar('\n');

    return 0;
}


/****************************************************/
/****************************************************/


#include <stdio.h>

#define     SIZE        10

int main()
{

    //sentaks hatası olur
    int a[SIZE] = {};

    for (int i = 0; i < SIZE; ++i) {
        printf("%d ", a[i]);
    }

    putchar('\n');

    return 0;
}


/****************************************************/
/****************************************************/

#include <stdio.h>

#define     SIZE        10

int main()
{

    int a[SIZE] = {0};

    for (int i = 0; i < SIZE; ++i) {
        printf("%d ", a[i]);
    }

    putchar('\n');

    return 0;
}


/****************************************************/
/****************************************************/
#include <stdio.h>

#define     SIZE        5

int main()
{

    //dizinin son elemanından sonra , kona bilir
    //bu virgule trailing comma denir
    int a[SIZE] = {1, 2, 3, 4, 5,};

    for (int i = 0; i < SIZE; ++i) {
        printf("%d ", a[i]);
    }

    putchar('\n');

    return 0;
}


/****************************************************/
/****************************************************/


#include <stdio.h>

#define     SIZE        5

int main()
{

    //sentka shatası dizinin bu durumda boyutunu yazmak zorundayım
    int a[];


    return 0;
}


/****************************************************/
/****************************************************/
#include <stdio.h>

#define     SIZE        5

int main()
{

    //EGER ildk deger verirlıyor ve dizinin boyutu verilmiyor ise
    //compile time da derleyici sizin yerine sayar ve dizinin boyutunu veririr
    int a[] = {1, 2, 3, 4};


    return 0;
}


/****************************************************/
/****************************************************/

#include <stdio.h>

#define     SIZE        100

int main()
{
    //C99
    //designated initializer

    int a[SIZE] = {[22] = 65, [12] = 39, [55] = 441};

    for (int i = 0; i < SIZE; ++i) {
        printf("a[%d] = %d\n", i, a[i]);
    }


    return 0;
}


/****************************************************/
/****************************************************/
#include <stdio.h>

#define     SIZE        100

int main()
{
    //C99
    //designated initializer

    int a[] = {[22] = 65, [12] = 39, [49] = 441};

    for (int i = 0; i < 50; ++i) {
        printf("a[%d] = %d\n", i, a[i]);
    }


    return 0;
}


/****************************************************/
/****************************************************/


C99 ile variable length array (VLA) dizi farklıdır Fixed arrayden
VLA derleyiciye baglı olarak desteklenir

VLA ilerleyen derlerde bahsedecez onemli oldugu için

/****************************************************/


temel algoritmları C de kolayacagız




#include <stdio.h>
#include "utility.h"

#define     SIZE        100

int main()
{
    int a[SIZE];

    randomize();
    set_array_random(a, SIZE);
    print_array(a, SIZE);


    return 0;
}


/****************************************************/
/****************************************************/

#include <stdio.h>
#include "utility.h"

#define     SIZE        100

int main()
{
    int a[SIZE];

    randomize();
    set_array_random(a, SIZE);
    print_array(a, SIZE);

    int sum = 0;

    for (int i = 0; i < SIZE; ++i) {
        sum += a[i];
    }

    printf("sum = %d\n", sum);
    printf("avg = %f\n", (double)sum / SIZE);


    return 0;
}


/****************************************************/
/****************************************************/


#include <stdio.h>
#include "utility.h"

#define     SIZE        100

int main()
{
    int a[SIZE];

    randomize();
    set_array_random(a, SIZE);
    print_array(a, SIZE);

    int odd_count = 0;
    int odd_sum = 0;

    for (int i = 0; i < SIZE; ++i) {
        if(a[i] % 2){
            odd_sum += a[i];
            odd_count++;
        }
    }

    printf("teklerin toplami = %d\n", odd_sum);

    if(odd_count)
        printf("teklerin ortalamasi = %f\n", (double)odd_sum / odd_count);
    else
        printf("dizide tek sayi yok\n");


    return 0;
}


/****************************************************/
/****************************************************/
#include <stdio.h>
#include "utility.h"
#include <math.h>

#define     SIZE        100

//dizinin standart sapmasını hesaplayalım

int main()
{
    int a[SIZE];

    randomize();
    set_array_random(a, SIZE);
    print_array(a, SIZE);

    int sum = 0;

    for (int i = 0; i < SIZE; ++i) {
        sum += a[i];
    }

    double mean = (double) sum / SIZE;

    double sum_square = 0;

    for (int i = 0; i < SIZE; ++i) {
        sum_square += (a[i] - mean) * (a[i] - mean);
    }

    double std_dev = sqrt(sum_square / (SIZE - 1));

    printf("std_dev = %f\n", std_dev);

    return 0;
}


/****************************************************/
/****************************************************/


#include <stdio.h>
#include "utility.h"
#include <math.h>

#define     SIZE        100

//dizinin standart sapmasını hesaplayalım

//Big O Notasyonu
//O(n)

int main()
{
    int a[SIZE];

    randomize();
    set_array_random(a, SIZE);
    print_array(a, SIZE);

    int sum = 0;

    for (int i = 0; i < SIZE; ++i) {
        sum += a[i];
    }

    double mean = (double) sum / SIZE;

    double sum_square = 0;

    for (int i = 0; i < SIZE; ++i) {
        sum_square += (a[i] - mean) * (a[i] - mean);
    }

    double std_dev = sqrt(sum_square / (SIZE - 1));

    printf("std_dev = %f\n", std_dev);

    return 0;
}


/****************************************************/
/****************************************************/


arama algoritmalarından bahsedelim


linear search


#include <stdio.h>
#include "utility.h"
#include <math.h>

#define     SIZE        100


int main()
{
    int a[SIZE];

    randomize();
    set_array_random(a, SIZE);
    print_array(a, SIZE);

    int sval;

    printf("arama degeri giriniz : ");
    scanf("%d", &sval);

    int i;
    for (i = 0; i < SIZE; ++i) {
        if(a[i] == sval)
            break;
    }

    if(i < SIZE)
        printf("bulundu dzinin %d indisli elemani\n", i);
    else
        printf("bulunamadi\n");


    return 0;
}


/****************************************************/
/****************************************************/


#include <stdio.h>
#include "utility.h"
#include <math.h>

#define     SIZE        100


int main()
{
    int a[SIZE];

    randomize();
    set_array_random(a, SIZE);
    print_array(a, SIZE);

    int sval;

    printf("arama degeri giriniz : ");
    scanf("%d", &sval);

    int i;
    for (i = 0; i < SIZE && a[i] != sval; ++i)
        ;

    if(i < SIZE)
        printf("bulundu dzinin %d indisli elemani\n", i);
    else
        printf("bulunamadi\n");


    return 0;
}


/****************************************************/
/****************************************************/


soru : alttaki linear search algoritmasında

3 işlmede gercekleşen işlemi
3*SIZE işlem yapılıyor

biz bunu
2*SIZE da gercekleştirmek istiyoruz nasıl yaparız


#include <stdio.h>
#include "utility.h"
#include <math.h>

#define     SIZE        100


int main()
{
    int a[SIZE];

    randomize();
    set_array_random(a, SIZE);
    print_array(a, SIZE);

    int sval;

    printf("arama degeri giriniz : ");
    scanf("%d", &sval);

    int i;
    for (i = 0; i < SIZE; ++i) {
        if(a[i] == sval)
            break;
    }

    if(i < SIZE)
        printf("bulundu dzinin %d indisli elemani\n", i);
    else
        printf("bulunamadi\n");


    return 0;
}


/****************************************************/
/****************************************************/

reverse algoritması

ilk eleman son elemanla degişir
ikinci eleman ile sondaki ikinci eleman


#include <stdio.h>
#include "utility.h"
#include <math.h>

#define     SIZE        10


int main()
{
    int a[SIZE];

    randomize();
    set_array_random(a, SIZE);
    print_array(a, SIZE);

    for (int i = 0; i < SIZE / 2; ++i) {
        int temp = a[i];
        a[i] = a[SIZE - 1 - i];
        a[SIZE - 1 - i] = temp;
    }

    print_array(a, SIZE);

    return 0;
}


/****************************************************/
/****************************************************/


max element
min element



#include <stdio.h>
#include "utility.h"
#include <math.h>

#define     SIZE        10


int main()
{
    int a[SIZE];

    randomize();
    set_array_random(a, SIZE);
    print_array(a, SIZE);

    int max = a[0];
    int max_idx = 0;

    for (int i = 1; i < SIZE; ++i) {
        if(max < a[i]){
            max = a[i];
            max_idx = i;
        }
    }

    printf("max : %d ve dizinin %d indisli elemani\n", max, max_idx);


    return 0;
}


/****************************************************/
/****************************************************/


#include <stdio.h>
#include "utility.h"
#include <math.h>

#define     SIZE        10


int main()
{
    int a[SIZE];

    randomize();
    set_array_random(a, SIZE);
    print_array(a, SIZE);

    int max = a[0];
    int min = a[0];

    for (int i = 1; i < SIZE; ++i) {
        if(a[i] > max)
            max = a[i];
        else if(a[i] < min)
            min = a[i];
    }

    printf("min = %d\n", min);
    printf("max = %d\n", max);

    return 0;
}


/****************************************************/
/****************************************************/


runner_up --> ikinci

veri yapılarında en buyuk ikinci eleman anlamına gelir



#include <stdio.h>
#include "utility.h"
#include <math.h>

#define     SIZE        10

int main()
{
    int a[SIZE];

    randomize();
    set_array_random(a, SIZE);
    print_array(a, SIZE);

    int max = a[0];
    int runner_up = a[1];

    if(max < runner_up){
        max = a[1];
        runner_up = a[0];
    }

    for (int i = 2; i < SIZE; ++i) {
        if(a[i] > max){
            runner_up = max;
            max = a[i];
        }
        else if(a[i] > runner_up){
            runner_up = a[i];
        }
    }

    printf("max = %d\n", max);
    printf("runner_up = %d\n", runner_up);

    return 0;
}


/****************************************************/
/****************************************************/

20  11   1  18  13   7   8  15  16  11

birinci satır 20 *
ikinci satır 11 *
üçüncü satır 1*
....


#include <stdio.h>
#include "utility.h"
#include <math.h>

#define     SIZE        10

int main()
{
    int a[SIZE];

    randomize();
    for(int i = 0; i < SIZE; ++i){
        a[i] = rand() % 20 + 1;
    }

    print_array(a, SIZE);

    for (int i = 0; i < SIZE; ++i) {
        for (int k = 0; k < a[i] ; ++k) {
            putchar('*');
        }
        putchar('\n');
    }



    return 0;
}


/****************************************************/
/****************************************************/

Ödev

Yukarıda ki sorunun çıktısını 90 saat yönün tersine çevrilmiş
şekilde ekran çıktısı üretmenizi bekliyorum


yani dikey bir histogram olusacak....





/****************************************************/
/****************************************************/

Ödev

unique --> eşsiz


16  20  11  10  11   6  18   3  13   7  15   8  11   7   6  11  20  17   2  15
-------------------------------------------------------------------------------

unique
16 10 18 3 13 8 17 2

unique degerleri bulun  ve bunları kucukten buyuge sıralayın

2 yöntemle istiyorum
1. yeni bir dizi kullanarak
2. ikinci bir dizi kullanmadan


/****************************************************/
/****************************************************/



binary search algoritması


sıralı bir veri yapsıında bir key in olup olmadıını araması




13  13  22  32  32  74  75  81  94  95  95  96 100 129 145 154 171 176 189 200
203 215 223 231 242 259 259 266 280 286 288 295 296 327 331 357 359 385 387 402
404 406 406 413 413 421 431 443 461 494 500 504 505 506 508 519 536 539 553 567
569 580 580 581 583 587 588 606 637 644 649 665 669 669 674 683 694 747 784 797
798 800 801 814 819 824 832 873 892 894 895 934 955 955 974 978 994 996 997 999
-------------------------------------------------------------------------------


819  bulmak istedigimiz deger

aramaya ortadan baslıyoruz

eger aradıgım deger bu degerden buyuk ise aramaya kcuukerı katmıyoruz

kalan egerlerin ortasına bakıyoruz tekrar aynı kontrol kcuukleru at

aynı kontrol yap taki bulana kadar bulamaz

döngüden cıkıyor


binary search algoritması karmasıklıgı O(log n) karmasıklı





#include <stdio.h>
#include "utility.h"
#include <stdlib.h>

#define     SIZE        100

int icmp(const void *vp1, const void *vp2)
{
    return *(const int *)vp1 - *(const int *)vp2;
}

int main()
{
    int a[SIZE];

    randomize();
    set_array_random(a, SIZE);
    qsort(a, SIZE, sizeof (int), &icmp);
    print_array(a, SIZE);

    int sval;
    printf("aranan degeri giriniz : ");
    scanf("%d", &sval);

    int idx_first = 0;
    int idx_last = SIZE - 1;
    int idx_mid;


    while (idx_first <= idx_last) {
        idx_mid = (idx_first + idx_last) / 2;

        if(a[idx_mid] == sval)
            break;

        if(a[idx_mid] > sval){
            idx_last = idx_mid - 1;
        } else {
            idx_first = idx_mid + 1;
        }
    }


    if(idx_first > idx_last)
        printf("aranan deger bulunamadi\n");
    else
        printf("bulundu dizinin %d indisli elemani\n", idx_mid);

    return 0;
}


/****************************************************/
/****************************************************/


#include <stdio.h>
#include "utility.h"
#include <stdlib.h>

#define     SIZE        100

int icmp(const void *vp1, const void *vp2)
{
    return *(const int *)vp1 - *(const int *)vp2;
}

int main()
{
    int a[SIZE];

    randomize();
    set_array_random(a, SIZE);
    qsort(a, SIZE, sizeof (int), &icmp);
    print_array(a, SIZE);

    int sval;
    printf("aranan degeri giriniz : ");
    scanf("%d", &sval);

    int idx_first = 0;
    int idx_last = SIZE - 1;
    int idx_mid;


    int cnt = 0;
    while (idx_first <= idx_last) {
        cnt++;
        idx_mid = (idx_first + idx_last) / 2;

        if(a[idx_mid] == sval)
            break;

        if(a[idx_mid] > sval){
            idx_last = idx_mid - 1;
        } else {
            idx_first = idx_mid + 1;
        }
    }


    if(idx_first > idx_last)
        printf("aranan deger bulunamadi\n");
    else
        printf("bulundu dizinin %d indisli elemani\n", idx_mid);

    printf("cnt = %d\n", cnt);

    return 0;
}


/****************************************************/
/****************************************************/


sizeof operator

hem operator hem anahtar sözcük

önemli fonksiyon değil

bu operatorun urettıgı deger compile time gercekleşir

amacı : bir türün stroge da kaç byte yer kapladıgının bilgisini vermek

2. öncelik seviyesinde

sizeof(type)

sizeof(int)
sizeof(double)

use define types lar da olablir




#include <stdio.h>
#include "utility.h"
#include <stdlib.h>

#define     SIZE        100


int main()
{
    printf("sizeof(char) = %zu\n", sizeof (char));
    printf("sizeof(short) = %zu\n", sizeof (short));
    printf("sizeof(_Bool) = %zu\n", sizeof (_Bool));
    printf("sizeof(int) = %zu\n", sizeof (int));
    printf("sizeof(long) = %zu\n", sizeof (long));
    printf("sizeof(long long) = %zu\n", sizeof (long long));
    printf("sizeof(float) = %zu\n", sizeof (float));
    printf("sizeof(double) = %zu\n", sizeof (double));
    printf("sizeof(long double) = %zu\n", sizeof (long double));

    return 0;
}


/****************************************************/
/****************************************************/



#include <stdio.h>
#include "utility.h"
#include <stdlib.h>

#define     SIZE        100


int main()
{

    //compile timedda gercekleştigi için bunu yapabiliriz
    int a[sizeof (double)] = {0};

    return 0;
}


/****************************************************/
/****************************************************/

#include <stdio.h>
#include "utility.h"
#include <stdlib.h>

#define     SIZE        100


int main()
{
    int x = 10;

    //bu iki ifade arasında fark yoktur
    printf("%zu\n", sizeof (x));
    printf("%zu\n", sizeof x);

    return 0;
}


/****************************************************/
/****************************************************/

#include <stdio.h>
#include "utility.h"
#include <stdlib.h>

#define     SIZE        100


int main()
{
    int x = 10;

    //bu iki ifade arasında fark yoktur
    printf("%zu\n", sizeof (x));
    printf("%zu\n", sizeof x);

    //double kontrolu yapar
    printf("%zu\n", sizeof(x * 1.2));

    return 0;
}


/****************************************************/
/****************************************************/


sizeof --> unsigned int

döndürür

/****************************************************/
/****************************************************/



#include <stdio.h>
#include "utility.h"
#include <stdlib.h>

#define     SIZE        100


int main()
{
    int x = 10;

    unsigned int uval = sizeof x * 5;//20
    unsigned int uval1 = sizeof (x * 5); //4
    unsigned int uval2 = sizeof (x) * 5; //20

    printf("uval = %d\n", uval);
    printf("uval1 = %d\n", uval1);
    printf("uval2 = %d\n", uval2);

    return 0;
}


/****************************************************/
/****************************************************/

#include <stdio.h>
#include "utility.h"
#include <stdlib.h>

#define     SIZE        100


int main()
{
    int x = 10;
    int a = 5;
    double b = 4.5;

    printf("%zu\n", sizeof (x > 0 ? a : b));

    return 0;
}


/****************************************************/
/****************************************************/


#include <stdio.h>
#include "utility.h"
#include <stdlib.h>

#define     SIZE        100


int main()
{
    int x = 3;

    //sizeof içindeki ifade eger yan etkisi va ise onu gercekleştirmez
    printf("%zu\n", sizeof (x++));
    printf("%d\n", x);

    return 0;
}


/****************************************************/
/****************************************************/
#include <stdio.h>
#include "utility.h"
#include <stdlib.h>

#define     SIZE        100

double foo(void)
{
    printf("orhan ozturk\n");
    return 4.5;
}

int main()
{
    int x = 3;

    //sizeof içindeki ifade eger yan etkisi va ise onu gercekleştirmez
    printf("%zu\n", sizeof (x++));
    printf("%d\n", x);
    printf("%zu\n", sizeof (foo()));

    return 0;
}


/****************************************************/
/****************************************************/


#include <stdio.h>
#include "utility.h"
#include <stdlib.h>

#define     SIZE        100


int main()
{
   char s[30] = {0};
   int s1[100] = {0};
   double s2[40] = {0};


   printf("size(s) = %zu\n", sizeof (s));
   printf("size(s1) = %zu\n", sizeof (s1));
   printf("size(s2) = %zu\n", sizeof (s2));

    return 0;
}


/****************************************************/
/****************************************************/


#include <stdio.h>
#include "utility.h"
#include <stdlib.h>

#define     SIZE        100


int main()
{
   char s[30] = {0};
   int s1[100] = {0};
   double s2[40] = {0};


   printf("size(s) = %zu\n", sizeof (s));
   printf("size(s1) = %zu\n", sizeof (s1));
   printf("size(s2) = %zu\n", sizeof (s2));

   printf("sizeof(s1[0] = %zu\n", sizeof (s1[0]));

    return 0;
}


/****************************************************/
/****************************************************/


#include <stdio.h>
#include "utility.h"
#include <stdlib.h>

#define     SIZE        100


int main()
{
   char s[30] = {0};
   int s1[100] = {0};
   double s2[40] = {0};


   printf("bout s = %zu\n", sizeof (s) / sizeof (s[0]));
   printf("boyut s1 = %zu\n", sizeof (s1) /sizeof (s1[0]));
   printf("boyut s2 = %zu\n", sizeof (s2) /sizeof (s2[0]));



    return 0;
}


/****************************************************/
/****************************************************/


#include <stdio.h>
#include "utility.h"
#include <stdlib.h>

#define     SIZE        100


int main()
{
   int a[] = {2, 5, 7, 8, 2, 3, 9, 6, 13};


   //tabi böyle yazmamınızı tavsiye ediyorum
   for (int i = 0; i < sizeof (a) / sizeof (a[0]); ++i) {
       printf("%d ", a[i]);
   }




    return 0;
}


/****************************************************/
/****************************************************/

#include <stdio.h>
#include "utility.h"
#include <stdlib.h>

#define     SIZE        100


int main()
{
   int a[] = {2, 5, 7, 8, 2, 3, 9, 6, 13, 234, 2344, 13, 122, 23,4};
   double da[2* sizeof (a) / sizeof (a[0])];





    return 0;
}


/****************************************************/
/****************************************************/



#include <stdio.h>
#include "utility.h"


#define     SIZE        100


int main()
{
   int a[] = {2, 5, 7, 8, 2, 3, 9, 6, 13};
   double da[asize(a)];

    return 0;
}


/****************************************************/
/****************************************************/

#include <stdio.h>
#include "utility.h"


#define     SIZE        100


int main()
{
   int a[] = {2, 5, 7, 8, 2, 3, 9, 6, 13};

   for (int i = 0; i < asize(a); ++i) {
       printf("%d ", a[i]);
   }

    return 0;
}


/****************************************************/
/****************************************************/


#include <stdio.h>
#include "utility.h"


#define     SIZE        100

//mülakat sorusu


int main()
{
   int a[] = {1, 2, 3, 4, 5};

   //sizeof unsigned int dönüyor dedik
   //int ten unsigned donusum oluyor
   //i nin turu unsigned cast ediliyor
   // max alabilecegi deger oluyor

   for (int i = -1; i < asize(a) - 1; ++i) {
       printf("%d ", a[i + 1]);
   }

    return 0;
}


/****************************************************/
/****************************************************/

#include <stdio.h>
#include "utility.h"


#define     SIZE        100

//mülakat sorusu


int main()
{
   int a[] = {1, 2, 3, 4, 5};


   for (int i = -1; i < (int)asize(a) - 1; ++i) {
       printf("%d ", a[i + 1]);
   }

    return 0;
}


/****************************************************/
/****************************************************/

sıralama algoritmaları

sorthing algorithms

belirli bir düzne göre dizme işlemi için kullanılır

bu düzün buyukten kucuge veya kucukten buyuge olabilir


genel sıralama algoritmalarının karmasıklıgı O(n* log n) veya O(n2)
aransında olabilir


buble sort
insertion  sort
selection sort
heap sort
merge sort
shell sort
radix sort
quick sort


buble sort algortiması ikili sıra seklinde kontrol ve takas işlemi gercekletirir



495 421  97 896 541 902 688  24 564 254
421 495  97 896 541 902 688  24 564 254
421 97  495 896 541 902 688  24 564 254
421 97  495 541 896 902 688  24 564 254
421 97  495 541 896 688 902  24 564 254
421 97  495 541 896 688  24 902 564 254
421 97  495 541 896 688  24 564 902 254
421 97  495 541 896 688  24 564 254 902  -- en buyuk elemanı en son getirdi n-1 defa da yaptı işlemi

dongum (n-1)(n-1) defa yapar isek işlem sıralı hale gelir // This is available in all editors.

#include <stdio.h>
#include "utility.h"


#define     SIZE        10


int main()
{
    int a[SIZE];

    randomize();
    set_array_random(a, SIZE);
    print_array(a, SIZE);

    for (int i = 0; i < SIZE - 1; ++i) {
        for (int k = 0; k < SIZE - 1 -i; ++k) {
            if(a[k] > a[k+1]){
                int temp = a[k];
                a[k] = a[k+1];
                a[k+1] = temp;
            }
        }
    }

    print_array(a, SIZE);

    return 0;
}


/****************************************************/
/****************************************************/



#include <stdio.h>
#include "utility.h"


#define     SIZE        10


int main()
{
    int a[SIZE];

    randomize();
    set_array_random(a, SIZE);
    print_array(a, SIZE);

    for (int i = 0; i < SIZE - 1; ++i) {
        for (int k = 0; k < SIZE - 1 -i; ++k) {
            if(a[k] < a[k+1]){
                int temp = a[k];
                a[k] = a[k+1];
                a[k+1] = temp;
            }
        }
    }

    print_array(a, SIZE);

    return 0;
}


/****************************************************/
/****************************************************/
#include <stdio.h>
#include "utility.h"


#define     SIZE        10

//mulakat soru

//if(exp) oylebir ifade yazalım ki
//tekler basa sıralı
//ciftler sona sıralı olacak sekilde yazdıralım


int main()
{
    int a[SIZE];

    randomize();
    set_array_random(a, SIZE);
    print_array(a, SIZE);

    for (int i = 0; i < SIZE - 1; ++i) {
        for (int k = 0; k < SIZE - 1 -i; ++k) {
            if((a[k] % 2 ==0  && a[k+1] % 2 != 0) || (a[k] % 2 == a[k+1] % 2 && a[k] > a[k+1])){
                int temp = a[k];
                a[k] = a[k+1];
                a[k+1] = temp;
            }
        }
    }

    print_array(a, SIZE);

    return 0;
}


/****************************************************/
/****************************************************/

#include <stdio.h>
#include "utility.h"


#define     SIZE        10



int main()
{
    int a[SIZE];

    randomize();
    set_array_random(a, SIZE);
    print_array(a, SIZE);

    for (int i = 0; i < SIZE - 1; ++i) {
        for (int k = 0; k < SIZE - 1 -i; ++k) {
            if(a[k] > a[k+1]){
                int temp = a[k];
                a[k] = a[k+1];
                a[k+1] = temp;
            }
        }
        print_array(a, SIZE);
        getchar();
    }


    return 0;
}


/****************************************************/
/****************************************************/


merge algoritması

sıralı birleştirme işlemi demektir

iki diziyi sıralı şekilde birleştirme işlemidir
dizilerin boyutları aynı olmak zorunda değildir

linear O(n) karmasıklıgındadır



#include <stdio.h>
#include "utility.h"


#define     SIZE        10

int icmp(const void *vp1, const void* vp2)
{
    return *(const int *)vp1 - *(const int*)vp2;
}


int main()
{
    int a[SIZE];
    int b[SIZE];
    int c[SIZE * 2];

    randomize();
    set_array_random(a, SIZE);
    set_array_random(b, SIZE);

    qsort(a, SIZE, sizeof (int), &icmp);
    qsort(b, SIZE, sizeof (int), &icmp);

    print_array(a, SIZE);
    print_array(b, SIZE);


    int idx_a = 0;
    int idx_b = 0;

    for (int i = 0; i < 2*SIZE; ++i) {
        if(idx_a == SIZE){
            c[i] = b[idx_b++];
        }
        else if(idx_b == SIZE){
            c[i] = a[idx_a++];
        }
        else if (a[idx_a] < b[idx_b]) {
            c[i] = a[idx_a++];
        }
        else{
            c[i] = b[idx_b++];
        }
    }

    print_array(c, SIZE*2);



    return 0;
}


/****************************************************/
/****************************************************/


HomeWork

//maximum subsequence problem

-2 -5 7 -3 6 4 -1 7 8

1. soru
en az bir tane negatif degere sahip olmak zorunda
bu dizinin butun subsequence dahil oldugunda
en buyuk toplam degeri ne olabilir
bunu bulmanız isitiyoruz

2.soru
bunu bulan algoritmayı buldugunuz karmasıklıgı ne olabilir
O(n) dir



#include <stdio.h>
#include "utility.h"


#define     SIZE        100




int main()
{
    int a[] = {241, 884, -972, -777, 969, 158, 572, 399, 563, 325,
                   -492, -153, -257, 156, 197, -184, -476, 404, 21, -20,
                   -883, -952, -589, 94, 651, -490, 882, -293, 153, 387,
                   389, -601, -666, 263, -827, -915, 19, -814, 717, 643,
                   -257, -813, 369, -568, -947, 891, -807, 20, 491, 964,
                   717, -157, -241, 673, 332, 493, -88, -838, -32, 442,
                   911, -483, 964, -807, 753, -251, -828, 906, 997, -464,
                   -313, 92, 271, 582, -993, -540, -205, 987, -412, 188,
                   370, 485, 496, 482, -927, -436, -582, -513, -517, 907,
                   874, 877, 876, 76, 367, 851, 848, 33, -865, 670};

    printf("%zu\n", asize(a));

    return 0;
}


/****************************************************/
/****************************************************/





#include <stdio.h>
#include "utility.h"

#define     SIZE        20

//HW cevap 1. soru

int main()
{
    //unique

    int a[SIZE];

    randomize();
    for (int i = 0; i < SIZE; ++i) {
        a[i] = rand() % 20;
    }

    print_array(a, SIZE);

    int k;
    for (int i = 0; i < SIZE; ++i) {
        for (k = 0;  k < SIZE; ++k) {
            if(i != k && a[i] == a[k])
                break;
        }

        if(k == SIZE){
            printf("%3d ", a[i]);
        }
    }

    printf("\n");


    return 0;
}


/****************************************************/
/****************************************************/

#include <stdio.h>
#include "utility.h"

#define     SIZE        20

//HW cevap 2. cevap

int main()
{
    //unique

    int a[SIZE];

    randomize();
    for (int i = 0; i < SIZE; ++i) {
        a[i] = rand() % 20;
    }

    print_array(a, SIZE);


    int flags[SIZE] = {0};

    for (int i = 0; i < SIZE; ++i) {
        ++flags[a[i]];
    }

    /*
    for (int i = 0; i < SIZE; ++i) {
        printf("%d %d\n", i, flags[i]);
    }
    */

    for(int i = 0; i < SIZE; ++i){
        if(flags[i] == 1){
            printf("%d ", i);
        }
    }

    printf("\n");

    return 0;
}


/****************************************************/
/****************************************************/


2 çizüm karmasıklıgı O(n2) den O(n) düşürdük
fakat bellekten kaybettik

/****************************************************/
/****************************************************/

#include <stdio.h>
#include "utility.h"
#include <stdlib.h>

#define     SIZE        100

//HomeWork
//Hollanda bayrağı algoritması


int main()
{
    int a[SIZE];

    randomize();

    for (int i = 0; i < SIZE; ++i) {
        a[i] = rand() % 3;
    }

    print_array(a, SIZE);

    //yukaradıka diziyi sıralayınız
    //dizininin sıralar iken ilave dizi kullanılmyacak
    //O(n) karmasıklıgında bir algoritma oalcak

    return 0;
}


/****************************************************/
/****************************************************/



#include <stdio.h>
#include "utility.h"
#include <time.h>

#define     SIZE        1000000

//buble sort
//1000  ---> 0.001
//10000 ---> 0.123
//100000  --> 12.738000

int main()
{
    unsigned char a[SIZE];

    randomize();

    for (int i = 0; i < SIZE; ++i) {
        a[i] = rand() % 256;
    }

    printf("siralama basladi\n");
    clock_t start = clock();
    for (int i = 0; i < SIZE -1; ++i) {
        for (int k = 0; k < SIZE - 1 -i; ++k) {
            if(a[k] > a[k+1]){
                unsigned char temp = a[k];
                a[k] = a[k+1];
                a[k+1] = temp;
            }
        }
    }
    clock_t end = clock();

    printf("siralama bitti %f saniyede\n", (double)(end-start) / CLOCKS_PER_SEC);
    getchar();

    for (int i = 0; i < SIZE; ++i) {
        printf("%u", a[i]);
    }

    return 0;
}


/****************************************************/
/****************************************************/


#include <stdio.h>
#include "utility.h"
#include <time.h>
#include <stdlib.h>

#define     SIZE        100000

//buble sort
//O(n2)
//1000  ---> 0.001
//10000 ---> 0.123
//100000  --> 12.738000

int main()
{
    //unsigned char a[SIZE];
    unsigned char *a = (unsigned char *)malloc(SIZE);
    if(!a){
        printf("bellek yetersiz\n");
        return 1;
    }

    randomize();

    for (int i = 0; i < SIZE; ++i) {
        a[i] = rand() % 256;
    }

    printf("siralama basladi\n");
    clock_t start = clock();
    for (int i = 0; i < SIZE -1; ++i) {
        for (int k = 0; k < SIZE - 1 -i; ++k) {
            if(a[k] > a[k+1]){
                unsigned char temp = a[k];
                a[k] = a[k+1];
                a[k+1] = temp;
            }
        }
    }
    clock_t end = clock();

    printf("siralama bitti %f saniyede\n", (double)(end-start) / CLOCKS_PER_SEC);
    getchar();

    for (int i = 0; i < SIZE; ++i) {
        printf("%u", a[i]);
    }

    free(a);

    return 0;
}


/****************************************************/
/****************************************************/


#include <stdio.h>
#include "utility.h"
#include <time.h>
#include <stdlib.h>

#define     SIZE        100000000

//buble sort
//O(n2)
//1000  ---> 0.001
//10000 ---> 0.123
//100000  --> 12.738000

//qsort
//1000 ---> 0.000000
//10000 ---> 0.001000
//100000 ---> 0.006000

//buble sort O(n2) karmasıklıta yapılıyor
//qsort  O(n) karasıklıkta

int mycmp(const void *vp1, const void* vp2)
{
    if(*(unsigned char *) vp1 > *(unsigned char *)vp2)
        return 1;

    if(*(unsigned char *) vp1 < *(unsigned char *)vp2)
        return -1;

    return 0;
}

int main()
{
    //unsigned char a[SIZE];
    unsigned char *a = (unsigned char *)malloc(SIZE);
    if(!a){
        printf("bellek yetersiz\n");
        return 1;
    }

    randomize();

    for (int i = 0; i < SIZE; ++i) {
        a[i] = rand() % 256;
    }

    printf("siralama basladi\n");
    clock_t start = clock();
    qsort(a, SIZE, 1, mycmp);
    clock_t end = clock();

    printf("siralama bitti %f saniyede\n", (double)(end-start) / CLOCKS_PER_SEC);
    getchar();

    for (int i = 0; i < SIZE; ++i) {
        printf("%u", a[i]);
    }

    free(a);

    return 0;
}


/****************************************************/
/****************************************************/


#include <stdio.h>
#include "utility.h"
#include <time.h>
#include <stdlib.h>

#define     SIZE        100000000

//soru
//alttaki kodda problem varmı

//yok gayette calısır
//a[i] ile i[a] anı seyi ifade eder
//konu tamamiyle pointerlarla alakalı
//pointerlarda anlatılacak


int main()
{
    int a[10] = {0, 1, 2, 3, 4, 5, 6, 7, 8, 9};

    for (int i = 0; i < 10; ++i) {
        printf("%d ", i[a]);
    }

    printf("\n");

    return 0;
}


/****************************************************/
/****************************************************/

char türden diziler ve yazı işlemleri


char str[100];


BABA dizisi olsun

 B 65
 A 64
 B 65
 A 64

aslında ascıı kodnumarası mevcut

NTBS
null terminated byte string

yazının son karaterinden sonra '\0' null karateri olur


BABA

BABA'\0'

null karaterin ascii karşılık --> 0

0000 0000 bitlerinden olsuur aslında


#include <stdio.h>


int main()
{

    printf("%d\n", '0');
    printf("%d\n", '\0');


    return 0;
}


/****************************************************/
/****************************************************/


0 ile '\0' yazmak arasında fark yok
ama char türünden dizilerin kullanımında '\0' null karaterinin kullanmalıyız



#include <stdio.h>


int main()
{

    char str[100];

    str[0] = 'B';
    str[1] = 'A';
    str[2] = 'B';
    str[3] = 'A';
    str[4] = '\0'; //yazının sonunu belirtmiştir

    for (int i = 0; str[i] != '\0'; ++i) {
        putchar(str[i]);
    }

    putchar('\n');

    return 0;
}


/****************************************************/
/****************************************************/

#include <stdio.h>


int main()
{

    char str[100];

    str[0] = 'B';
    str[1] = 'A';
    str[2] = 'B';
    str[3] = 'A';
    //str[4] = '\0'; //yazının sonunu belirtmiştir

    //run  time hatası
    //null karater olmasaydı

    for (int i = 0; str[i] != '\0'; ++i) {
        putchar(str[i]);
    }

    putchar('\n');

    return 0;
}


/****************************************************/
/****************************************************/


#include <stdio.h>


int main()
{

    char str[100];

    str[0] = 'B';
    str[1] = 'A';
    str[2] = 'B';
    str[3] = 'A';
    str[4] = '\0'; //yazının sonunu belirtmiştir

    //dogur bir ifade
    //cunku str[4] yani null karateri 0 a denk geliyor buda false temsil eder
    for (int i = 0; str[i]; ++i) {
        putchar(str[i]);
    }

    putchar('\n');

    return 0;
}


/****************************************************/
/****************************************************/


#include <stdio.h>

char str[100];

int main()
{

    str[0] = 'B';
    str[1] = 'A';
    str[2] = 'B';
    str[3] = 'A';
    //str[4] = '\0'; //yazının sonunu belirtmiştir

    //burada hata yok
    //global değişkenlerin elemanları hata sıfır degeri ile gelir
    //sıfır degeride null karatere denk geldigi için problem yoktur
    for (int i = 0; str[i] != '\0'; ++i) {
        putchar(str[i]);
    }

    putchar('\n');

    return 0;
}


/****************************************************/
/****************************************************/





#include <stdio.h>


int main()
{
    static char str[100];

    str[0] = 'B';
    str[1] = 'A';
    str[2] = 'B';
    str[3] = 'A';
    //str[4] = '\0'; //yazının sonunu belirtmiştir

    //{'B', 'A', 'B', 'A', '\0', '\0', '\0', '\0' ....... '\0'}

    //burada hata yok
    //static değişkenlerin elemanları hata sıfır degeri ile gelir
    //sıfır degeride null karatere denk geldigi için problem yoktur
    for (int i = 0; str[i] != '\0'; ++i) {
        putchar(str[i]);
    }

    putchar('\n');

    return 0;
}


/****************************************************/
/****************************************************/


#include <stdio.h>


int main()
{
    char str[100];

    str[0] = 'B';
    str[1] = 'A';
    str[2] = 'B';
    str[3] = 'A';
    str[4] = '\0';

    printf("%s\n", str);

    return 0;
}


/****************************************************/
/****************************************************/


#include <stdio.h>


int main()
{
    char str[100];

    str[0] = 'B';
    str[1] = 'A';
    str[2] = 'B';
    str[3] = 'A';
    str[4] = '\0';

    //printf("%s\n", str);

    //puts fonksiyonu '\n' karaterinin dahil eder kendisi
    //char türünden dizileri %s formatında kolaycana yazdırabiliriz
    puts(str);
    printf("Hiiii");

    return 0;
}


/****************************************************/
/****************************************************/

#include <stdio.h>


int main()
{
    char name[100];
    char surname[100];

    printf("%s %s", name, surname);


    return 0;
}


/****************************************************/
/****************************************************/


yazıl tutan dizilere ilk deger verebilimiyiz


#include <stdio.h>


int main()
{

    // 0 -> '\0'

    char str[100] = {'Y', 'A', 'V', 'U', 'Z'};
    //bu dizinin sonu null karakteri ile doludur

    puts(str);


    return 0;
}


/****************************************************/
/****************************************************/



#include <stdio.h>


int main()
{

    // 0 -> '\0'

    //dizinini sonunda '\0' yoktur
    char str[5] = {'Y', 'A', 'V', 'U', 'Z'};

    //dikkat yazdırdıgına aldanmayın
    puts(str);


    return 0;
}


/****************************************************/
/****************************************************/
#include <stdio.h>


int main()
{

    // 0 -> '\0'

    //dizinini sonunda '\0' yok
    char str[] = {'Y', 'A', 'V', 'U', 'Z'};

    //dikkat yazdırdıgına aldanmayın
    puts(str);


    return 0;
}


/****************************************************/
/****************************************************/

#include <stdio.h>


int main()
{

    //bunun sonunda null karakteri var
    char str[20] = "orhan ozturk";

    printf("%s\n", str);


    return 0;
}


/****************************************************/
/****************************************************/


#include <stdio.h>


int main()
{

    //bunun sonunda null karakteri var
    //dizinin boyutu 6 oluyor
    char str[] = "orhan";

    printf("dizi boyutu  = %zu\n", sizeof (str) / sizeof (str[0]));

    puts(str);
    printf("%s\n", str);

    for (int i = 0; str[i] != '\0'; ++i) {
        printf("%c", str[i]);
    }

    return 0;
}


/****************************************************/
/****************************************************/

#include <stdio.h>


int main()
{

    //hangi durumlarda null karateri olmaz

    char s1[4] = {'A', 'K', 'I', 'N'};
    char s2[] = {'A', 'K', 'I', 'N'};
    //char s3[] = {'A', 'K', 'I', 'N', '\0'};

    char s4[10];
    s4[0] = '0';
    s4[1] = 'K';

    //conunda null karekteri yok
    //C de gecerli durum tanımsız davranıs
    //C++ sentaks hatası
    char s5[4] = "mert";

    return 0;
}


/****************************************************/
/****************************************************/



#include <stdio.h>

#define     SIZE    100

int main()
{

    char str[SIZE];

    //bos yazı denir
    //uzunlugu sıfırdır
    //null string denir
    str[0] = '\0';

    //bu yazının en fazla uzunlugu 99 olabilir
    // en az 0 olabilir

    return 0;
}


/****************************************************/
/****************************************************/

#include <stdio.h>

#define     SIZE    100

int main()
{

    char str[SIZE];

    printf("bir isim girin : ");
    scanf("%s", str);

    printf("isim (%s)\n", str);

    //orhan
    //orhan ozturk
    //girişleri yaotık

    return 0;
}


/****************************************************/
/****************************************************/


#include <stdio.h>

#define     SIZE    100

int main()
{

    char name[SIZE];
    char surname[SIZE];
    int birth_year;

    printf("bir isim soyisim tarih girin : ");
    scanf("%s%s%d", name, surname, &birth_year);

    printf("%d dogumlu %s soyisimli %s isimli kisi\n", birth_year, surname, name);

    //orhan
    //orhan ozturk
    //girişleri yaotık

    return 0;
}


/****************************************************/
/****************************************************/


#include <stdio.h>

#define     SIZE    100

int main()
{
    char a[10] = {0};

    //a
    //&a
    //bu adresler farklıdır pointerda detaylı girecez konuya


    char str[SIZE];
    scanf("%s", str);
    scanf("%s", &str[0]);
    //aynı anlama gelir

    //bu farklı anlama gelir boyle değil dikkat pointerlarda değincez
    scanf("%s", &str);



    return 0;
}


/****************************************************/
/****************************************************/


#include <stdio.h>

#define     SIZE    100

int main()
{
    char str[10];

    printf("bir isim girin : ");
    scanf("%s", str);

    //eger dizi boyutundan fazla ver i girisi olur ise
    //scanf burada alma işlemlerin problemler olusturabilir

    printf("%s\n", str);


    return 0;
}


/****************************************************/
/****************************************************/

#include <stdio.h>

#define     SIZE    100

int main()
{
    char str[SIZE];

    printf("bir isim girin : ");
    scanf("%s", str);

    //eger dizi boyutundan fazla ver i girisi olur ise
    //scanf burada alma işlemlerin problemler olusturabilir

    printf("%s\n", str);


    return 0;
}


/****************************************************/
/****************************************************/

#include <stdio.h>
#include "utility.h"

#define     SIZE    100

int main()
{
    char str[SIZE];

    printf("bir isim girin : ");
    sgets(str);

    printf("%s\n", str);


    return 0;
}


/****************************************************/
/****************************************************/


#include <stdio.h>
#include "utility.h"

#define     SIZE    100

int main()
{
    char str[SIZE];

    printf("bir isim girin : ");
    sgets(str);
    printf("%s\n", str);

    int len = 0;

    for (int i = 0; str[i] != '\0'; ++i) {
        ++len;
    }

    printf("uzunluk = %d\n", len);

    return 0;
}


/****************************************************/
/****************************************************/

#include <stdio.h>
#include "utility.h"

#define     SIZE    100

int main()
{
    char str[SIZE];

    printf("bir isim girin : ");
    sgets(str);
    printf("%s\n", str);

    int i;
    for (i = 0; str[i] != '\0'; ++i)
        ;

    printf("uzunluk = %d\n", i);

    return 0;
}


/****************************************************/
/****************************************************/


#include <stdio.h>
#include "utility.h"

#define     SIZE    100

int main()
{
    char str[SIZE];

    printf("bir isim girin : ");
    sgets(str);
    printf("%s\n", str);

    int i;
    for(i = 0; str[i] != '\0'; ++i)
        ;

    for (--i; i >= 0; --i) {
        putchar(str[i]);
    }

    putchar('\n');

    return 0;
}


/****************************************************/
/****************************************************/

#include <stdio.h>
#include "utility.h"

#define     SIZE    100

//count algoritması denir
//yazının belirli karakterlerinden kac tane oldugunu bulma işlemi
//O(n)

int main()
{
    char str[SIZE];

    printf("bir isim girin : ");
    sgets(str);
    printf("%s\n", str);

    int c;
    printf("Bir karakter girin : ");
    c  = getchar();

    int count = 0;

    for (int i = 0; str[i] != '\0'; ++i) {
        if(str[i] == c)
            ++count;
    }

    printf("%d tane sayildi\n", count);


    return 0;
}


/****************************************************/
/****************************************************/



#include <stdio.h>
#include "utility.h"
#include <ctype.h>

#define     SIZE    100

//count algoritması denir
//yazının belirli karakterlerinden kac tane oldugunu bulma işlemi
//O(n)

int main()
{
    char str[SIZE];

    printf("bir isim girin : ");
    sgets(str);
    printf("%s\n", str);

    int c;
    printf("Bir karakter girin : ");
    c  = getchar();

    int count = 0;

    for (int i = 0; str[i] != '\0'; ++i) {
        if(toupper(str[i]) == toupper(c))
            ++count;
    }

    printf("%d tane sayildi\n", count);


    return 0;
}


/****************************************************/
/****************************************************/


#include <stdio.h>
#include "utility.h"
#include <ctype.h>

#define     SIZE    100


int main()
{
    char str[SIZE];

    printf("bir isim girin : ");
    sgets(str);
    printf("%s\n", str);

    for(int c = 'a'; c <= 'z'; ++c) {
        int count = 0;
        for (int i = 0; str[i] != '\0'; ++i) {
            if(toupper(str[i]) == toupper(c))
                ++count;
        }
        if(count)
            printf("%c adet --> %d\n", c, count);
    }


    return 0;
}


/****************************************************/
/****************************************************/


#include <stdio.h>
#include "utility.h"
#include <ctype.h>

#define     SIZE    100


int main()
{
    char str[SIZE];

    printf("bir isim girin : ");
    sgets(str);
    printf("%s\n", str);

    int counts[26] = {0};

    for (int i = 0;  str[i] != '\0'; ++i) {
        if(isalpha(str[i])){
            ++counts[toupper(str[i]) - 'A'];
        }
    }

    for (int i = 0; i < 26; ++i) {
        if(counts[i]){
            printf("%c  %d\n", 'A' + i, counts[i]);
        }
    }


    return 0;
}


/****************************************************/
/****************************************************/



#include <stdio.h>
#include "utility.h"
#include <ctype.h>

#define     SIZE    100

//mulukat sorusu

//O(n) karmasıklıkta yapınız

int main()
{
    char str[SIZE];

    printf("bir isim girin : ");
    sgets(str);
    printf("%s\n", str);


    //yazınıın sonuna X karakteri ekleyin

    int i;
    for (i = 0; str[i] != '\0'; ++i)
        ;

    str[i] = 'X';
    str[i+1] = '\0';

    printf("(%s)\n", str);

    return 0;
}


/****************************************************/
/****************************************************/



#include <stdio.h>
#include "utility.h"
#include <ctype.h>

#define     SIZE    100

//mulukat sorusu

//O(n) karmasıklıkta yapınız

int main()
{
    char s1[SIZE];
    char s2[SIZE];

    printf("iki sim girin : ");
    scanf("%s%s", s1, s2);

    printf("%s %s\n", s1, s2);

    //s1 dizisini s2nin sonu eklemek

    int i;

    for (i = 0; s1[i] != '\0'; ++i)
        ; //null statement

    int k;
    for (k = 0; s2[k] != '\0'; ++k) {
        s1[i+k] = s2[k];
    }

    s1[i+k] = '\0';

    printf("|%s|\n", s1);



    return 0;
}


/****************************************************/
/****************************************************/


#include <stdio.h>
#include "utility.h"
#include <ctype.h>

#define     SIZE    100

//mulukat sorusu

//O(n) karmasıklıkta yapınız

int main()
{
    char str[SIZE];

    printf("bir isim girin : ");
    sgets(str);
    printf("%s\n", str);

    int len;

    for (len = 0; str[len] != '\0'; ++len)
        ; //null statement

    for (int i = 0; i < len / 2; ++i) {
        char temp = str[i];
        str[i] = str[len -1 -i];
        str[len -1 -i] = temp;
    }

    printf("|%s|\n", str);

    return 0;
}


/****************************************************/
/****************************************************/

Polidrom

Para hazır ama Rıza harap!
At sahibi gibi hasta
Madam, I'm Adam.


HomeWork

yazının polidrom olup olmadıgını kontrol edecek program

2 cozum var
1.kolay olan ilave bir dizi
2.zorise ilave bir dizi olmadan cozebilmek


/****************************************************/
/****************************************************/


HomeWork

#include <stdio.h>
#include "utility.h"
#include <ctype.h>

#define     SIZE    100


int main()
{
    char str[SIZE];

    printf("bir isim girin : ");
    sgets(str);
    printf("%s\n", str);

    //orhan ozturk  giriş
    //ozturk orhan  istenilen
    //mustafa keser giriş
    //keser mustafa istenilen

    /*Kod*/



    printf("|%s|\n", str);

    return 0;
}


/****************************************************/
/****************************************************/


remove algoritması
remove copy algoritması


remove copy


#include <stdio.h>
#include "utility.h"
#include <ctype.h>

#define     SIZE    100


int main()
{
    char source[SIZE];

    printf("bir yazi girin : ");
    sgets(source);
    printf("%s\n", source);

    int ch;
    char dest[SIZE];

    printf("silinecek karateri girin :");
    ch = getchar();

    int write_idx = 0;

    for (int i = 0; source[i] != '\0'; ++i) {
        if (source[i] != ch) {
            dest[write_idx++] = source[i];
        }
    }

    dest[write_idx] = '\0';

    printf("|%s|\n", dest);

    return 0;
}


/****************************************************/
/****************************************************/


#include <stdio.h>
#include "utility.h"
#include <ctype.h>

#define     SIZE    100


int main()
{
    char source[SIZE];

    printf("bir yazi girin : ");
    sgets(source);
    printf("%s\n", source);

    int ch;
    char dest[SIZE];

    int write_idx = 0;

    for (int i = 0; source[i] != '\0'; ++i) {
        if (!isdigit(source[i])) {
            dest[write_idx++] = source[i];
        }
    }

    dest[write_idx] = '\0';

    printf("|%s|\n", dest);

    return 0;
}


/****************************************************/
/****************************************************/

#include <stdio.h>
#include "utility.h"
#include <ctype.h>

#define     SIZE    100

//iki yazının eşitliğini sınamak

int main()
{
    char s1[SIZE];
    char s2[SIZE];

    printf("bir yazi girin : ");
    scanf("%s%s", s1, s2);
    printf("(%s) (%s)\n", s1, s2);

    int i = 0;
    int flag = 0;

    while (s1[i] == s2[i]) {
        if(s1[i] == '\0'){
            flag = 1;
            break;
        }
        ++i;
    }

    if(flag)
        printf("yazilar esit\n");
    else
        printf("yazilar esit degil\n");


    return 0;
}


/****************************************************/
/****************************************************/

#include <stdio.h>
#include "utility.h"
#include <ctype.h>

#define     SIZE        100

//yazının keilme sayısı
//ankara eskisehir zonguldak  --> 3 keilme

#define     IN_WORD     1
#define     OUT_WORD    0

int main()
{
    char str[SIZE];

    printf("bir yazi girin : ");
    sgets(str);
    printf("%s\n", str);

    int word_flag = OUT_WORD;
    int word_count = 0;

    for (int i = 0; str[i] != '\0'; ++i) {
        if(isspace(str[i])){
            word_flag = OUT_WORD;
        }
        else if(word_flag == OUT_WORD){
            ++word_count;
            word_flag = IN_WORD;
        }
    }

    printf("kelime sayisi %d dir \n", word_count);


    return 0;
}


/****************************************************/
/****************************************************/






#include <stdio.h>
#include "utility.h"
#include <ctype.h>

#define     SIZE        100

//yazının keilme sayısı
//ankara eskisehir zonguldak  --> 3 keilme

#define     IN_WORD     1
#define     OUT_WORD    0

int is_spec(int c)
{
    return isspace(c) || !isalnum(c);
}

int main()
{
    char str[SIZE];

    printf("bir yazi girin : ");
    sgets(str);
    printf("%s\n", str);

    int word_flag = OUT_WORD;
    int word_count = 0;

    for (int i = 0; str[i] != '\0'; ++i) {
        if(is_spec(str[i])){
            word_flag = OUT_WORD;
        }
        else if(word_flag == OUT_WORD){
            ++word_count;
            word_flag = IN_WORD;
        }
    }

    printf("kelime sayisi %d dir \n", word_count);


    return 0;
}


/****************************************************/
/****************************************************/


yazi  -->sayı
sayı  --> yazi ya dönüştürme


#include <stdio.h>
#include "utility.h"
#include <ctype.h>

#define     SIZE        100

//yazının keilme sayısı
//ankara eskisehir zonguldak  --> 3 keilme

#define     IN_WORD     1
#define     OUT_WORD    0

int is_spec(int c)
{
    return isspace(c) || !isalnum(c);
}

int main()
{
    int ival = 0;
    printf("bir tam sayi girin : ");
    scanf("%d", &ival);

    char str[SIZE];
    int temp = ival;

    int idx = 0;

    while (temp) {
        str[idx++] = temp % 10 + '0';
        temp /= 10;
    }

    str[idx] = '\0';

    printf("|%s|\n", str);

    for (int i = 0; i < idx / 2; ++i) {
        char temp = str[i];
        str[i] = str[idx -1 -i];
        str[idx -1 -i] = temp;
    }

    printf("|%s|\n", str);

    return 0;
}


/****************************************************/
/****************************************************/


HomeWork

yukarıdaki örnek  negatif tam sayı oldugunda calısacak
hale getiriniz

negatif tam sayı girisi yapılıncada çalışmasını isityoruz


/*****************************************************/
/*****************************************************/


yazıyı sayiya cevirme



#include <stdio.h>
#include "utility.h"
#include <ctype.h>

#define     SIZE        100

int main()
{
    char str[SIZE];

    printf("bir tam sayi girin : ");
    sgets(str);
    printf("%s\n", str);

    int ival = 0;

    for (int i = 0; str[i] != '\0'; ++i) {
        ival = ival * 10 + str[i] - '0';
    }

    printf("ival = %d\n", ival);

    return 0;
}


/****************************************************/
/****************************************************/

HomeWork

yukarıdaki örnek  negatif tam sayı oldugunda casmayacak

negatif tam sayı girisi yapılıncada çalışmasını isityoruz


/*****************************************************/
/*****************************************************/

partisyon algoritması

bir veri yapsıını bir kosulu saglayanlar ve saglamayanlar olarak
bolunmlemek, saglayanlar basta olacak saglamayanlar sonda olacak

O(n) karmasıklıgınd aolmalı

mulakat sorusu


#include <stdio.h>
#include "utility.h"
#include <ctype.h>

#define     SIZE        20

int is_even(int x)
{
    return x % 2 == 0;
}

int main()
{
    int a[SIZE];

    randomize();
    set_array_random(a, SIZE);
    print_array(a, SIZE);

    int i;

    for (i = 0; i < SIZE && is_even(a[i]); ++i)
        ;

    int k;

    if(i == SIZE){
        printf("butun ogeler kosulu salıyor\n");
    }
    else{
        for (k = i+1; k < SIZE; ++k) {
            if (is_even(a[k])) {
                int temp = a[i];
                a[i] = a[k];
                a[k] = temp;
                ++i;
            }
        }
    }

    printf("partisyon noktasi indxsi = %d\n", i);
    print_array(a, SIZE);

    return 0;
}


/****************************************************/
/****************************************************/



#include <stdio.h>
#include "utility.h"
#include <ctype.h>

#define     SIZE        20

int is_even(int x)
{
    return x % 2 == 0;
}

int main()
{
    int a[SIZE];

    randomize();
    set_array_random(a, SIZE);
    print_array(a, SIZE);

    int i;

    for (i = 0; i < SIZE && isprime(a[i]); ++i)
        ;

    int k;

    if(i == SIZE){
        printf("butun ogeler kosulu salıyor\n");
    }
    else{
        for (k = i+1; k < SIZE; ++k) {
            if (isprime(a[k])) {
                int temp = a[i];
                a[i] = a[k];
                a[k] = temp;
                ++i;
            }
        }
    }

    printf("partisyon noktasi indxsi = %d\n", i);
    print_array(a, SIZE);

    return 0;
}


/****************************************************/
/****************************************************/

#include <stdio.h>
#include "utility.h"
#include <ctype.h>

#define     SIZE        20

int is_than(int x)
{
    return x < 500;
}

int main()
{
    int a[SIZE];

    randomize();
    set_array_random(a, SIZE);
    print_array(a, SIZE);

    int i;

    for (i = 0; i < SIZE && is_than(a[i]); ++i)
        ;

    int k;

    if(i == SIZE){
        printf("butun ogeler kosulu salıyor\n");
    }
    else{
        for (k = i+1; k < SIZE; ++k) {
            if (is_than(a[k])) {
                int temp = a[i];
                a[i] = a[k];
                a[k] = temp;
                ++i;
            }
        }
    }

    printf("partisyon noktasi indxsi = %d\n", i);
    print_array(a, SIZE);

    return 0;
}


/****************************************************/
/****************************************************/


HomeWork



#define _CRT_SECURE_NO_WARNINGS
#include <stdio.h>
#include "utility.h"
#include <ctype.h>

#define     SIZE        20

#define     SIZE        200

//HomeWork

// 2 yazı var
// 2.ci yazının 1 yazıda gectigi yeri isteniyor
// ilk gecetigi yerin index numnarası isteniyor


int main()
{
    char str[SIZE];

    printf("bir sayi giriniz : ");
    sgets(str);
    printf("|%s|\n", str);

    char s[SIZE];

    printf("aranacak yaziyi giriniz : ");
    scanf("%s", s);

    // ekran cıktısı su sekılde olacak
    // ya bulunamadı
    // yada bulundu indeks = 12

}



/*****************************************************/
/*****************************************************/


Pointer

Pointer demek adres demektir

Adresler 2 kategoriye ayrılır

1- nesne adresi -- object pointer
2- fonksiyon adresi -- function pointer



1- nesne adresi -- object pointer

nesnelerin bellekteki konumlarını adressler ile gösterme biçimi

x eger bir T türünden değişken ise
ve bir ifade böyle bir değişkenin adresi anlamına geliyorsa

o ifadeinni türü T* dır

int *
double *
...

#include <stdio.h>
#include "utility.h"

int main()
{
    int *ptr;
    //ptr, int türünden bir değişkennin adresinin tutacak bir değikendir
    //ptr'nin türü int * dir
    //ptr is a pointer to int

    return 0;
}


/****************************************************/
/****************************************************/

#include <stdio.h>
#include "utility.h"

int main()
{
    int *p1, p2;
    //p1 pointer
    //p2 onject nesne değişken

    int *ptr1, *ptr2;
    //bunlar pointer tanımları

    return 0;
}


/****************************************************/
/****************************************************/


#include <stdio.h>
#include "utility.h"

int main()
{
    //int x, y[5], z;
    int x, y[5], z, *ptr;

    return 0;
}


/****************************************************/
/****************************************************/

#include <stdio.h>
#include "utility.h"

int main()
{
    //bir pointer sistem kaç byte yerkaplar

    printf("size char    = %zu\n", sizeof (char));
    printf("size char*    = %zu\n", sizeof (char *));

    printf("size short    = %zu\n", sizeof (short));
    printf("size short*    = %zu\n", sizeof (short *));

    printf("size int    = %zu\n", sizeof (int));
    printf("size int*    = %zu\n", sizeof (int *));

    printf("size long    = %zu\n", sizeof (long));
    printf("size long*    = %zu\n", sizeof (long *));

    printf("size float    = %zu\n", sizeof (float));
    printf("size float*    = %zu\n", sizeof (float *));

    printf("size double    = %zu\n", sizeof (double));
    printf("size double*    = %zu\n", sizeof (double *));

    printf("size long double    = %zu\n", sizeof (long double));
    printf("size long double*    = %zu\n", sizeof (long double *));


    return 0;
}


/****************************************************/
/****************************************************/



#include <stdio.h>
#include "utility.h"

long double* p;

int main()
{

    printf("sizeof = %zu\n", sizeof (p));

    return 0;
}


/****************************************************/
/****************************************************/


#include <stdio.h>
#include "utility.h"

int* p;

void func(int *gp)
{
    int *px;
    static int * py;
}

int main()
{



    return 0;
}


/****************************************************/
/****************************************************/


#include <stdio.h>
#include "utility.h"


//hayata null pointer ile başlar
int* p;

//hayata 0 degeri ile
int a;

void func(int *gp)
{
    //hayata çöp değeri ile baslar
    int *px;

    //hayata null pointer ile baslar
    static int * py;

    //hayata garbage value ile baslar
    int b;

    //hayata 0 ile baslardı
    static int c;
}

int main()
{



    return 0;
}


/****************************************************/
/****************************************************/


pointer operatorlerin

işaretçi -- gösterici telefuzları kullanılıyor


&  --> adress of (adres opeatoru)
   bitwise ile karıstırmıyoruz a&b


* --> dereferencing / indirection -- içerik opeatörü
[ ]  --> index / subscript  --- köşeli parantez operatörü

->  --> member selection op // arrow (ok operatörü)


/******************************************/


&  --> adress of (adres opeatoru)

2. öncelik seviyesinde -- unary opeator sagdan sola right associative


adres operatorünün operandı L value olması zorunlulugu vardır

int x;

&x;



#include <stdio.h>
#include "utility.h"


int main()
{

    int x = 10;

    &x; // bu demek adresi demek x in
    &(x + 5); // (x + 5) R value odugu için adress operatoru ile işleme giremez

    return 0;
}


/****************************************************/
/****************************************************/


&x; --> adres operatorunu  uretecegi deger R value



#include <stdio.h>
#include "utility.h"


int main()
{

    int x = 10;

    //bu ifadenin türü
    &x; //int *

    char c;
    &c; // char *

    double d;
    &d; // double *

    return 0;
}


/****************************************************/
/****************************************************/


#include <stdio.h>
#include "utility.h"


int main()
{

    int x = 10;

    int *p = &x; //p ye ilk deger verdim

    int y;

    p = &y; // p ye atama yaptım

    return 0;
}


/****************************************************/
/****************************************************/
#include <stdio.h>
#include "utility.h"


int main()
{

    int x = 10, *p = &x, y = 56, *q = &y;

    return 0;
}


/****************************************************/
/****************************************************/


#include <stdio.h>
#include "utility.h"


int main()
{

    int x = 10;
    int *p = &x;

    //p nin degeri x in adresi
    //p ' x i gösteriyor
    //p, x e işaret ediyor
    //p points to x

    return 0;
}


/****************************************************/
/****************************************************/


#include <stdio.h>
#include "utility.h"


int main()
{

    int x = 10;
    int *p = &x;

    //adreler 16 sayı sisteminde temsil edilir

    printf("x   = %d\n", x);
    printf("&x  = %p\n", &x);
    printf("p   = %p\n", p);
    printf("&p  = %p\n", &p);

    return 0;
}


/****************************************************/
/****************************************************/


#include <stdio.h>
#include "utility.h"


int main()
{

    int x = 10;
    int *p = &x;

    //adreler 16 sayı sisteminde temsil edilir

    printf("x   = %d\n", x);
    printf("&x  = %p\n", &x);
    printf("p   = %p\n", p);
    printf("&p  = %p\n", &p);

    int y = 56;

    p = &y;

    printf("y   = %d\n", y);
    printf("&y  = %p\n", &y);
    printf("p   = %p\n", p);
    printf("&p  = %p\n", &p);


    return 0;
}


/****************************************************/
/****************************************************/


#include <stdio.h>
#include "utility.h"


int main()
{

    int x = 10;
    int *p1 = &x;
    int *p2 = &x;

    //adreler 16 sayı sisteminde temsil edilir

    printf("x   = %d\n", x);
    printf("&x  = %p\n", &x);
    printf("p1   = %p\n", p1);
    printf("&p1  = %p\n", &p1);
    printf("p2   = %p\n", p2);
    printf("&p2  = %p\n", &p2);

    return 0;
}


/****************************************************/
/****************************************************/



#include <stdio.h>
#include "utility.h"


int main()
{

    int x = 10;
    int *p1 = &x;
    int *p2 = p1;

    //adreler 16 sayı sisteminde temsil edilir

    printf("x       = %d\n", x);
    printf("&x      = %p\n", &x);
    printf("p1      = %p\n", p1);
    //printf("&p1   = %p\n", &p1);
    printf("p2      = %p\n", p2);
    //printf("&p2   = %p\n", &p2);

    return 0;
}


/****************************************************/
/****************************************************/


#include <stdio.h>
#include "utility.h"


int main()
{

    int x = 10, *p1 = &x, *p2 = p1;

    //adreler 16 sayı sisteminde temsil edilir

    printf("x       = %d\n", x);
    printf("&x      = %p\n", &x);
    printf("p1      = %p\n", p1);
    //printf("&p1   = %p\n", &p1);
    printf("p2      = %p\n", p2);
    //printf("&p2   = %p\n", &p2);

    return 0;
}


/****************************************************/
/****************************************************/
#include <stdio.h>
#include "utility.h"


int main()
{

    int x = 10
    int* p = &x;
    int *ptr;

    ptr = p;

    return 0;
}


/****************************************************/
/****************************************************/


#include <stdio.h>
#include "utility.h"


int main()
{

    int a[10] = { 0 };

    //array decay
    //array to pointer convertion denir
    &a[0];

    //ikiside aynı anlamda
    int *ptr1 = &a[0]; //array decay
    int *ptr2 = a;

    printf("&a[0]       = %p\n", &a[0]);
    printf("a           = %p\n", a);
    printf("ptr1        = %p\n", ptr1);
    printf("ptr2        = %p\n", ptr2);


    return 0;
}


/****************************************************/
/****************************************************/


#include <stdio.h>
#include "utility.h"


int main()
{

    int a[10] = { 0 };

    printf("sizeof(a)           = %zu\n", sizeof (a)); //bu dizinin hepsinin ne kadar kaplapdıgını söyler
    printf("sizeof(&a[0])       = %zu\n", sizeof (&a[0])); //bu tek bir nesneyi sorgular // char *

    return 0;
}


/****************************************************/
/****************************************************/

#include <stdio.h>
#include "utility.h"


int main()
{
    int a[10] = {0};
    int x = 10;

    int *p = &x;

    int *ptr = a;

    p = ptr;
}


/****************************************************/
/****************************************************/

#include <stdio.h>
#include "utility.h"


int main()
{
    int x = 100;
    int *p = x; //C de yanlış ama gecerli ve asla yapmayın
    //C++ ise direk sentaks hatası

    //boyle durumlara
    //invalid pointer denir

    //C de tam sayılar ile pointer arasında otomatik tür donusumu var iken
    //C++ da bu snetaks hatası
}


/****************************************************/
/****************************************************/




#include <stdio.h>
#include "utility.h"


int main()
{
    int x = 100;
    int* p = (int *)x; //kullanıcı eger yapmak istiyor ise
    //boyle yapmalı

}


/****************************************************/
/****************************************************/
#include <stdio.h>
#include "utility.h"


int main()
{
    double x = 1.2;
    int *p = &x; //C de gecerli ama yanlıs
    //C++ da ise direk sentask hatası

}


/****************************************************/
/****************************************************/


#include <stdio.h>
#include "utility.h"


int main()
{
    int x = 10;

    &x = 2500;
    //sentaks hatası adres değiştirlemez
    //adres operatorunun ürettiği deger Rvalue dur
    //bu sebepten atam yapamayız

}


/****************************************************/
/****************************************************/


& opeatoru ile olsuturlan ifadeler
 Rvalue expression deger kategorisindedir


asla atma operatorunun sol operandı olamazlar



#include <stdio.h>
#include "utility.h"


int main()
{
    int x = 10;
    int y = 30;
    int z = 40;

    int *p = &x;

    p = &y;

    p = &z;

    &z; //Rvalue olacak
}


/****************************************************/
/****************************************************/





dereferencing / indirection -- içerik operatoru

*

2. öncelik seviyesinde

----------------------------------
& * ++ -- + - ! sizeof      sagdan sola
---------------------------------

(*) içerik operatürünün openradı olan  ifade bir adres türünden olmalı


#include <stdio.h>
#include "utility.h"


int main()
{
    int x = 10;
    int* ptr; //içerik operatorunu tanımlama sentaksı ile karıstırmayın

    //*46; //sentask hatası
    //*x; // sentaks hatası

    *&x;
    x;


    int *ptr = &x;

    *ptr; //x nesnesi

    int a[] = {1, 2, 3};
    *a;


}


/****************************************************/
/****************************************************/


a- bir sol taraf degeridir
b- openradı adress olmalıdır


(*adres) demek --> nesne demektir



#include <stdio.h>
#include "utility.h"


int main()
{
    int x = 10;

    *&x = 55; //
    //x = 55;

    printf("x = %d\n", x);
}


/****************************************************/
/****************************************************/


#include <stdio.h>
#include "utility.h"


int main()
{
    int x = 10;

    printf("x = %d\n", x);
    ++*&x;
    printf("x = %d\n", x);
}


/****************************************************/
/****************************************************/


#include <stdio.h>
#include "utility.h"


int main()
{
    int x = 10;

    printf("x = %d\n", x);

    //böyle kodlar yazmayın
    //ben sadece işelvi gosteriyorum
    ++*&*&*&*&*&*&*&*&*&*&x;
    //++x; bun karsılık gelir

    printf("x = %d\n", x);
}


/****************************************************/
/****************************************************/


#include <stdio.h>
#include "utility.h"


int main()
{
    int a[] = {10, 20, 30, 40};

    *a = 999;

    printf("a[0] = %d\n", a[0]);
}


/****************************************************/
/****************************************************/


#include <stdio.h>
#include "utility.h"


int main()
{
    int x = 10;
    int *p = &x;

    printf("x = %d\n", x);

    *p = 888;

    printf("x = %d\n", x);
}


/****************************************************/
/****************************************************/


#include <stdio.h>
#include "utility.h"


int main()
{
    int x = 10;
    int *p1 = &x, *p2 = p1, *p3 = p2;

    ++* p1;
    ++* p2;
    ++* p3;

    printf("x = %d\n", x);
}


/****************************************************/
/****************************************************/

#include <stdio.h>
#include "utility.h"


int main()
{
    int a = 10;
    int b = 20;
    int c = 30;

    int *p;

    p = &a;
    ++*p;
    //++a

    p = &b;
    ++*p;
    //++b

    p = &c;
    ++*p;
    //++c

    printf("a = %d\n", a);
    printf("b = %d\n", b);
    printf("c = %d\n", c);
}


/****************************************************/
/****************************************************/


#include <stdio.h>
#include "utility.h"


int main()
{
    int a = 10;
    int b = 20;

    int* p1 = &a, * p2 = &b;

    //hiç bir fark yok
    *p1 = *p2;
    //a = b;


}


/****************************************************/
/****************************************************/



#include <stdio.h>
#include "utility.h"


int main()
{
    int x = 10;
    int y = 20;
    int z = 50;

    //bu ifade Lvalue expression mı dır
    x > 5 ? y: z;

    //C de R value
    //C++ Lvalue

    //x > 5 ? y: z = 5; // C de sentaks hatası
    //C++ gecerliydi

    *(x > 5 ? &y: &z) = 5;
    //artık bu hile kosul operatorunun
    //urettigi deger atama yapailirm


}


/****************************************************/
/****************************************************/

call by value suana kadar fonksiyonlar bunu yapıyorduk


call by reference şimdi fonksiyonlar bunu yapmaaya baslıyacaz


#include <stdio.h>
#include "utility.h"

void foo(int a)
{
    a = 99;
}

int main()
{
  int x = 45;

  //call by value
  foo(x);

  printf("x = %d\n", x);
}



/****************************************************/
/****************************************************/

#include <stdio.h>
#include "utility.h"

void foo(int *a)
{
    *a = 99;
}

int main()
{
  int x = 45;

  //call by reference
  foo(&x);

  printf("x = %d\n", x);
}



/****************************************************/
/****************************************************/

#include <stdio.h>
#include "utility.h"

void foo(int a)
{

    printf("&a  = %p\n", &a);

}

int main()
{
  int x = 45;

  printf("&x = %p\n", &x);
  foo(x);
}



/****************************************************/
/****************************************************/

#include <stdio.h>
#include "utility.h"

void foo(int *a)
{
    printf("a  = %p\n", a);
    *a = 222;
}

int main()
{
  int x = 45;

  printf("&x = %p\n", &x);

  foo(&x);

  printf("x = %d\n", x);
}



/****************************************************/
/****************************************************/


#include <stdio.h>
#include "utility.h"

void foo(int *a)
{
    printf("a  = %p\n", a);
    *a = 222;
}

int main()
{
  int x = 45;

  printf("&x = %p\n", &x);

  foo(&x);

  printf("x = %d\n", x);
}


/****************************************************/
/****************************************************/


#include <stdio.h>
#include "utility.h"


int main()
{
   int x = 222, y = 444;

   int temp = x;
   x = y;
   y = temp;

   printf("x = %d   y = %d\n", x, y);

}


/****************************************************/
/****************************************************/


#include <stdio.h>
#include "utility.h"

void swap(int a, int b)
{
    int temp = a;
    a = b;
    b = temp;
}


int main()
{
   int x = 222, y = 444;
   //call by value
   swap(x, y);

   printf("x = %d   y = %d\n", x, y);

}


/****************************************************/
/****************************************************/



#include <stdio.h>
#include "utility.h"

void swap(int* a, int* b)
{
    int temp = *a;
    *a = *b;
    *b = temp;
}


int main()
{
   int x = 222, y = 444;

   //call by refeence
   swap(&x, &y);

   printf("x = %d   y = %d\n", x, y);

}


/****************************************************/
/****************************************************/

#include <stdio.h>
#include "utility.h"

int main()
{
   int x = 222, y = 444;

   //call by refeence
   swap(&x, &y);

   printf("x = %d   y = %d\n", x, y);

}


/****************************************************/
/****************************************************/



#include <stdio.h>
#include "utility.h"

int main()
{
   int x = 222, y = 444;

   //call by refeence
   scanf("%d%d", &x, &y);

   printf("x = %d   y = %d\n", x, y);

}


/****************************************************/
/****************************************************/


#include <stdio.h>
#include "utility.h"

int main()
{
    int a[] = {1, 2, 3, 4, 5};
    int b[] = {-1, -2, -3, -4, -5};

    swap(a, b);

    printf("a[0]  = %d\n", a[0]);
    printf("b[0]  = %d\n", b[0]);

    for (int i = 0; i < (int)asize(a); ++i) {
        printf("a[%d]  =  %d\n", i, a[i]);
    }

    for (int i = 0; i < (int)asize(b); ++i) {
        printf("b[%d]  =  %d\n", i, b[i]);
    }
}


/****************************************************/
/****************************************************/

#include <stdio.h>
#include "utility.h"

int main()
{
    int x = 34, y = 11;
    int* p1 = &x, * p2 = &y;

    printf("x = %d   y = %d\n", x, y);

    swap(p1, p2);

    printf("x = %d   y = %d\n", x, y);
}


/****************************************************/
/****************************************************/


#include <stdio.h>
#include "utility.h"

double get_circle_area(double radius)
{
    return 3.14 * radius * radius;
}

int main()
{
    double r;
    printf("dairenin alanini giriniz : ");
    scanf("%lf", &r);

    double area = get_circle_area(r);

    printf("area = %f\n", area);
}


/****************************************************/
/****************************************************/


#include <stdio.h>
#include "utility.h"

void get_circle_area(double radius, double* pArea)
{
    *pArea = 3.14 * radius * radius;
}

int main()
{
    double r;
    printf("dairenin alanini giriniz : ");
    scanf("%lf", &r);

    double area;
    get_circle_area(r, &area);

    printf("area = %f\n", area);
}


/****************************************************/
/****************************************************/



#include <stdio.h>
#include "utility.h"

void get_circle_vals(double radius, double* pPerimeter, double* pArea)
{
    *pPerimeter = 2. * 3.14 * radius;
    *pArea = 3.14 * radius * radius;
}

int main()
{
    double r;
    printf("dairenin alanini giriniz : ");
    scanf("%lf", &r);

    double area;
    double perimeter;

    get_circle_vals(r, &perimeter, &area);

    printf("perimeter = %f\n", perimeter);
    printf("area = %f\n", area);
}


/****************************************************/
/****************************************************/

void func(T* ptr); // out-param
void fooo(const T* ptr); //in-param

/****************************************************/
/****************************************************/

pointer aritmetigi

C dilinde

bir adres ile bir tam sayı toplanabilir
bir tam sayı ile bir adres toplanabilir
bir adresten bir tam sayı çıkartılabilir

ilem sonuçları bir adrestir

adres + n
n + adres
adres - n

bir tam sayıdan bir adresi çıkartmak sentask hatası
n-adres

bir dizinin bir elemanının adresine 1 toplarsak dizinini bir sonraki elamnına erişmiş olruuz
adres + 1

bir dizinin bir elemanının adresine 1 çıkartırsak dizinini bir önceki elamnına erişmiş olruuz
adres - 1


#include <stdio.h>
#include "utility.h"

int main()
{
    int a[10] = {0, 1, 2, 3, 4, 5, 6, 7, 8, 9};

    //ikiside aynı ifade
    a + 1; // bu adres 1 indexsin adresi olur
    &a[1];

    //a + i;
    //&a[i];

    for (int i = 0; i < 10; ++i) {
        printf("%p   %p\n", a+i , &a[i]);
    }

}


/****************************************************/
/****************************************************/


#include <stdio.h>
#include "utility.h"

int main()
{
    short a[10] = {0, 1, 2, 3, 4, 5, 6, 7, 8, 9};

    for (int i = 0; i < 10; ++i) {
        printf("%p   %p\n", a+i , &a[i]);
    }

}


/****************************************************/
/****************************************************/

#include <stdio.h>
#include "utility.h"

int main()
{
    double a[10] = {0, 1, 2, 3, 4, 5, 6, 7, 8, 9};

    for (int i = 0; i < 10; ++i) {
        printf("%p   %p\n", a+i , &a[i]);
    }

}


/****************************************************/
/****************************************************/


#include <stdio.h>
#include "utility.h"

int main()
{
    int a[10] = {0, 1, 2, 3, 4, 5, 6, 7, 8, 9};

    for (int i = 0; i < 10; ++i) {
        printf("%d   %d\n", *(a+i) , a[i]);
    }

}


/****************************************************/
/****************************************************/


#include <stdio.h>
#include "utility.h"

int main()
{
    int a[10] = {0, 1, 2, 3, 4, 5, 6, 7, 8, 9};
    int *ptr = a;

    printf("*ptr = %d\n", *ptr);
    ptr = ptr + 1;
    printf("*ptr = %d\n", *ptr);
    ++ptr;
    printf("*ptr = %d\n", *ptr);
    ++ptr;
    printf("*ptr = %d\n", *ptr);

}


/****************************************************/
/****************************************************/



#include <stdio.h>
#include "utility.h"

int main()
{
    int a[10] = {0, 1, 2, 3, 4, 5, 6, 7, 8, 9};
    int *ptr = a;

    for (int i = 0; i < 10; ++i) {
        printf("%d  %d  %d\n", a[i], *ptr, *(a+i));
        ++ptr;
    }

}


/****************************************************/
/****************************************************/


#include <stdio.h>
#include "utility.h"

int main()
{
    short a[10] = {0, 1, 2, 3, 4, 5, 6, 7, 8, 9};
    short *ptr = a;

    for (int i = 0; i < 10; ++i) {
        printf("%d  %d  %d\n", a[i], *ptr, *(a+i));
        ++ptr;
    }

}


/****************************************************/
/****************************************************/

#include <stdio.h>
#include "utility.h"

int main()
{
    double a[10] = {0, 1, 2, 3, 4, 5, 6, 7, 8, 9};
    double *ptr = a;

    for (int i = 0; i < 10; ++i) {
        printf("%f  %f  %f\n", a[i], *ptr, *(a+i));
        ++ptr;
    }

}


/****************************************************/
/****************************************************/


#include <stdio.h>
#include "utility.h"

int main()
{
    int a[10] = {0, 1, 2, 3, 4, 5, 6, 7, 8, 9};
    int *ptr = a + 5;
    //int *ptr = &a[5];


    printf("ptr = %p\n", ptr);
    printf("&a[5] = %p\n", &a[5]);

    printf("*ptr = %d\n", *ptr);
    printf("a[5] = %d\n", a[5]);


}


/****************************************************/
/****************************************************/




#include <stdio.h>
#include "utility.h"

int main()
{
    int a[10] = {0, 1, 2, 3, 4, 5, 6, 7, 8, 9};
    int *ptr = a + 5;
    //int *ptr = &a[5];


    printf("ptr = %p\n", ptr);
    printf("&a[5] = %p\n", &a[5]);

    printf("*ptr = %d\n", *ptr);
    printf("a[5] = %d\n", a[5]);


    --ptr;
    printf("*ptr = %d\n", *ptr);

}


/****************************************************/
/****************************************************/


#include <stdio.h>
#include "utility.h"

int main()
{
    int a[10] = {0, 1, 2, 3, 4, 5, 6, 7, 8, 9};
    int *ptr = a + 5;

    ptr - 3; //gecerli
    3 - ptr; //sentaks hatası

}


/****************************************************/
/****************************************************/

C dilin iki tane adresin toplanması geçersiz



#include <stdio.h>
#include "utility.h"

int main()
{
    int a[10] = {0, 1, 2, 3, 4, 5, 6, 7, 8, 9};
    int *p1 = a + 2;
    int *p2 = a + 3;

    p1 + p2;// sentaks hatsı

}


/****************************************************/
/****************************************************/

C dilinde iki adresin birbirinden çıkartılabilir
Bu iişlemin sonucu işaretli bir tam sayıdır


#include <stdio.h>
#include "utility.h"

int main()
{
    int a[10] = {0, 1, 2, 3, 4, 5, 6, 7, 8, 9};
    int *p1 = a + 2;
    int *p2 = a + 5;

    p1 - p2; // -3
    p2 - p2; // +3

    printf("%d\n", p1 - p2);
    printf("%d\n", p2 - p1);

}


/****************************************************/
/****************************************************/


#include <stdio.h>
#include "utility.h"

int main()
{
    int x = 22;
    int y = 11;

    &x - &y; //bu ifade geçerli
    //fakat faydalanmak yanlış

}


/****************************************************/
/****************************************************/


#include <stdio.h>
#include "utility.h"

int main()
{
    double a[10] = { 0 };

    &a[8] - &a[3];  // 5 sonucu

    //bu ifadede türlerin char shor tint double olması sonucu etkilemez

    printf("%d\n", &a[8] - &a[3]);

}


/****************************************************/
/****************************************************/


#include <stdio.h>
#include "utility.h"

int main()
{
    char a[10] = { 0 };
    int b[10] = { 0 };

    //bu ifade gecerli degil
    //gecerlide olsa bize faydası yok
    //cunku farklı iki nesenin adresi
    printf("%d\n", &a[8] - &b[3]);
                   //char *   int *

}


/****************************************************/
/****************************************************/

index operatorü
subscript operatörü

1. öncelik seviyeesinde

() [] . ->  soldan saga left associative


a[i];  derleyici tarafıdnan bu ifadeye çeviriliyor

 *(a + i) // ceviri bu



#include <stdio.h>
#include "utility.h"

int main()
{
    int a[10] = {0, 1, 2, 3, 4, 5, 6, 7, 8, 9 };

    for(int i = 0; i < 10; ++i){
        printf("%d    %d\n", a[i], i[a]);
        //*(a + i)  ---- *(i + a)
    }

}


/****************************************************/
/****************************************************/


adres[tam sayı];

a[i];
int *ptr = a;
ptr[i];



#include <stdio.h>
#include "utility.h"

int main()
{
    int x = 10;

    (&x)[0] = 41;

    //böyle bir kod yazmıyoruz
    //sadece göztermek amaclı
    printf("x = %d\n", x);

    *(&x + 0) = 22;
    printf("x = %d\n", x);
}


/****************************************************/
/****************************************************/


#include <stdio.h>
#include "utility.h"

int main()
{
    int a[10] = {0, 1, 2, 3, 4, 5, 6, 7, 8, 9 };
    int *p = a + 6;

    printf("%d\n", *p); //6
    printf("%d\n", p[0]); //6
    printf("%d\n", p[2]); //8  *(p + 2)
    printf("%d\n", *(p+2)); //8
    printf("%d\n", p[-3]); // 3 *(p - 3)
    printf("%d\n", *(p-3)); // 3


}


/****************************************************/
/****************************************************/

#include <stdio.h>
#include "utility.h"

int main()
{
    int a[10] = {0, 1, 2, 3, 4, 5, 6, 7, 8, 9 };


    a[10]; //sentask hatası deil ama uanlıs pointer hatası
    a[-1]; //setnak hatası deil programın calısma zamnında verilen bir hata
    //tanımsız davranıs denir

    int *p = a;

    p[-5]; //tanımsız davranıs
    p[12]; //tanımsız davranıs

}


/****************************************************/
/****************************************************/

valid pointer
invalid pointer



#include <stdio.h>
#include "utility.h"

int main()
{
    //invalid pointer
    int *p;

    *p = 12; //tanımsız davranıs

}


/****************************************************/
/****************************************************/

#include <stdio.h>
#include "utility.h"

int main()
{
    int ival;

    //valid
    int *p = &ival;

    *p = 12; //

    //invalid pointer
    p + 1;

}


/****************************************************/
/****************************************************/


#include <stdio.h>
#include "utility.h"

int main()
{
    int x = 10;

    int *ptr = &x;

    //hayatı devam etmek te olan bir aedresin nesnesi
}


/****************************************************/
/****************************************************/

#include <stdio.h>
#include "utility.h"

int main()
{
    int a[5] = {0};

    //dizinini son elemanın adresi
    &a[4];

    //dizinin bittigi adresi kullanmak yeri gelince uygun
    int *p =  a + 5;
    &a[5];

    a[5]; //mantıklı degil tanımsız davranıs
}


/****************************************************/
/****************************************************/


#include <stdio.h>
#include "utility.h"

int main()
{
    int *p;

    //bu noktada gecerli bir oointer değil
    if(1)
    {
        int x = 10;

        p = &x; //artık valid pointer tutar
        //
        //

    }

    //bu noktada gecerli bir oointer değil
}


/****************************************************/
/****************************************************/

#include <stdio.h>
#include "utility.h"

int main()
{
    int a[10] = {0};
    int *p;

    p += 10; //gecerli
    //(p + 10)

    //dizinin boytunu elde etmede kullanabiliriz
    //dizinin bittigi yerin adresini
    printf("size = %d\n", p - a);


    printf("a = %d\n", p -= 3);

}


/****************************************************/
/****************************************************/


#include <stdio.h>
#include "utility.h"

int main()
{
   int *p = NULL;
   //gecerli pointer
   //hiçbir yeri göstermiyor anlamında

}


/****************************************************/
/****************************************************/


const anahtar sözcüğü

değişkenlerin bildirimlerinde kullanılan bir anahtasr sözcük

const değişkenler hayata gelirken ilk deger alıyorlar
hayatı botunca bu ş-ilk degeri koruyorlar
degeri degismiyor
degeri degistirlirse sentask hatası




#include <stdio.h>
#include "utility.h"

int main()
{
   const int x = 10;
   x = 20; //sentask hatası
   ++x;//sentask hatası
   --x;//sentask hatası

}


/****************************************************/
/****************************************************/



#include <stdio.h>
#include "utility.h"

int main()
{
    const int a[] = {2, 3, 4, 5, 6, 7};

    a[2] = 23; //sentask ahtası

    int x = a[2];

}


/****************************************************/
/****************************************************/


#include <stdio.h>
#include "utility.h"

int main()
{
    //ikiside aynı ifade
    const int x = 10;
    int const y = 10;

}


/****************************************************/
/****************************************************/

#include <stdio.h>
#include "utility.h"

#define     PI      3.1415

int main()
{
    const double pi = 3.1415;

    &pi;
}


/****************************************************/
/****************************************************/

#include <stdio.h>
#include "utility.h"

#define SIZE 10

int main()
{
    const int size = 10;

    int a[size]; //gecerli bir ifade olmaz dikkat

}


/****************************************************/
/****************************************************/

#include <stdio.h>
#include "utility.h"

const int xSize;
//gecerli ifade ve kullanıma uygun
//hayata 0 degeri ile geldigi için

int main()
{
    const int size;
    //gecerli bir ifade ama kullanımı tanımsız davranıs
    //C++ sentaks hatası

   // static const int size;
    //gecerli ifade ve kullanıma uygun
    //hayata 0 degeri ile geldigi için

}


/****************************************************/
/****************************************************/

#include <stdio.h>
#include "utility.h"

int func(void);

int main()
{
    const int x = func(); // bu sekilde kullanım mevcut

}


/****************************************************/
/****************************************************/

#include <stdio.h>
#include "utility.h"

int func(void);

int main()
{
    static const int x = func(); // sentaks hatası

}


/****************************************************/
/****************************************************/


#include <stdio.h>
#include "utility.h"

int func(void);

int main()
{
    const int x = 10;
    int *ptr = (int *)&x;

    *ptr = 444; //bu gecerli
    //ama kensilik tanısmız davranıs
    //buna aldınmayın yoksa basınız belaya girer

}


/****************************************************/
/****************************************************/

const anahatar sozcugu ile pointer ilişkisinie

int x = 10;

//bu iki aynı anlamdadır
const int *ptr = &x;
int const *ptr = &x;


//burada anlam farkı olsuyor
int *const ptr = &x;



#include <stdio.h>
#include "utility.h"

int func(void);

int main()
{
    int x = 10;
    int *const ptr = &x;
    //ptr'nin degeri hic degişmeyecek
    //ptr hayatı boyunca x in adresinin tutacak
    //ptr yi degistimeye yonelık kodlar sentaks hatası
    //ptr is a const pointer to int
    //C++ top level const

    int y = 1;
    ptr = &y; //sentaks hatası

    *ptr = 123; //gecerli

}


/****************************************************/
/****************************************************/

#include <stdio.h>
#include "utility.h"

int func(void);

int main()
{
    int a[] = {1, 2, 3, 4, 5};
    int *const ptr = a;

    //ptr e hep a adresinin tutacak

    int y = 1;

    ptr = &y;//sentask hatası

    *ptr = 22; //gecerli

}


/****************************************************/
/****************************************************/


#include <stdio.h>
#include "utility.h"

int func(void);

int main()
{
    int x = 10;
    //int const * ptr = &x; //aynı anlamdadır
    const int * ptr = &x;

    //ptr yolu ile otr2nin gösterdiği adresi değiştirmeme
    //yani *ptr nesnesinini asla atama yapamazsın


    *ptr = 12; //sentask ahatası

    int y = 11;

    ptr = &y; //gecerli

    x = 15;

}


/****************************************************/
/****************************************************/


#include <stdio.h>
#include "utility.h"

int func(void);

int main()
{
    int a[] = {1, 2, 3, 4, 5};
    const int * ptr = &a;

    *ptr = 55; //sentaks hatasıü

    int y = 1;

    ptr = &y;

    *ptr = 12;

}


/****************************************************/
/****************************************************/

#include <stdio.h>
#include "utility.h"

int func(void);

int main()
{
    int x = 10;

    int * const p1 = &x;
    //const pointer to int
    //c++ top level const
    //right const


    const int * p2 = &x;
    //pointer to const int
    //c++ low level const
    //left const


}


/****************************************************/
/****************************************************/


#include <stdio.h>
#include "utility.h"

int func(void);

int main()
{
    int x = 10;
    int y = 11;

    int * const p1 = &x; //top level const
    const int * p2 = &x; //low level const

    p1 = &y; //sentask hatası
    *p1 = 23; //gecerli


    p2 = &y; //gecerli
    *p2 = 23; //sentask hatası

}


/****************************************************/
/****************************************************/


const ne den önce gelirse const olan odur

int *const ptr = &x; //ptr yi degistirirsem hata
const int *ptr = &x; //*ptr yi degistirirsem hata

/****************************************************/
/****************************************************/


#include <stdio.h>
#include "utility.h"

int func(void);

int main()
{
    int x = 10;
    int y = 11;

    const int * const p1 = &x;

    p1 = &y; //sentask hatası
    *p1 = 55; //setnaks hatası

    int z = *p1;


}


/****************************************************/
/****************************************************/

void func(T *p);  //out parameter
//set fonction
//setter


void func(const T *p); //in parameter
//get function
//getter
//acccessor


const correctness -- const dgorulugu denir

/****************************************************/
/****************************************************/



#include <stdio.h>
#include "utility.h"


void printArray(int *p, int size);


int main()
{
    const int a[] = { 1, 2, 3, 4, 5};

    printArray(a, 5);
    //C de uyarı mesajı alırsınız
    //C++ da sentask hatası verir

}


/****************************************************/
/****************************************************/


#include <stdio.h>
#include "utility.h"


void printArray(const int *p, int size);


int main()
{
    const int a[] = { 1, 2, 3, 4, 5};

    printArray(a, 5);
    //C degecerli
    //C++ gecerli

}


/****************************************************/
/****************************************************/

tür dönüşümü ve tür uyumu -- const anahatar sözcüğü ile ilgili




#include <stdio.h>
#include "utility.h"


int main()
{
    int x = 10;
    const int y = 20;

    &x; //int * türü
    &y; //const int * türü
}


/****************************************************/
/****************************************************/

#include <stdio.h>
#include "utility.h"


int main()
{
    int x = 10;
    int *ptr = &x;

    ptr; // int * türü
}


/****************************************************/
/****************************************************/
#include <stdio.h>
#include "utility.h"


int main()
{
    int x = 10;
    const int *ptr = &x;

    ptr; //const int * türü

}


/****************************************************/
/****************************************************/

#include <stdio.h>
#include "utility.h"


int main()
{
    int a[100] = {0};

    a; //int *

}


/****************************************************/
/****************************************************/

#include <stdio.h>
#include "utility.h"


int main()
{
    const int a[100] = {0};

    a; //const int *

}


/****************************************************/
/****************************************************/


tür dünüşümü


T*  --> const T*   yapılması gecerli

const T* --> T*    yapılması uygun degoil  /// C++ setnaks hatası



#include <stdio.h>
#include "utility.h"


int main()
{
    int x = 10;

    const int *ptr = &x; //gecerli  T* --> const T*

}


/****************************************************/
/****************************************************/

#include <stdio.h>
#include "utility.h"


int main()
{
    const int x = 10;

    int *ptr = &x; //gecerli fakat yanlıs durum  const T* --> T* uygun ifade değil

}


/****************************************************/
/****************************************************/


#include <stdio.h>
#include "utility.h"


int main()
{
    const int x = 10;

    int *ptr = &x; //gecerli fakat yanlıs durum  const T* --> T* uygun ifade değil

    *ptr = 22; //tanımsız davranıs

}


/****************************************************/
/****************************************************/


asla const T* türünden T* türüne atama / kopyalama yapmayın

bazı nadir durumlar hariç

#include <stdio.h>
#include "utility.h"


int main()
{
    const int x = 10;
    const int *ptr = &x;

    //*ptr = 12; //sentask hatası

    int *p;

    p = ptr; //yanlıs durum olsuur const T* --> T* dosunum var

    *p = 4545; //tanımsız davranıs

}


/****************************************************/
/****************************************************/


dizilerin fonksiyonlara argüman olarak geçilmesi



#include <stdio.h>
#include "utility.h"


void printArray(const int *p, int size)
{
    for (int i = 0; i < size; ++i) {
        printf("%d ", p[i]);
    }
    printf("\n");
}

int main()
{
    int a[10] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 11};

    //T* --> const T* gecerli durum
    printArray(a, 10);

}


/****************************************************/
/****************************************************/

#include <stdio.h>
#include "utility.h"


void printArray(const int *p, int size)
{
    while(size--){
        printf("%d ", *p);
        p++;
    }
    printf("\n");
}

int main()
{
    int a[10] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 11};

    //T* --> const T* gecerli durum
    printArray(a, 10);

}


/****************************************************/
/****************************************************/


#include <stdio.h>
#include "utility.h"

#define     SIZE        20

int main()
{
    int a[SIZE];

    set_array_random(a, SIZE);
    print_array(a, SIZE);
    print_array(a, 5); //ilk 5 elemanı
    print_array(a + 5, 3); //5 index dahil ile 8 index arasını yazdıracam
    print_array(&a[5], 3); //5 index dahil  ile 8 index arasını yazdıracam
    print_array(a + SIZE -4, 4); //son 4 elemanı yazdıracam
    print_array(&a[SIZE -4], 4); //son 4 elemanı yazdıracam

}


/****************************************************/
/****************************************************/

#include <stdio.h>
#include "utility.h"
#include <math.h>

#define     SIZE        20

/*
int sum_array(const int *p, int size)
{
    int sum = 0;
    for (int i = 0; i < size; ++i) {
        sum += p[i];
    }

    return sum;
}
*/

int sum_array(const int *p, int size)
{
    int sum = 0;

    while (size--) {
        sum += *p;
        ++p;
    }

    return sum;
}

double get_mean(const int *p, int size)
{
    return (double)sum_array(p, size) / size;
}

double get_std_deviation(const int *p, int size)
{
    double mean = get_mean(p, size);
    double sum_square = 0;

    for (int i = 0; i < size; ++i) {
        sum_square += (p[i] - mean) * (p[i] - mean);
        //sum_square += pow((p[i] - mean), 2);
    }

    return  sqrt(sum_square / (size -1));
}

int main()
{
    int a[SIZE];

    randomize();
    set_array_random(a, SIZE);
    print_array(a, SIZE);

    printf("sum = %d\n", sum_array(a, SIZE));
    printf("mean = %f\n", get_mean(a, SIZE));
    printf("std = %f\n", get_std_deviation(a, SIZE));

}


/****************************************************/
/****************************************************/


#include <stdio.h>
#include "utility.h"
#include <math.h>

#define     SIZE        20


int get_array_max(const int *p, int size)
{
    int max = *p;

    for (int i = 1; i < size; ++i) {
        if(p[i] > max)
            max = p[i];
    }

    return max;
}


int main()
{
    int a[SIZE];

    randomize();
    set_array_random(a, SIZE);
    print_array(a, SIZE);


    printf("max = %d\n", get_array_max(a, SIZE));


}


/****************************************************/
/****************************************************/




#include <stdio.h>
#include "utility.h"
#include <math.h>

#define     SIZE        20


int get_array_max(const int *p, int size)
{
    int max = *p;

    for (int i = 1; i < size; ++i) {
        if(p[i] > max)
            max = p[i];
    }

    return max;
}


int get_array_min(const int *p, int size)
{
    int min = *p;

    for (int i = 1; i < size; ++i) {
        if(p[i] < min)
            min = p[i];
    }

    return min;
}

int main()
{
    int a[SIZE];

    randomize();
    set_array_random(a, SIZE);
    print_array(a, SIZE);


    printf("max = %d\n", get_array_max(a, SIZE));
    printf("min = %d\n", get_array_min(a, SIZE));

}


/****************************************************/
/****************************************************/

#include <stdio.h>
#include "utility.h"
#include <math.h>

#define     SIZE        20


void get_array_min_max(const int *p, int size, int *pmax, int *pmin)
{
    *pmax = *pmin = *p;

    for (int i = 1; i < size; ++i) {
        if(p[i] > *pmax)
            *pmax = p[i];
        else if(p[i] < *pmin)
            *pmin = p[i];
    }
}


int main()
{
    int a[SIZE];

    randomize();
    set_array_random(a, SIZE);
    print_array(a, SIZE);

    int max, min;

    get_array_min_max(a, SIZE, &max, &min);

    printf("max = %d\n", max);
    printf("min = %d\n", min);

}


/****************************************************/
/****************************************************/



#include <stdio.h>
#include "utility.h"
#include <math.h>

#define     SIZE        20

void reverse_array(int *p, int size)
{
    for (int i = 0; i < size / 2; ++i) {
        int temp = p[i];
        p[i] = p[size -1 -i];
        p[size -1 -i] = temp;
    }
}

int main()
{
    int a[SIZE];

    randomize();
    set_array_random(a, SIZE);
    print_array(a, SIZE);

    reverse_array(a, SIZE);

    print_array(a, SIZE);
}


/****************************************************/
/****************************************************/


#include <stdio.h>
#include "utility.h"
#include <math.h>

#define     SIZE        20

void reverse_array(int *p, int size)
{
    for (int i = 0; i < size / 2; ++i) {
        swap(&p[i], &p[size -1 -i]);
    }
}

int main()
{
    int a[SIZE];

    randomize();
    set_array_random(a, SIZE);
    print_array(a, SIZE);

    reverse_array(a, SIZE);

    print_array(a, SIZE);
}


/****************************************************/
/****************************************************/



#include <stdio.h>
#include "utility.h"
#include <math.h>

#define     SIZE        20

//buble sort
void sort_array(int *p, int size)
{
    for (int i = 0; i < size -1; ++i) {
        for (int k = 0; k < size -1 -i; ++k) {
            if(p[k] > p[k+1])
                swap(p + k, p + k + 1);
        }
    }
}

int main()
{
    int a[SIZE];

    randomize();
    set_array_random(a, SIZE);
    print_array(a, SIZE);

    sort_array(a, SIZE);

    print_array(a, SIZE);
}


/****************************************************/
/****************************************************/


fonksiyonlara pointer geçmede 2 yöntem var


int *  -> void sort_array(int *p, int size)
int [] -> void sort_array(int p[], int size)  -- kullanımı az


ikiside pointer bildirimi

int [] -> void sort_array(int p[10], int size)

p içindeki index degerini dikkate almaz




#include <stdio.h>
#include "utility.h"
#include <math.h>

#define     SIZE        20

//buble sort
void sort_array(int p[], int size)
{
    for (int i = 0; i < size -1; ++i) {
        for (int k = 0; k < size -1 -i; ++k) {
            if(p[k] > p[k+1])
                swap(p + k, p + k + 1);
        }
    }
}

int main()
{
    int a[SIZE];

    randomize();
    set_array_random(a, SIZE);
    print_array(a, SIZE);

    sort_array(a, SIZE);

    print_array(a, SIZE);
}


/****************************************************/
/****************************************************/




pointer idioms

-----------------------------------------------

++ -- operator
2.öncelik seviyesinde
sagdan sola
operand olan ifade Lvalue expression
++x
x++
--y

yan etkisi var - side effect

bu ifadeler ile olsutrulan ifadeler Rvalue

C++ da önek konumu ise Lvalue son ek konumu ise Rvalue deger üretir

-----------------------------------------------

* dereferencing / subscript

2.öncelik seviyeesinde
deref. ope'nün operandı olan ifade adres olmak zorunda

*ptr  ifade Lvalue expression dır

*operandı ile olustulan ifadeler Lvalue

-----------------------------------------------

& adres operatorü

2. öncelik seviyesinde
operatorun operandı Lvalue olmak zorunda

üretilen deger operand olan nesnesinin aderesi

&x ifadesi Rvalue expression
&operandı ile olsturulan ifade Rvalue



#include <stdio.h>
#include "utility.h"
#include <math.h>

#define     SIZE        20


int main()
{
    int x = 10;
    //&x++;
    //x++; //rvalue

    &x++;//gecerli değil
}


/****************************************************/
/****************************************************/




#include <stdio.h>
#include "utility.h"
#include <math.h>

#define     SIZE        20


int main()
{
    int x = 10;

    //++&x;
    &x; //rvalue
    ++&x;// gecerli değil
}


/****************************************************/
/****************************************************/


#include <stdio.h>
#include "utility.h"
#include <math.h>

#define     SIZE        20


int main()
{
    int a[10] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10};
    int *p = a;

    *p++ = 55;

    print_array(a, 10);

    *p = 11;

    print_array(a, 10);

}


/****************************************************/
/****************************************************/



#include <stdio.h>
#include "utility.h"
#include <math.h>

#define     SIZE        20

void copy_array(int *pdest, const int *psource, int n)
{
    /*
    while(n--){
        *pdest = *psource;
        pdest++;
        psource++;
    }
    */

    while (n--)
        *pdest++ = *psource++;

}

int main()
{
    int a[SIZE];
    int b[SIZE];

    randomize();
    set_array_random(a, SIZE);
    print_array(a, SIZE);
    copy_array(b, a, SIZE);
    print_array(b, SIZE);

}


/****************************************************/
/****************************************************/


#include <stdio.h>
#include "utility.h"
#include <math.h>

#define     SIZE        20

void copy_array(int *pdest, const int *psource, int n)
{
    while (n--)
        *pdest++ = *psource++;
}

int main()
{
    int a[SIZE];
    int b[SIZE] = {0};

    randomize();
    set_array_random(a, SIZE);
    print_array(a, SIZE);

    int idx_a, idx_b, n;

    printf("a dizinin hangi indexli elemanindan baslayarak ? ");
    scanf("%d", &idx_a);


    printf("b dizinin hangi indexli elemanindan baslayarak ? ");
    scanf("%d", &idx_b);


    printf("kac eleman kopyalanacak ? ");
    scanf("%d", &n);

    copy_array(&b[idx_b], &a[idx_a], n);
    print_array(b, SIZE);
}


/****************************************************/
/****************************************************/

#include <stdio.h>
#include "utility.h"
#include <math.h>

#define     SIZE        20

int main()
{
    int a[10] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10};
    int *p = a;

    *++p = 99;
    print_array(a, 10);
    *p = 33;
    print_array(a, 10);
}


/****************************************************/
/****************************************************/


#include <stdio.h>
#include "utility.h"
#include <math.h>

#define     SIZE        20


void reverse_array(int *p, int size)
{
    int n = size / 2;
    int *pe = p + size;

    while (n--) {
        swap(p++, --pe);
    }

}

int main()
{
    int a[10] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10};

    reverse_array(a, 10);

    print_array(a, 10);

}


/****************************************************/
/****************************************************/

#include <stdio.h>
#include "utility.h"
#include <math.h>

#define     SIZE        20


void reverse_copy(int *pdest, const int *psource, int n)
{
    pdest += n;
    while (n--) {
        *--pdest = *psource++;
    }
}

int main()
{
    int a[10] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10};
    int b[10];

    reverse_copy(b, a, 10);

    print_array(b, 10);

}


/****************************************************/
/****************************************************/



#include <stdio.h>
#include "utility.h"
#include <math.h>

#define     SIZE        20


int main()
{
    int a[10] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10};
    int *p = a;

    *p++ = 44;
    *a++ = 99; //gecersiz
    //&a[0]   --> a
    //*&a[0]++ = 11;
    //bir dizinin ismi ++ -- sol operandı olamaz

}


/****************************************************/
/****************************************************/





#include <stdio.h>
#include "utility.h"
#include <math.h>

#define     SIZE        20


int main()
{
    int a[10] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10};
    int *p = a;

    *p++ = 44;
    *a++ = 99; //gecersiz -- arraydecay convertion
    //&a[0]   --> a
    //*&a[0]++ = 11;
    //bir dizinin ismi ++ -- sol operandı olamaz

}


/****************************************************/
/****************************************************/
#include <stdio.h>
#include "utility.h"
#include <math.h>

#define     SIZE        20


int main()
{
    int a[10] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10};
    int *p = a;

    ++*p;


    print_array(a, 10);
}


/****************************************************/
/****************************************************/


#include <stdio.h>
#include "utility.h"
#include <math.h>

#define     SIZE        20


int main()
{
    int a[10] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10};
    int *p = a;

    *p++;
    print_array(a, 10);
    (*p)++;
    print_array(a, 10);
}


/****************************************************/
/****************************************************/



#include <stdio.h>
#include "utility.h"
#include <math.h>

#define     SIZE        20


int main()
{
    int a[10] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10};
    int *p = a;

    ++*a; //gecerli

    print_array(a, 10);
}


/****************************************************/
/****************************************************/


#include <stdio.h>
#include "utility.h"
#include <math.h>

#define     SIZE        20

//mulakat sorusu
//fonksiyonun görevi nedir

void strange(int *p, int size)
{
    while (size--) {
        ++*p++;
        //p++ //rvalue
        //*p++ //lvalue
        //++*p++
    }
}


int main()
{
    int a[10] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10};
    strange(a, 10);
    print_array(a, 10);
}


/****************************************************/
/****************************************************/


adreslerde karşılaştırma işlemleri


geçersiz adresler asla karşılaştıra op.lerinin operandı yapmayın



1- ptr'nin degeri haytata olan bir nesnenin adresi ise
2- ptr'nin degeri bir dizinini bittiği yerin adresi ise
3- ptr'nin degeri nullptr ise


==
>

adreslerin eşit olabilmesi için

aynı nesnelerin adresleri olması gerekiyor
aynı dizinini bittiği yerin adresi olmasu gerekiyor
nullptr olması gerekiyor



#include <stdio.h>
#include "utility.h"
#include <math.h>

#define     SIZE        20


int main()
{
    int x = 10, y = 20;

    int *p1 = &x, *p2 = &y;

    if(p1 == p2)
        printf("esit\n");
    else
        printf("esit degil\n");

    p1 = &y;

    if(p1 == p2)
        printf("esit\n");
    else
        printf("esit degil\n");
}


/****************************************************/
/****************************************************/

#include <stdio.h>
#include "utility.h"
#include <math.h>

#define     SIZE        20

void printarray(const int *ps, const int *pe)
{
    while (ps != pe) {
        printf("%3d ", *ps++);
    }

    printf("\n");
}

int main()
{
    int a[SIZE];

    randomize();
    set_array_random(a, SIZE);
    print_array(a, SIZE);


    //printarray(a, a+SIZE);
    printarray(a, a+3);

    printarray(a+3, a+7);

}


/****************************************************/
/****************************************************/



#include <stdio.h>
#include "utility.h"
#include <math.h>

#define     SIZE        20



int main()
{
    int a[5] = {1, 2, 3, 4, 5};
    int b[5] = {1, 2, 3, 4, 5};

    if(a == b)
        printf("esit\n");
    else
        printf("esit degil\n");

}


/****************************************************/
/****************************************************/



#include <stdio.h>
#include "utility.h"
#include <math.h>

#define     SIZE        20

int is_equal(const int *px, const int *py, int size)
{
    while (size--) {
        if(*px != *py)
            return 0;
        ++px, ++py;
    }

    return 1;
}

int main()
{
    int a[5] = {1, 2, 3, 4, 5};
    int b[5] = {1, 2, 3, 4, 5};

    if(is_equal(a, b, 5))
        printf("esit\n");
    else
        printf("esit degil\n");

}


/****************************************************/
/****************************************************/


adreslerin karsılasyıtırılması

c de dizilerin adresleri karsılastırışdıgında
dizinin buyuk elemanın adresi daha buyuk


a + 3 > a + 5




#include <stdio.h>
#include "utility.h"
#include <math.h>

#define     SIZE        20



int main()
{
    int a[100] = {0};
    int *p1 = a + 5;
    int *p2 = a + 15;

    printf("p1 > p2 = %d\n", p1 > p2);
    printf("p1 < p2 = %d\n", p1 < p2);
}


/****************************************************/
/****************************************************/


#include <stdio.h>
#include "utility.h"
#include <math.h>

#define     SIZE        20



int main()
{
    int x = 13, y = 13;
    int *p1 = &x;
    int *p2 = &y;

    if(p1 > p2) //anlamsız bir ifade
        ;

}


/****************************************************/
/****************************************************/


typedef bildirimleri - tür eş isimleri - V1


var olan bir isme yeni isim verme işlemidir


typedef -- type alias olarak ta görebilirz





#include <stdio.h>
#include "utility.h"


typedef int Word;

Word func(Word);

int main()
{

    Word x = 4; //int x = 4

}


/****************************************************/
/****************************************************/



#include <stdio.h>
#include "utility.h"

typedef int* IPTR;

int main()
{

    int x = 10;
    IPTR p = &x;

}


/****************************************************/
/****************************************************/


#define  int  A
typedef  int  B


define    precompile da yapılan işlem
typedef  compile time da yapılan işelm






#include <stdio.h>
#include "utility.h"

#define   IPTR  int*

typedef int* Iptr;

int main()
{
    IPTR  p1, p2;  //sadece p1 pointer  tanım int *p1, int p2
    Iptr  p3, p4;  //p3 ve p4 pointer tanım pint *p3 int *p4

    //*p1;
    //*p2;
    *p3;
    *p4;

}


/****************************************************/
/****************************************************/



tür eş isim verme yolu şu şekildedir


1- hangi türe eş isim vereceksek o türden bir değişken tnaıumlayın
2- tanımlamanın başına typedef anahtar sözcüğü yerleştirin
3- değişkene verdiğiniz isim o değişkeninin türünd verecekseniz eş isimle değiştirin



typedef  int Myint;



#include <stdio.h>
#include "utility.h"

typedef const int * CIPTR;

int main()
{
    int x = 11;
    CIPTR ptr = &x;

    *ptr = 12; //gecerli degil const oldugu için
}


/****************************************************/
/****************************************************/


#include <stdio.h>
#include "utility.h"

typedef int  INTA10[10];

int main()
{
    INTA10 a, b, c;  //int a[10] b[10] c[10]

}


/****************************************************/
/****************************************************/


typedef bildirimi

karmaşık bildirimleri daha basit hale getirmemize yardım olur



#include <stdio.h>
#include "utility.h"


//int (func(int(*)(int), int(*)(int)))(int, int);


typedef int (*FPTR)(int);


FPTR func(FPTR, FPTR);

//bu fonksiyon tanımlarını yapabilecez

int main()
{



}


/****************************************************/
/****************************************************/



#include <stdio.h>
#include "utility.h"

typedef int Word;
typedef Word* Wordptr;


int main()
{
    Wordptr ptr;
    *ptr = 12;

}


/****************************************************/
/****************************************************/


#include <stdio.h>
#include "utility.h"

typedef int Word,  *Wordptr;


int main()
{
    Wordptr ptr;
    *ptr = 12;

}


/****************************************************/
/****************************************************/

#include <stdio.h>
#include "utility.h"
#include <stdbool.h>

typedef int Bool;

int main()
{
    bool flag = false; //_Bool falg = 0 derleyicinin gördüğü

    flag = true;

    size_t size;
}


/****************************************************/
/****************************************************/


#include <stdio.h>
#include "utility.h"
#include <stdbool.h>

typedef double Dollar;
typedef double Euro;
typedef double Pound;

int main()
{
    Dollar sum = 23.1;
    Euro balance = 12.2;

}


/****************************************************/
/****************************************************/

std. kütüphanede

size_t


1- okunabilirlik
2- taşınabilirlik

amaçlı kullanılır


size_t strlen(const char *)


standart lar diyor ki

typeid unsigned int size_t


unsigned int derleyici göre değişebilir
unsigned long ta olabilir

ama ortak olan size_t

sizeof operatorünün üretiği degerin türüdür


ornek std typedef lere

size_t
ptrdifft_t
time_t
clock_t
fpos_t
ldiv_t
int64_t


/****************************************************/
/****************************************************/


size_t std bildirimi birden çok fazla kutuphanede bulunmaktadır




#include <stdio.h>

int main()
{
    size_t x = 12;
}


/****************************************************/
/****************************************************/



#include <stddef.h>

int main()
{
    size_t x = 12;
}


/****************************************************/
/****************************************************/


size_t türü standart kütüphanenin bazı fonksiyonlarında
 1- parametre türü olarak kullanılır
 2- geri dönüş türü olarak kullanılır


a- bir dizi boyutu isteyen fonksiyon parametrelerin türünde
b- yazı uzunlugu türü
c- sizeof degeri isteyen parametre
d- tane adet türü



#include <stdio.h>

int main()
{

    printf("sizeof(int) = %zu\n", sizeof (int));
    //%zu formatlama size_t nin formatlaması için seçilmiştir
}


/****************************************************/
/****************************************************/


iki adresi birbirinden çıkartırsak ptrdiff_t eş ismi ile karşılaşırız


/****************************************************/
/****************************************************/


Function returning pointers



#include <stdio.h>

int foo(void);
int *func(void);
//T* isim(Ta, T b)


int main()
{
    int x = foo();
    int *p = func();

}


/****************************************************/
/****************************************************/


#include <stdio.h>

int g = 10;

int *func(void)
{
    //
    //
    return &g;
}

int main()
{

    int *p = func();

    printf("*p = %d\n", *p);
    *p = 123;
    printf("*p = %d\n", *p);
    printf("g = %d\n", g);

    ++*p;
    printf("g = %d\n", g);

}


/****************************************************/
/****************************************************/
#include <stdio.h>

int g = 10;

int *func(void)
{
    //
    //
    return &g;
}

int main()
{

    ++*func();

    printf("g = %d\n", g);


}


/****************************************************/
/****************************************************/

#include <stdio.h>

int g = 10;

int *func(void)
{
    //
    //
    return &g;
}

void foo(int *p)
{
    ++*p;
}

int main()
{

    foo(func());

    printf("g = %d\n", g);


}


/****************************************************/
/****************************************************/


#include <stdio.h>

int *foo(void)
{
    int sum = 0;

    for (int i = 0; i < 10; ++i) {
        sum += 1;
    }

    return &sum;
}

int main()
{
    //geçerli ama yanlış durum yani tanımsız davranış
    //invalid pointer
    //yerel değişken  - otomotik ömürlü değişken adresi döndürüyor
    int *ptr = foo();

    printf("*ptr = %d\n", *ptr);
}


/****************************************************/
/****************************************************/


#include <stdio.h>

char *get_name(void)
{
    char str[100];

    printf("bir isim girin: ");
    sgets(str);

    return str;
}

int main()
{
    //geçerli ama yanlış durum yani tanımsız davranış
    //invalid pointer
    //yerel değişken  - otomotik ömürlü değişken adresi döndürüyor
    char *ptr = get_name();

    printf("isim = %s\n", ptr);
}


/****************************************************/
/****************************************************/

#include <stdio.h>

char *get_name(void)
{
    static char str[100];

    printf("bir isim girin: ");
    sgets(str);

    return str;
}

int main()
{
    //artık geçerli bir ifade ve valid pointer
    char *ptr = get_name();

    printf("isim = %s\n", ptr);
}


/****************************************************/
/****************************************************/

Asla otomotik ömürlü bir nesne adresi döndürmemliyiz - dikkat


şunları döndürebilirz
static ömürlü nesnee adresi döndüren fonksiyonlar
 a- global değişkenler adresleri
 b- static yerel değişkenler
 c- string literalleri

fonksiyon dinamik ömürlü bir nesne adresi döndürebilir --- ileride görecez


#include <stdio.h>
#include <time.h>

int main()
{
    time_t timer = time(NULL);

    for (;;) {
        printf("%p\n", localtime(&timer));
        getchar();
    }
}


/****************************************************/
/****************************************************/

#include <stdio.h>

int *foo(int *p)
{
    *p = 123;

    return p;
}

int main()
{
   int a = 10;

   printf("a = %d\n", *foo(&a));
   printf("a = %d\n", a);

   int *p = foo(&a);

   printf("*p = %d\n", *p);
}


/****************************************************/
/****************************************************/



#include <stdio.h>
#include "utility.h"

#define     SIZE        10

//mulakat sorusu
//bir dizinin en buyuk elemanını adresinin döndüren
//array_max isimli bir donksiyon tanımlayın

int *array_max(const int *pa, size_t size)
{
    //const T * --- T*
    int *pmax = (int *)pa;

    for (size_t i = 1; i < size; ++i) {
        if(pa[i] > *pmax)
            pmax = (int *)(pa + i);
    }

    return pmax;
}

int main()
{
    int a[SIZE];

    randomize();
    set_array_random(a, SIZE);
    print_array(a, SIZE);

    int *pmax = array_max(a, SIZE);


    printf("max = %d\n", *pmax);
    printf("max dizinini %d indisli elemani\n", (int)(pmax - a));
    *pmax = -1;

    print_array(a, SIZE);

}


/****************************************************/
/****************************************************/


#include <stdio.h>
#include "utility.h"

#define     SIZE        10

//bir dizinin en buyuk elemanını adresinin döndüren
//array_max isimli bir donksiyon tanımlayın

int *array_max(const int *pa, size_t size)
{
    //const T * --- T*
    int *pmax = (int *)pa;

    for (size_t i = 1; i < size; ++i) {
        if(pa[i] > *pmax)
            pmax = (int *)(pa + i);
    }

    return pmax;
}

int main()
{
    int a[SIZE];

    randomize();
    set_array_random(a, SIZE);
    print_array(a, SIZE);

    int *pmax = array_max(a, SIZE);

    //sadece print_array işlevinin kullanacaz
    //dizinin ilk elemanından baslayarak en buyuk elemanına kadar (dahil) yazdırsın
    print_array(a, pmax - a + 1);

}


/****************************************************/
/****************************************************/



#include <stdio.h>
#include "utility.h"

#define     SIZE        10

//bir dizinin en buyuk elemanını adresinin döndüren
//array_max isimli bir donksiyon tanımlayın

int *array_max(const int *pa, size_t size)
{
    //const T * --- T*
    int *pmax = (int *)pa;

    for (size_t i = 1; i < size; ++i) {
        if(pa[i] > *pmax)
            pmax = (int *)(pa + i);
    }

    return pmax;
}

int main()
{
    int a[SIZE];

    randomize();
    set_array_random(a, SIZE);
    print_array(a, SIZE);

    int *pmax = array_max(a, SIZE);

    //sadece print_array işlevinin kullanacaz
    //dizinin en büyük elemanından baslayarak en son elemanına kadar (dahil) yazdırsın
    print_array(pmax, SIZE - (pmax - a));

}


/****************************************************/
/****************************************************/

#include <stdio.h>
#include "utility.h"

#define     SIZE        10

//bir dizinin en buyuk elemanını adresinin döndüren
//array_max isimli bir donksiyon tanımlayın

int *array_max(const int *pa, size_t size)
{
    //const T * --- T*
    int *pmax = (int *)pa;

    for (size_t i = 1; i < size; ++i) {
        if(pa[i] > *pmax)
            pmax = (int *)(pa + i);
    }

    return pmax;
}

int *array_min(const int *pa, size_t size)
{
    //const T * --- T*
    int *pmin = (int *)pa;

    for (size_t i = 1; i < size; ++i) {
        if(pa[i] < *pmin)
            pmin = (int *)(pa + i);
    }

    return pmin;
}

int main()
{
    int a[SIZE];

    randomize();
    set_array_random(a, SIZE);
    print_array(a, SIZE);

    int *pmax = array_max(a, SIZE);
    int *pmin = array_min(a, SIZE);

    //sadece print_array işlevinin kullanacaz
    //dizinin en kucuk elemanından baslayarak en buyuk elemanına kadar (dahil) yazdırsın

    if(pmax > pmin)
        print_array(pmin, pmax - pmin + 1);
    else
        print_array(pmax, pmin - pmax + 1);

    //yada

    print_array(pmax < pmin ? pmax : pmin, abs(pmax - pmin) + 1);

}


/****************************************************/
/****************************************************/


#include <stdio.h>
#include "utility.h"

#define     SIZE        10

//bir dizinin en buyuk elemanını adresinin döndüren
//array_max isimli bir donksiyon tanımlayın

int *array_max(const int *pa, size_t size)
{
    //const T * --- T*
    int *pmax = (int *)pa;

    for (size_t i = 1; i < size; ++i) {
        if(pa[i] > *pmax)
            pmax = (int *)(pa + i);
    }

    return pmax;
}

int *array_min(const int *pa, size_t size)
{
    //const T * --- T*
    int *pmin = (int *)pa;

    for (size_t i = 1; i < size; ++i) {
        if(pa[i] < *pmin)
            pmin = (int *)(pa + i);
    }

    return pmin;
}

int main()
{
    int a[SIZE];

    randomize();
    set_array_random(a, SIZE);
    print_array(a, SIZE);

    int *pmax = array_max(a, SIZE);
    int *pmin = array_min(a, SIZE);

    //tek bir deyim ile dizinini en buyk ve en kucuk degerlerini degistirelim

    swap(pmax, pmin);

    print_array(a, SIZE);


}


/****************************************************/
/****************************************************/

selection sort algorithms


139 760 736 588 434 987 140 118 742 912

118 760 736 588 434 987 140 139 742 912
118 139 736 588 434 987 140 760 742 912
118 139 140 588 434 987 736 760 742 912
118 139 140 434 588 987 736 760 742 912
...
...

(n - i)

#include <stdio.h>
#include "utility.h"

#define     SIZE        10

int *array_min(const int *pa, size_t size)
{
    //const T * --- T*
    int *pmin = (int *)pa;

    for (size_t i = 1; i < size; ++i) {
        if(pa[i] < *pmin)
            pmin = (int *)(pa + i);
    }

    return pmin;
}

void selection_sort(int *p, size_t size)
{
    for (size_t i = 0; i < size - 1; ++i) {
        swap(array_min(p + i, size - i),  p + i);
    }
}

int main()
{
    int a[SIZE];

    randomize();
    set_array_random(a, SIZE);
    print_array(a, SIZE);

    selection_sort(a, SIZE);

    print_array(a, SIZE);
}


/****************************************************/
/****************************************************/

NULL pointer

NULL bir standart makrodur


bir anahatar sözcük değildir
bir isim(identifier) değildir

C nin alttaki bazı kütüphanelerinde NULL makrosu tanımlanmıştır

stdio.h
stddef.h
stdlib.h
time.h
string.h
...



NULL pointer olarak okuyalım soyleyelım

null character
null string
null statement
null directive


NULL pointer herhangi bir türden pointer değişkenine atanabilen, ilk deger olarak verilebilen bir sabit ifadedir

Dğeri NULL pointer olan bir pointer değişken "geçerli durumda" (valid state) olan bir pointer değişken
semantik olarak NULL pointer hiç bir nesnenin adresi olmayan geçerli bir adrestir

değeri NULL pointer olan bir pointer değişken hiçbir nesneyi göstermeyen bir pointer değişkendir
değeri NULL olan bir pointer değişken "dereferencing etmek" Tanımsız davranıstır
NULL pointer + - ++ -- += *= gibi işlemlere sokmayın



Bir adresin pointer olup olmadıgını == yada != operatorleri ile kullanılabilir

#include <stdlib.h>

int main()
{
    int *ptr = NULL;
    double *dtr = NULL;
    char *chrt = NULL;
}


/****************************************************/
/****************************************************/


#include <stdlib.h>

int main()
{
    int x = 3;
    int *p = &x;
    int *ptr = NULL; //değeri hiç bir yeri göstermiyor anlamında dır

}


/****************************************************/
/****************************************************/

#include <stdlib.h>

int main()
{
    int *p;
    //bu yanlıs durum
    //invalid pointer
}


/****************************************************/
/****************************************************/



#include <stdio.h>

int main()
{
    int x = 3;
    int *p = &x;

    if(p == NULL)
        printf("dogrudur\n");
    else
        printf("yanlis\n");

    p = NULL;


    if(p == NULL)
        printf("dogrudur\n");
    else
        printf("yanlis\n");


}


/****************************************************/
/****************************************************/

ikiside aynı ifade

while(ptr != NULL)
{

}


while(ptr)
{

}


//p1 ve p2 NULL pointer degil ise
if(p1 && p2){

}

----------------------------------

aritmatik türden statik ömürlü değişkenlere ilk degeri verilmediginde bunlar hayata 0 degeri ile baslar


aritmatik türden statik ömürlü pointer değişkenlere ilk degeri verilmediginde bunlar hayata NULL pointer degeri ile baslar




#include <stdio.h>

double *dp;

int main()
{
    static int *ptr;

    //bu pointer nesneleri hayata NULL pointer ile geldi

}


/****************************************************/
/****************************************************/


bir pointer değişkenine bir tam sayı degeri atanması C de yanlıs / C++ da sentaks hatası
Ancak
 bir istisna vardır.
 Bir pointer değişkenine tam sayı sabiti 0 atanırsa bu geçerlidir
 bu durumda derleyici 0 tam sayı sabitini NULL pointer a dönüştürür



#include <stdio.h>


int main()
{
    int x = 1;

    int *p = x;
    //C de gecerli ama yanlıstır
    //C++ direk hata sentak hatası

}


/****************************************************/
/****************************************************/


#include <stdio.h>


int main()
{

    int *p = NULL;
    int *p2 = 0;
    //ikiside aynı ifade dir
    //NULL pointer kullanmanızı tavisye ederiz

}


/****************************************************/
/****************************************************/

#include <stdio.h>


int main()
{

    int x = 0;

    int *p = x;
    //C de gecerli ama yanlıs
    //C++ da sentaks hatası
}


/****************************************************/
/****************************************************/


#include <stdio.h>


int main()
{
    int x;
    //x --> int

    int *ptr;
    //int *

    int a[5] = {1, 2, 3};

    //a nın türü  --- int [5]


    double da[20];
    //double [20]

    //cunku arraydecay convertion sonrada olur


}


/****************************************************/
/****************************************************/

#include <stdio.h>


int main()
{
    int a[5] = {1, 2, 3};
    //3 ve 4 elemanlarının degerleri veya hayata 0 degeri ile gelir


    int x ,y;

    int *b[20] = {&x, &y};
    //geri kalan elemnlar NULL pointer olarak hayata baslayacak

}


/****************************************************/
/****************************************************/


#include <stdio.h>
#include "utility.h"

#define     SIZE        10

//bir int dizisinde bir deger (key) arayan
//search_int_array isimli bir fonksiyon tanımlayınız
//bulunursa bulundugu yerin adresi döndürmeli
//bulunamazsa NULL pointer döndürmeli

/*
int *search_int_array(const int *p, size_t size, int val)
{
    for (size_t i = 0; i < size; ++i) {
        if(p[i] == val)
            return (int *)(p+i);
    }

    return NULL;
}
*/

int *search_int_array(const int *p, size_t size, int val)
{
    while(size--){
        if(*p == val)
            return (int *)p;
        ++p;
    }

    return NULL;
}


int main()
{
   int a[SIZE];
   randomize();
   set_array_random(a, SIZE);
   print_array(a, SIZE);

   int val;
   printf("aranacak degeri giriniz : ");
   scanf("%d", &val);

   int *ptr = search_int_array(a, SIZE, val);

   if(ptr == NULL){
       printf("%d degeri bulunamadi\n", val);
   }
   else {
       printf("bulundu.. dizinin %d idsli elemani, %d\n", ptr - a, *ptr);

       *ptr = -1;
       print_array(a, SIZE);
   }

}


/****************************************************/
/****************************************************/


#include <stdio.h>
#include "utility.h"




int main()
{
   int x = 10, y = 20;
   int *p1 = &x, *p2 = NULL;

   swap(p1, p2);
   //NULL pointer swap ta dereferencing edildigi için tanımsız davranıs olur
   //bu durumlara dikkat

}


/****************************************************/
/****************************************************/


time_t time(NULL);
burada NULL time kutuphanesi için anlamlı bir ifadedir


dinamik bellek yönetimi

nesneinn hayatı programcının elinde olan bir bellek yontemine donusecek

pointer değişknelerinin degerini Dinamik omurlu yapacaz

Eger dinamik omurlu pointer nesnelerinin yer almadıgımı durumda NULL pointer atayacagız

/****************************************************/
/****************************************************/

pointer parametreli baz ıstd C fonksiyonları


Yazılarla ilgili std destek veren string.h kutuphanesi

strlen
strchr
strrchr
strcpy
strcat
strcmp
strncmp
strtok
strspn
strcspn
strpbrk
strerror
...


bu fonksiyonların ortak ozelligi parametreleri char * olmasıdır

func(char *)
 --adlgı adrese yazı yerlestirelecek
 //aldıgı adresin yazsının degistirecek


func(const char *)
 --aldıgı yazıyı okuma amaclı


NOt: Bazı fonksiyonun parameteresi sadece const char *, ne boyut ne de baska birşey
    func(const char *)
    --yazı sonunda null terminated karateri var



#include <stdio.h>
#include "utility.h"


#define     SIZE        100

int main()
{
   char str[SIZE];

   printf("bir yazi giriniz : ");
   sgets(str);

   print_str(str);
}


/****************************************************/
/****************************************************/

eger bir fonksiyon

1- aldıgı adresteki diziye bir yazı yerleştirecek ise
2- aldıgı adresteki yazıyı degiştirecek ise


Diziyi taşırma riski var
-taşarsa taşsın! bunu çağıran düşünsü
-asla taşırmasın . fonksiyon dizinin boyutunu da alır ve diziye kontrolü olarak yazar



strlen

size_t strlen(const char *p);



#include <stdio.h>
#include "utility.h"
#include <string.h>

#define     SIZE        100

int main()
{
   char str[SIZE];

   printf("bir yazi giriniz : ");
   sgets(str);

   size_t len = strlen(str);

   printf("len = %zu\n", len);

}


/****************************************************/
/****************************************************/


#include <stdio.h>
#include "utility.h"
#include <string.h>

#define     SIZE        100


void revprint(const char *p)
{
    for (int i = (int)strlen(p)-1;  i >= 0; --i) {
        putchar(p[i]);
    }
    putchar('\n');
}

int main()
{
   char str[SIZE];

   printf("bir yazi giriniz : ");
   sgets(str);

   revprint(str);

}


/****************************************************/
/****************************************************/


#include <stdio.h>
#include "utility.h"
#include <string.h>

#define     SIZE        100

int main()
{
   char str[SIZE];

   printf("bir yazi giriniz : ");
   sgets(str);

   size_t len = strlen(str);

   for (size_t i = 0; i < len; ++i) {
       printf("%s\n", str+i);
   }

   //orhan
   //orhan
   //rhan
   //han
   //an

}


/****************************************************/
/****************************************************/

#include <stdio.h>
#include "utility.h"
#include <string.h>

#define     SIZE        100

size_t strlen1(const char *p)
{
    size_t len = 0;

    while (*p != '\0') {
        ++len;
        ++p;
    }

    return len;
}

size_t strlen2(const char *p)
{
    size_t len = 0;

    while (*p++)
        ++len;
    return len;
}

size_t strlen3(const char *p)
{
    const char *pbeg = p;

    while (*p)
        ++p;

    return (size_t)(p - pbeg);
}

int main()
{
   char str[SIZE];

   printf("bir yazi giriniz : ");
   sgets(str);

   size_t len = strlen3(str);

   printf("len = %zu\n", len);

}


/****************************************************/
/****************************************************/


strchr

bastan sona yazıda karakter arama işlemi

char * strchr(const char *p, int ch)

bulursa buldugu indexteki yerin adresinin donduruyor
bulmazsa NULL pointer dondurur



strrchr

sondan başa yazıda karakter arama işlemi

char * strrchr(const char *p, int ch)

bulursa buldugu indexteki yerin adresinin donduruyor
bulmazsa NULL pointer dondurur


dikkat

her ne kadar yazının sonundaki null karakteri yazının uzunlugna dahil olmasada
strchr ile null karateri de aratabiliriz

#include <stdio.h>
#include "utility.h"
#include <string.h>

#define     SIZE        100


int main()
{
   char str[SIZE];

   printf("bir yazi giriniz : ");
   sgets(str);

   printf("aranacak karateri girin : ");

   int ch = getchar();

   char *p = strchr(str, ch);


   if(p == NULL){
       printf("bulunamadi\n");
   }
   else{
       printf("bulundu (%s) , indeks = %d\n", p, p-str);

   }

   p = strchr(str, '\0');

   *p = 'X';
   *(p+1) = '\0';

   puts(str);
}


/****************************************************/
/****************************************************/

#include <stdio.h>
#include "utility.h"
#include <string.h>

#define     SIZE        100

char *strchr1(const char *p, int c)
{
    while (*p != '\0') {
        if(*p == c){
            return (char *)p;
        }
        ++p;
    }

    if(c == '\0')
        return (char *)p;

    return NULL;
}


int main()
{
   char str[SIZE];

   printf("bir yazi giriniz : ");
   sgets(str);

   printf("aranacak karateri girin : ");

   int ch = getchar();

   char *p = strchr1(str, ch);


   if(p == NULL){
       printf("bulunamadi\n");
   }
   else{
       printf("bulundu (%s) , indeks = %d\n", p, p-str);

   }

   p = strchr1(str, '\0');

   *p = 'X';
   *(p+1) = '\0';

   puts(str);
}


/****************************************************/
/****************************************************/


strrchr

#include <stdio.h>
#include "utility.h"
#include <string.h>

#define     SIZE        100

char *strchr1(const char *p, int c)
{
    while (*p != '\0') {
        if(*p == c){
            return (char *)p;
        }
        ++p;
    }

    if(c == '\0')
        return (char *)p;

    return NULL;
}


int main()
{
   char str[SIZE];

   printf("bir yazi giriniz : ");
   sgets(str);

   printf("aranacak karateri girin : ");

   int ch = getchar();

   printf("arama strchr ile yapiliyor\n");
   char *p = strchr(str, ch);


   if(!p){
       printf("bulunamadi\n");
   }
   else{
       printf("bulundu (%s) , indeks = %d\n", p, p-str);
   }

   printf("arama strrchr ile yapiliyor\n");
   p = strrchr(str, ch);


   if(!p){
       printf("bulunamadi\n");
   }
   else{
       printf("bulundu (%s) , indeks = %d\n", p, p-str);
   }

}


/****************************************************/
/****************************************************/

#include <stdio.h>
#include "utility.h"
#include <string.h>

#define     SIZE        100

char *strchr1(const char *p, int c)
{
    while (*p != '\0') {
        if(*p == c){
            return (char *)p;
        }
        ++p;
    }

    if(c == '\0')
        return (char *)p;

    return NULL;
}


char *strrchr1(const char *p, int c)
{
    const char *pfound = NULL;

    while (*p != '\0') {
        if(*p == c){
            pfound = p;
        }
        ++p;
    }

    if(c == '\0')
        return (char *)p;

    return (char *)pfound;
}


int main()
{
   char str[SIZE];

   printf("bir yazi giriniz : ");
   sgets(str);

   printf("aranacak karateri girin : ");

   int ch = getchar();

   printf("arama strchr ile yapiliyor\n");
   char *p = strchr1(str, ch);


   if(!p){
       printf("bulunamadi\n");
   }
   else{
       printf("bulundu (%s) , indeks = %d\n", p, p-str);
   }

   printf("arama strrchr ile yapiliyor\n");
   p = strrchr1(str, ch);


   if(!p){
       printf("bulunamadi\n");
   }
   else{
       printf("bulundu (%s) , indeks = %d\n", p, p-str);
   }

}


/****************************************************/
/****************************************************/


HomeWork

fonksiyon tanıtacam kodunu siz yazacaksınız


char *strstr(const char *p, const char *pkey);

yazı içinde yazı aranıyor
eger yazı bulunursa bulundugu adresin baslangıc adresını dondurur


orhan ozturk

han -->  orhan  h karaterinini adresinin dondurecek


#include <stdio.h>
#include "utility.h"
#include <string.h>

#define     SIZE        100




int main()
{
   char s1[SIZE];
   char s2[SIZE];

   printf("icinde atama yapilacak yazi giriniz : ");
   sgets(s1);
   printf("aranacak yazi giriniz : ");
   sgets(s2);

   char *p = strstr(s1, s2);

    if(p){
        printf("buundu ... (%s)  indeks = %d\n", p, p-s1);
    }
    else{
        printf("bulunamadi\n");
    }

}


/****************************************************/
/****************************************************/


#include <stdio.h>
#include "utility.h"
#include <string.h>

#define     SIZE        100

//mulakat sorusu

//orhan ozturk mehmet dogan hasan uygur
//orhan ozturk mehmet dogan !!!!! uygur

//s1 yazsıını icindeki hasan yazının oldugu yeri !!!!! karakteri ile dolduracaz

int main()
{
   char s1[SIZE];
   char s2[SIZE];

   printf("icinde atama yapilacak yazi giriniz : ");
   sgets(s1);
   printf("aranacak yazi giriniz : ");
   sgets(s2);

   char *p = strstr(s1, s2);

    if(p){
        size_t len = strlen(s2);

        while (len--) {
            *p++ = '!';
        }

        printf("buundu ... (%s)\n", s1);
    }
    else{
        printf("bulunamadi\n");
    }

}


/****************************************************/
/****************************************************/

yazının sonun daki null karaterine nasıl gideriz


1.

while(*p)
   ++p;

2
while(*p++)
   ;
--p;

3.
p += strlen(p);


4
p = strchr(p, '\0');


/****************************************************/
/****************************************************/


NULL pointer / null character

NULL bir macro
ama bir adres sabiti
pointer değişkenlere atanır


null character
'\0'

null character bir tam sayı sabiti
bir yazının sonlanıyor mu anlamına galiyor, yazıın sonunu kestreblmek için kullanılır

//bu ikisi aynı anlamdadır
if(ptr != NULL && *ptr != '\0')

if(ptr && *ptr)

//bu sekildede yazabılırız
if(ptr == NULL || *ptr == '\0')

if(!ptr || !*ptr)


********************************************************

strcpy


kopyalama işlemleri için kullanılır

char *strcpy(char *pdest, const char *psource);

strcpy kopyalama yapılan yerin adresini dondurur




#include <stdio.h>
#include "utility.h"
#include <string.h>

#define     SIZE        100

int main()
{
   char dest[SIZE];
   char source[SIZE];

   printf("bir yazi girin : ");
   sgets(source);

   printf("|%s|\n", source);
   strcpy(dest, source);
   printf("|%s|\n", dest);

}


/****************************************************/
/****************************************************/





#include <stdio.h>
#include "utility.h"
#include <string.h>

#define     SIZE        100

int main()
{
   char dest[5];
   char source[SIZE];

   printf("bir yazi girin : "); //mehmet adigüzel
   sgets(source);

   printf("|%s|\n", source);
   strcpy(dest, source); //tanımsız davranış olur
   printf("|%s|\n", dest);

}


/****************************************************/
/****************************************************/


#include <stdio.h>
#include "utility.h"
#include <string.h>

#define     SIZE        100

char *strcpy1(char *pdest, const char *psource)
{
    char *pret = pdest;

    while (*psource != '\0') {
        *pdest = *psource;
        ++pdest;
        ++psource;
    }

    *pdest = '\0';

    return pret;
}

char *strcpy2(char *pdest, const char *psource)
{
    char *pret = pdest;

    /*
    while (*psource != '\0') {
        *pdest++ = *psource++;
    }
    */

    while(*pdest++ = *psource++)
        ;

    return pret;
}

int main()
{
   char dest[SIZE];
   char source[SIZE];

   printf("bir yazi girin : ");
   sgets(source);

   printf("|%s|\n", source);
   strcpy2(dest, source);
   printf("|%s|\n", dest);


   puts(strcpy2(dest, source));
}


/****************************************************/
/****************************************************/

dikkatttt

strcpy

kesişen (overlapped) bloklar --> tanımsız davranış

#include <stdio.h>
#include "utility.h"
#include <string.h>

#define     SIZE        100

int main()
{
   char str[SIZE]; //ozturk ozozturk
   printf("bir yazi girin : ");
   sgets(str);

   //overlapped
   strcpy(str+2, str); //tanımsız davranıs

   printf("%s\n", str);
}


/****************************************************/
/****************************************************/



strcat işlevi


bir yazının souna bir yazı ekleme

append --> sonuna ekleme
concatanate -> birleştirme

char *strcat(char *pdest, const char *psource);

yazıyı birleştirilen yazıların adreslerini doner





#include <stdio.h>
#include "utility.h"
#include <string.h>

#define     SIZE        100

int main()
{
   char s1[SIZE];
   char s2[SIZE];

   printf("iki yazi girin : ");
   scanf("%s%s", s1, s2);
   printf("(%s)(%s)\n", s1, s2);

   strcat(s1, s2);
   printf("(%s)(%s)\n", s1, s2);

   puts(strcat(s1, s2));

}


/****************************************************/
/****************************************************/

#include <stdio.h>
#include "utility.h"
#include <string.h>

#define     SIZE        100

int main()
{
   char s1[SIZE];
   char s2[SIZE];
   char s3[SIZE];

   printf("iki yazi girin : ");
   scanf("%s%s", s1, s2);

   //s3 dizsinde s1 + s2 orhan ozturk

   /*
    strcpy(s3, s1);
    strcat(s3, s2);
    */
    strcat(strcpy(s3, s1), s2);


    printf("(%s) + (%s) = (%s)", s1, s2, s3);
}


/****************************************************/
/****************************************************/


#include <stdio.h>
#include "utility.h"
#include <string.h>

#define     SIZE        100

char *strcat1(char *p1, const char *p2)
{
    char *pret = p1;

    while (*p1)
        ++p1;

    while(*p1++ = *p2++)
        ;

    return pret;
}

char *strcat2(char *p1, const char *p2)
{
    strcpy(p1 + strlen(p1), p2);

    return p1;
}

char *strcat3(char *p1, const char *p2)
{
    strcpy(strchr(p1, '\0'), p2);

    return p1;
}

int main()
{
    char s1[SIZE];
    char s2[SIZE];

    printf("iki yazi girin : ");
    scanf("%s%s", s1, s2);
    printf("(%s)(%s)\n", s1, s2);

    strcat3(s1, s2);
    printf("(%s)(%s)\n", s1, s2);

}


/****************************************************/
/****************************************************/


yazıların karsılastırılması


int compare


retcal > 0  ilk yazı buyuk
retcal < 0  ikinci yazı buyuk
retcal == 0  iki yazı eşit



strcmp

int strcmp(const char *p1, const char *p2);

lexicographical compare algprtiması ile karsılaştırma yapar


veri yapıları

1 5 3 6 7 8

1 5 3 6 7 8

bu iki veri yapsıı eşit olması için hem boyları hemde elemnaları eşit olması gerekyor

1 5 3 6 7 8

2

karşılaştırma
lemanları tek tek karsılastırıyor
2 için daha buyuk sonucu donuyor

1 5 3 6 7 8

1 5 3

elemnalrı karsılastırdım 1 5 3  daha buyuk



#include <stdio.h>
#include "utility.h"
#include <string.h>

#define     SIZE        100

int main()
{
    char s1[SIZE];
    char s2[SIZE];

    printf("iki isim girin : ");
    scanf("%s%s", s1, s2);

    int cmp_result = strcmp(s1, s2);

    if(cmp_result > 0)
        printf("(%s) > (%s)\n", s1, s2);
    else if(cmp_result < 0)
        printf("(%s) < (%s)\n", s1, s2);
    else
        printf("(%s) == (%s)\n", s1, s2);
}


/****************************************************/
/****************************************************/



#include <stdio.h>
#include "utility.h"
#include <string.h>

#define     SIZE        100

int main()
{
    char s1[SIZE];
    char s2[SIZE];

    printf("iki isim girin : ");
    scanf("%s%s", s1, s2);

    /*
   if(strcmp(s1, s2) == 0)
       ;
   */

    if(!strcmp(s1, s2))
        printf("evet esit\n");
    else
        printf("hayir esit degil\n");

}


/****************************************************/
/****************************************************/


#include <stdio.h>
#include "utility.h"
#include <string.h>

#define     SIZE        100

int mystrcmp(const char *p1, const char *p2)
{
    while (*p1 == *p2) {
        if(*p1 == '\0')
            return 0;

        ++p1;
        ++p2;
    }

    return *p1 - *p2;
}


int main()
{
    char s1[SIZE];
    char s2[SIZE];

    printf("iki isim girin : ");
    scanf("%s%s", s1, s2);

    /*
   if(strcmp(s1, s2) == 0)
       ;
   */

    if(!mystrcmp(s1, s2))
        printf("evet esit\n");
    else
        printf("hayir esit degil\n");

}


/****************************************************/
/****************************************************/

#include <stdio.h>
#include "utility.h"
#include <string.h>

#define     SIZE        100

//orhanozturk
//ozturk ile biteni kontrol eden fonksiyon yazmak isityorum


int ends_with(const char *p1, const char *p2)
{
    size_t len1 = strlen(p1);
    size_t len2 = strlen(p2);

    if(len1 < len2)
        return 0;

    return !strcmp(p1 + len1 - len2, p2);
}


int main()
{
    char s1[SIZE];
    char s2[SIZE];

    printf("birinci yaziyi girin : ");
    sgets(s1);

    printf("ikinci yaziyi girin : ");
    sgets(s2);

    if(ends_with(s1, s2))
        printf("evet var sonunda\n");
    else
        printf("hayir yok sonunda\n");


}


/****************************************************/
/****************************************************/



#include <stdio.h>
#include "utility.h"
#include <string.h>

#define     SIZE        100

int main()
{
    char s1[SIZE];
    char s2[SIZE];

    printf("birinci yaziyi girin : ");
    sgets(s1);

    printf("ikinci yaziyi girin : ");
    sgets(s2);

    //dikkat
    //iki yazıınn baslandıg adresini karsılastırırsınız
    //boyle bir karsılastırma yok c de
    if(s1 == s2) //yanlıs durum karsılastırma
        printf("evet \n");
    else
        printf("hayir\n");


}


/****************************************************/
/****************************************************/


#include <stdio.h>
#include "utility.h"
#include <string.h>

#define     SIZE        100

//stricmp
//orhan ORHAN
//buyuk kuck farketmeksızin karsılastıma işelmi yapar


int main()
{
    char s1[SIZE];
    char s2[SIZE];

    printf("birinci yaziyi girin : ");
    sgets(s1);

    printf("ikinci yaziyi girin : ");
    sgets(s2);

    if(!stricmp(s1, s2))
        printf("evet \n");
    else
        printf("hayir\n");


}


/****************************************************/
/****************************************************/


#include <stdio.h>
#include "utility.h"
#include <string.h>
#include <ctype.h>

#define     SIZE        100

//stricmp
//kendimiz yazalım

int mystricmp(const char *p1, const char *p2)
{
    while (toupper(*p1) == toupper(*p2)) {
        if(*p1 == '\0')
            return 0;
        ++p1;
        ++p2;
    }


    return toupper(*p1) - toupper(*p2);
}


int main()
{
    char s1[SIZE];
    char s2[SIZE];

    printf("birinci yaziyi girin : ");
    sgets(s1);

    printf("ikinci yaziyi girin : ");
    sgets(s2);

    if(!mystricmp(s1, s2))
        printf("evet \n");
    else
        printf("hayir\n");


}


/****************************************************/
/****************************************************/

strpbrk

bir yazıda karakter aranıyor

 aeiou  aranacak karaterler

malatya --> a donuyor
ordu ---> o donuyor


char *strpbrk(const char *p1, const char *p2);






#include <stdio.h>
#include "utility.h"
#include <string.h>
#include <ctype.h>

#define     SIZE        100



int main()
{
    char str[SIZE];
    char letters[SIZE];

    printf("icinde arama yapilacak yaziyi girin : ");
    sgets(str);

    printf("aranacak karaterleri igirin : ");
    sgets(letters);

    printf("(%s) yazisinda (%s) katerlerinden biri aranyiyor\n", str, letters);
    char *p= strpbrk(str, letters);

    if(p){
        printf("bulundu .. %c, index %d\n", *p, p - str);
    } else {
        printf("bulunamadi\n");
    }





}


/****************************************************/
/****************************************************/



#include <stdio.h>
#include "utility.h"
#include <string.h>
#include <ctype.h>

#define     SIZE        100

char *mystrpbrk(const char *str, const char *pchars)
{
    for (int i = 0; str[i] != '\0'; ++i) {
        if(strchr(pchars, str[i])){
            return (char *)str + i;
        }
    }

    return NULL;
}


int main()
{
    char str[SIZE];
    char letters[SIZE];

    printf("icinde arama yapilacak yaziyi girin : ");
    sgets(str);

    printf("aranacak karaterleri igirin : ");
    sgets(letters);

    printf("(%s) yazisinda (%s) katerlerinden biri aranyiyor\n", str, letters);
    char *p= mystrpbrk(str, letters);

    if(p){
        printf("bulundu .. %c, index %d\n", *p, p - str);
    } else {
        printf("bulunamadi\n");
    }

}


/****************************************************/
/****************************************************/




string literalleri


bunlar aslında elemanları char türden olan bir dizidir

"orhan ozturk" --> derleyici tarafıdnan olusturlan bir 12 elemanlı dizi
null karaterli olusturur


derleyici string literallerini array decay'e cevirir





#include <stdio.h>
#include "utility.h"
#include <string.h>
#include <ctype.h>

#define     SIZE        100



int main()
{
    putchar(*"orhan");
    putchar('\n');
    putchar("orhan"[3]);
    putchar('\n');
    putchar(2["orhan"]);
    putchar('\n');

    printf("%zu\n", strlen("orhan"));
    printf("%p\n", "orhan");

}


/****************************************************/
/****************************************************/

#include <stdio.h>
#include "utility.h"
#include <string.h>
#include <ctype.h>

#define     SIZE        100

//surekli aynı adres veriri
//cunku string literalleri stak omurludur

int main()
{
    for (int i = 0; i < 10; ++i) {
        printf("%p\n", "orhan");
    }

}


/****************************************************/
/****************************************************/




#include <stdio.h>
#include "utility.h"
#include <string.h>
#include <ctype.h>

#define     SIZE        100

//burada string litralleri statik omurlu oldugu icin
//tanımsız davranıs olusturmaz

char *get_day_name(int weekday)
{
    switch (weekday) {
    case 1: return "pazartesi";
    case 2: return "sali";
    case 3: return "carsamba";
    case 4: return "persembe";
    case 5: return "cuma";
    case 6: return "cumartesi";
    case 7: return "pazar";
    }

    return "gecersiz gun";
}

int main()
{
    int wd;

    printf("haftanin kacinci gunu : ");
    scanf("%d", &wd);

    printf("haftanin %d. gunu %s\n", wd, get_day_name(wd));

}


/****************************************************/
/****************************************************/


"alican" bu ifadenin türü


C  de char [7]
C++ const char [7]


C dilinde string literalleri tür olarak const olmasada dizi olmaırna karsın
bir string literalini değiştirme girişimi "tanımsız davranıstır"





#include <stdio.h>
#include "utility.h"
#include <string.h>
#include <ctype.h>

#define     SIZE        100

int main()
{
    char *psw = "kapi";


    *psw = 'X'; //tanımsz davranıs olusturur
}


/****************************************************/
/****************************************************/
#include <stdio.h>
#include "utility.h"
#include <string.h>
#include <ctype.h>

#define     SIZE        100

int main()
{
    char *p = "kapi";

    *p = 'm'; //tanısmız davranıs
    p[3] = 'a'; //tanısmız davranıs


}


/****************************************************/
/****************************************************/



#include <stdio.h>
#include "utility.h"
#include <string.h>
#include <ctype.h>

#define     SIZE        100

int main()
{
    const char *p = "kapi";

    *p = 'm'; //artık gecerli durum olmaz
    p[3] = 'a'; //artık gecerli durum olmaz


}


/****************************************************/
/****************************************************/


#include <stdio.h>
#include "utility.h"
#include <string.h>
#include <ctype.h>

#define     SIZE        100

//mulakat soru

int main()
{
    //iki si arasındaki fark nedir
    char str[] = "orhan"; //bu ilk deger ver sentaksı
    //burada

    str[0] = 'X';


    char *p = "ozturk"; //bu ise statik string literal programın basından sonuna kadar omru devam eder
    //degistirlemez tanımsız davranıs olur

}


/****************************************************/
/****************************************************/


#include <stdio.h>
#include "utility.h"
#include <string.h>
#include <ctype.h>

#define     SIZE        100

//mulakat soru

int main()
{
    const int x = 10;

    int *p = (int *)&x; //C de gecerli

    *p = 20; //tanımsız davranıs olusur
}


/****************************************************/
/****************************************************/


#include <stdio.h>
#include "utility.h"
#include <string.h>
#include <ctype.h>

#define     SIZE        100

//mulakat soru

int main()
{
    char *p = (char *)"orhan";

    *p = 'X'; //tanımsız davranıs olsuru

    //asla ve asla string literallerini degistirme durumunda bulunmayın
}


/****************************************************/
/****************************************************/


#include <stdio.h>
#include "utility.h"
#include <string.h>
#include <ctype.h>

#define     SIZE        100


int main()
{
    //unspecified behavior
    //derleyici buna documante etmek zorunda degil
    //hep aynı kodu uremek zorunda da degildir

    char *p1 = "orhan";
    char *p2 = "orhan";

    //derleyici bu string literalleri aynı olsada aynı yerde veya farkı yerde tutabilirim tamamen bana baglı dikkat ol

    //tanısmız davranıs
    if(p1 == p2){
        printf("evet esit\n");
    }
     else {
        printf("hayir esit degil\n");
    }

}


/****************************************************/
/****************************************************/


özdeş string literalleri

a- tek bir dizi olarak
b- farklı dizi olarak

derleyici tarafından tutalabilir --




#include <stdio.h>
#include "utility.h"
#include <string.h>
#include <ctype.h>

#define     SIZE        100


int main()
{
    char *psw = "cikita";

    //burada adres karsılastırması
    //bunu yapmayın
    if(psw == "cikita"){

    }


    //bu sekilde yapınıyız
    if(strcmp(psw, "cikita")){

    }

}


/****************************************************/
/****************************************************/

#include <stdio.h>
#include "utility.h"
#include <string.h>
#include <ctype.h>

#define     SIZE        100

void func(char *);
void fooo(const char *);

int main()
{
   func("ceyhun"); //tanımsız davranıs
}


/****************************************************/
/****************************************************/


#include <stdio.h>
#include "utility.h"
#include <string.h>
#include <ctype.h>

#define     SIZE        100


int main()
{
   char str[100] = "orhan";

   //gecerli durum
   if(!strcmp(str, "orhan"))
   {

   }

}


/****************************************************/
/****************************************************/

#include <stdio.h>
#include "utility.h"
#include <string.h>
#include <ctype.h>

#define     SIZE        100


int main()
{
   char name[100];


   //oyle bir kod yazındakı name dizisi suleyman yazısını tuutsub


   strcpy(name, "suleyman"); //bu sekıl yapmlıyız

}


/****************************************************/
/****************************************************/

#include <stdio.h>
#include "utility.h"
#include <string.h>
#include <ctype.h>

#define     SIZE        100


int main()
{
   char old_file_name[SIZE];
   char new_file_name[SIZE];

   printf("dosyanin ismini girin : ");
   scanf("%s", old_file_name);
   strcpy(new_file_name, old_file_name);


   //eger dosyaının uzantısı yok ise dosya uzantısı .dat oalcak
   //dosyanın uzantısı .xls ise dosyanın uzantısı .txt oalcak
   //dosya uznatısı .dox ise dosya uzantısı kalkacak
   //dosya uzantısı .jpeg olarak degistirlecek diger kalan durumlarda


   char *p = strrchr(new_file_name, '.');

   if(!p){
       strcat(new_file_name, ".dat");
   }
   else if(!strcmp(p, ".xls")){
       strcpy(p, ".txt");
   }
   else if(!strcmp(p, ".doc"))
   {
       *p = '\0';
   }
   else {
        strcpy(p, ".jpeg");
   }

   printf("(%s) ---> (%s) \n", old_file_name, new_file_name);


}


/****************************************************/
/****************************************************/



#include <stdio.h>
#include "utility.h"
#include <string.h>
#include <ctype.h>

#define     SIZE        100


int main()
{
   printf("\x42URS\x41\xA");
   printf("\102\101\102\101\012");
}


/****************************************************/
/****************************************************/


#include <stdio.h>
#include "utility.h"
#include <string.h>
#include <ctype.h>

#define     SIZE        100


int main()
{
   printf("\\yavuz\\\n");
   printf("\"yavuz\"\n");
}


/****************************************************/
/****************************************************/



#include <stdio.h>
#include "utility.h"
#include <string.h>
#include <ctype.h>

#define     SIZE        100


int main()
{
    const char *p = "\102\101\102\101\012";

    printf("uzunluk = %zu\n", strlen(p));
}


/****************************************************/
/****************************************************/




#include <stdio.h>
#include "utility.h"
#include <string.h>
#include <ctype.h>

#define     SIZE        100


int main()
{
    printf("%d yavuz\n", 3);
    printf("%3d yavuz\n", 3);
}


/****************************************************/
/****************************************************/

#include <stdio.h>
#include "utility.h"
#include <string.h>
#include <ctype.h>

#define     SIZE        100


int main()
{
    //boyle bir yazı sabiti kullanamayız
    "burda bir yazi sabiti var
    ve alttan devam ediyor";

}


/****************************************************/
/****************************************************/



#include <stdio.h>
#include "utility.h"
#include <string.h>
#include <ctype.h>

#define     SIZE        100


int main()
{

    //fakat tercih edilen yontem degil

    const char *p = "burda bir yazi sabiti var \
ve alttan devam ediyor";


    puts(p);
}


/****************************************************/
/****************************************************/

#include <stdio.h>
#include "utility.h"
#include <string.h>
#include <ctype.h>

#define     SIZE        100


int main()
{

    //fakat tercih edilen yontem degil

    const char *p = "ahmet"
            "hasan"         "orhan"
            "halis"  "recep"  "sema";

    //derleyici compile t,imeda string literallerini birleştirir

    puts(p);
}


/****************************************************/
/****************************************************/


#include <stdio.h>
#include "utility.h"
#include <string.h>
#include <ctype.h>

#define     SIZE        100


int main()
{

    printf("[1] Kayit ekle\n"
           "[2] Kayit duzen\n"
            "[3] Kayit yenile\n"
            "[4] Kayit sil\n"
            "[5] Kayit kapat\n"
            );

}


/****************************************************/
/****************************************************/


sizeof
operator
keyword
compile time opeatoru


strlen
fonksiyon
identifier


#include <stdio.h>
#include "utility.h"
#include <string.h>
#include <ctype.h>

#define     SIZE        100


int main()
{

  const char *p = "orhan";

  printf("[1] %zu\n", sizeof p);
  printf("[1] %zu\n", sizeof *p);
  printf("[1] %zu\n", sizeof p[0]);
  printf("[1] %zu\n", sizeof "orhan"); //6 elemanlu cahr dizi
  printf("[1] %zu\n", strlen(p));
  printf("[1] %zu\n", strlen(""));
  printf("[1] %zu\n", strlen("orhan"));
  printf("[1] %zu\n", sizeof ++p); //etkisi yok
  printf("[1] %zu\n", strlen(p));

}


/****************************************************/
/****************************************************/



#include <stdio.h>
#include "utility.h"
#include <string.h>
#include <ctype.h>

#define     SIZE        100


int main()
{

  const char *p1 = "can"; //4 karakterli
  const char *p2 = "an";
  const char *p3 = "n";
    const char *p4 = "";
}


/****************************************************/
/****************************************************/


pointer arrays -- gösterici dizileri





#include <stdio.h>
#include "utility.h"
#include <string.h>
#include <ctype.h>

#define     SIZE        100


int main()
{
    int x = 10;
    int a[10];
    int *ptr;

    int *p[10];

}


/****************************************************/
/****************************************************/


#include <stdio.h>
#include "utility.h"
#include <string.h>
#include <ctype.h>

#define     SIZE        100

int x = 12;
int y = 13;
int z = 14;

int main()
{
    int *p[3] = {&x, &y, &z};

    printf("p[0] = %p\n", p[0]);
    printf("&x = %p\n", &x);
    *p[0] = 99;
    printf("x = %d\n", x);
    ++*p[0];
    printf("x = %d\n", x);
}


/****************************************************/
/****************************************************/


#include <stdio.h>
#include "utility.h"
#include <string.h>
#include <ctype.h>

#define     SIZE        100

int x = 12;
int y = 13;
int z = 14;
int t = 40;

int main()
{
    int *p[] = {&x, &y, &z, &t};

    for (size_t i = 0; i < asize(p); ++i) {
        ++*p[i];
    }

    for (size_t i = 0; i < asize(p); ++i) {
        printf("%d\n", *p[i]);
    }
}


/****************************************************/
/****************************************************/


#include <stdio.h>
#include "utility.h"
#include <string.h>
#include <ctype.h>

#define     SIZE        100


int main()
{
    int x = 10;
    int y = 20;
    int *p[10];
    int *ptr = &y;

    p[0] = &x;
    p[1] = ptr;
    p[2] = p[0];
    p[3] = NULL;
}


/****************************************************/
/****************************************************/

#include <stdio.h>
#include "utility.h"
#include <string.h>
#include <ctype.h>

#define     SIZE        100

int *ptr; //NULL
int *p[5]; //NULL arrays

int main()
{
    printf("%d\n", p[0] == NULL);
}


/****************************************************/
/****************************************************/

#include <stdio.h>
#include "utility.h"
#include <string.h>
#include <ctype.h>

#define     SIZE        100

int x = 10;
int y = 20;
int z = 30;

int main()
{
    int *p[5] = {&x, &y, &z}; //bos kalanları NULL ile doldurur
    printf("%d\n", p[4] == NULL);
}


/****************************************************/
/****************************************************/




#include <stdio.h>
#include "utility.h"
#include <string.h>
#include <ctype.h>

#define     SIZE        100

int a[] = {1, 2, 3, 4};

int main()
{
    int *p[3] = {a}; //{a , NULL, NULL}

    ++p[0][2];

    print_array(a, 4);
}


/****************************************************/
/****************************************************/


#include <stdio.h>
#include "utility.h"
#include <string.h>
#include <ctype.h>

#define     SIZE        100

int a[] = {1, 2, 3, 4};
int b[] = {10, 20, 30 , 40};
int c[] = {-10, -20, -30 , -40};

int main()
{
    int *p[3] = {a, b, c}; //{a , NULL, NULL}

    ++p[1];//b nin 2 ci elemanı
    ++*p[1]; // b nin 20 deger i 21

    print_array(b, 4);
}


/****************************************************/
/****************************************************/


#include <stdio.h>
#include "utility.h"
#include <string.h>
#include <ctype.h>

#define     SIZE        100

int main()
{
    char *pdays[] = {"pazartesi", "sali", "carsamba", "persembe", "cuma", "cumartesi", "pazar"};

    for (size_t i = 0; i < asize(pdays); ++i) {
        puts(pdays[i]);
    }
}


/****************************************************/
/****************************************************/


#include <stdio.h>
#include "utility.h"
#include <string.h>
#include <ctype.h>

#define     SIZE        100

int main()
{
    char *pdays[] = {"pazartesi", "sali", "carsamba", "persembe", "cuma", "cumartesi", "pazar"};

    for (size_t i = 0; i < asize(pdays); ++i) {
        printf("%p  --->  %s\n", pdays[i], pdays[i]);
    }

    putchar('\n');
}


/****************************************************/
/****************************************************/

#include <stdio.h>
#include "utility.h"
#include <string.h>
#include <ctype.h>

#define     SIZE        100

int main()
{
    char *pdays[] = {"pazartesi", "sali", "carsamba", "persembe", "cuma", "cumartesi", "pazar"};

    for (size_t i = 0; i < asize(pdays); ++i) {
        printf("%-12s  --->  %zu\n", pdays[i], strlen(pdays[i]));
    }

    putchar('\n');
}


/****************************************************/
/****************************************************/


#include <stdio.h>
#include "utility.h"
#include <string.h>
#include <ctype.h>

#define     SIZE        100

int main()
{
    char str[] = "orhan";

    printf("%zu \n", sizeof *str);
    printf("%zu \n", sizeof str);
}


/****************************************************/
/****************************************************/





#include <stdio.h>
#include "utility.h"
#include <string.h>
#include <ctype.h>

#define     SIZE        100

int main()
{
    char *pdays[] = {"pazartesi", "sali", "carsamba", "persembe", "cuma", "cumartesi", "pazar"};

    *pdays[4] = 'D'; //tanımsız davranıs olsuturur

    //bu yzuden dısıyı bu sekılde const tanımlayın
   //const char *pdays[] = {"pazartesi", "sali", "carsamba", "persembe", "cuma", "cumartesi", "pazar"};
}


/****************************************************/
/****************************************************/


#include <stdio.h>
#include "utility.h"
#include <string.h>
#include <ctype.h>

#define     SIZE        100

int x = 10;
int z = 10;
int y = 10;
int t = 10;

int main()
{
    int *const p[] = {&x, &y, &z, &t};

    p[2] = &z; //gecersiz
    *p[1] = 44; //gecerli
}


/****************************************************/
/****************************************************/




#include <stdio.h>
#include "utility.h"
#include <string.h>
#include <ctype.h>

#define     SIZE        100

int x = 10;
int z = 10;
int y = 10;
int t = 10;

int main()
{
    const int * p[] = {&x, &y, &z, &t};

    p[2] = &z; //gecerli
    *p[1] = 44; //gecersiz
}


/****************************************************/
/****************************************************/
#include <stdio.h>
#include "utility.h"
#include <string.h>
#include <ctype.h>

#define     SIZE        100

int x = 10;
int z = 10;
int y = 10;
int t = 10;

int main()
{
    const int * const p[] = {&x, &y, &z, &t};

    p[2] = &z; //gecersiz
    *p[1] = 44; //gecersiz
}


/****************************************************/
/****************************************************/


#include <stdio.h>
#include "utility.h"
#include <string.h>
#include <ctype.h>

#define     SIZE        100

int main()
{
    const char *p[] = {
        "orhan",         "esma",          "busra",         "azize",         "ahmet",        "nermin",        "cemile",
        "naciye",       "meryem",          "sergen",        "cengiz",       "negun",        "melise",          "mahmur",
        "halis",        "recep",            "sema",         "elif",         "murat",        "melike",          "rumeysa",
        "okan",         "kazim",          "neriman",        "aysun",        "kemal",        "hacer",           "muhammed",
        "nuran",        "fatma",           "engin",         "fikret",       "musatafa",      "yusuf",            "omer",
    };

    printf("%zu\n", asize(p));
    printf("%zu\n", sizeof (p) / sizeof (*p));

}


/****************************************************/
/****************************************************/



#include <stdio.h>
#include "utility.h"
#include <string.h>
#include <ctype.h>

#define     SIZE        100

int main()
{
    const char *p[] = {
        "orhan",         "esma",          "busra",         "azize",         "ahmet",        "nermin",        "cemile",
        "naciye",       "meryem",          "sergen",        "cengiz",       "negun",        "melise",          "mahmur",
        "halis",        "recep",            "sema",         "elif",         "murat",        "melike",          "rumeysa",
        "okan",         "kazim",          "neriman",        "aysun",        "kemal",        "hacer",           "muhammed",
        "nuran",        "fatma",           "engin",         "fikret",       "musatafa",      "yusuf",            "omer",
    };

    for (size_t i = 0; i < asize(p); ++i) {
        printf("%s  ", p[i]);
    }

    putchar('\n');


}


/****************************************************/
/****************************************************/



#include <stdio.h>
#include "utility.h"
#include <string.h>
#include <ctype.h>

#define     SIZE        100

int main()
{
    const char *p[] = {
        "orhan",         "esma",          "busra",         "azize",         "ahmet",        "nermin",        "cemile",
        "naciye",       "meryem",          "sergen",        "cengiz",       "negun",        "melise",          "mahmur",
        "halis",        "recep",            "sema",         "elif",         "murat",        "melike",          "rumeysa",
        "okan",         "kazim",          "neriman",        "aysun",        "kemal",        "hacer",           "muhammed",
        "nuran",        "fatma",           "engin",         "fikret",       "musatafa",      "yusuf",            "omer",
    };

    for (size_t i = 0; i < asize(p); ++i) {
        printf("%s  ", p[i]);
    }

    size_t len;
    printf("uzunluk degeri girin : ");
    scanf("%zu", &len);

    for (size_t i = 0; i < asize(p); ++i) {
        if(strlen(p[i]) == len)
            printf("%s  ", p[i]);
    }

}


/****************************************************/
/****************************************************/




#include <stdio.h>
#include "utility.h"
#include <string.h>
#include <ctype.h>

#define     SIZE        100

int main()
{
    const char *p[] = {
        "orhan",         "esma",          "busra",         "azize",         "ahmet",        "nermin",        "cemile",
        "naciye",       "meryem",          "sergen",        "cengiz",       "negun",        "melise",          "mahmur",
        "halis",        "recep",            "sema",         "elif",         "murat",        "melike",          "rumeysa",
        "okan",         "kazim",          "neriman",        "aysun",        "kemal",        "hacer",           "muhammed",
        "nuran",        "fatma",           "engin",         "fikret",       "musatafa",      "yusuf",            "omer",
    };


    //isimlerin ilk karaterlerinin yazdırın
    for (size_t i = 0; i < asize(p); ++i) {
            //printf("%c  ", p[i][0]);
            printf("%c  ", *p[i]);
    }

}


/****************************************************/
/****************************************************/

#include <stdio.h>
#include "utility.h"
#include <string.h>
#include <ctype.h>

#define     SIZE        100

int main()
{
    const char *p[] = {
        "orhan",         "esma",          "busra",         "azize",         "ahmet",        "nermin",        "cemile",
        "naciye",       "meryem",          "sergen",        "cengiz",       "negun",        "melise",          "mahmur",
        "halis",        "recep",            "sema",         "elif",         "murat",        "melike",          "rumeysa",
        "okan",         "kazim",          "neriman",        "aysun",        "kemal",        "hacer",           "muhammed",
        "nuran",        "fatma",           "engin",         "fikret",       "musatafa",      "yusuf",            "omer",
    };


    //isimlerin son karaterlerinin yazdırın
    for (size_t i = 0; i < asize(p); ++i) {
            printf("%c  ", p[i][strlen(p[i]) -1]);
    }

}


/****************************************************/
/****************************************************/


#include <stdio.h>
#include "utility.h"
#include <string.h>
#include <ctype.h>

#define     SIZE        100

int main()
{
    const char *p[] = {
        "orhan",         "esma",          "busra",         "azize",         "ahmet",        "nermin",        "cemile",
        "naciye",       "meryem",          "sergen",        "cengiz",       "negun",        "melise",          "mahmur",
        "halis",        "recep",            "sema",         "elif",         "murat",        "melike",          "rumeysa",
        "okan",         "kazim",          "neriman",        "aysun",        "kemal",        "hacer",           "muhammed",
        "nuran",        "fatma",           "engin",         "fikret",       "musatafa",      "yusuf",            "omer",
    };


    int c;
    printf("bir karater girin :");
    c = getchar();

    for (size_t i = 0; i < asize(p); ++i) {
        if(p[i][0] == c)
            printf("%s  ", p[i]);
    }

}


/****************************************************/
/****************************************************/


#include <stdio.h>
#include "utility.h"
#include <string.h>
#include <ctype.h>

#define     SIZE        100

int main()
{
    const char *p[] = {
        "orhan",         "esma",          "busra",         "azize",         "ahmet",        "nermin",        "cemile",
        "naciye",       "meryem",          "sergen",        "cengiz",       "negun",        "melise",          "mahmur",
        "halis",        "recep",            "sema",         "elif",         "murat",        "melike",          "rumeysa",
        "okan",         "kazim",          "neriman",        "aysun",        "kemal",        "hacer",           "muhammed",
        "nuran",        "fatma",           "engin",         "fikret",       "musatafa",      "yusuf",            "omer",
    };


    int c;
    printf("bir karater girin :");
    c = getchar();

    for (size_t i = 0; i < asize(p); ++i) {
        //if(strchr(p[i], c) != NULL)
          if(strchr(p[i], c))
            printf("%s  ", p[i]);
    }

}


/****************************************************/
/****************************************************/


#include <stdio.h>
#include "utility.h"
#include <string.h>
#include <ctype.h>

#define     SIZE        100

int main()
{
    const char *p[] = {
        "orhan",         "esma",          "busra",         "azize",         "ahmet",        "nermin",        "cemile",
        "naciye",       "meryem",          "sergen",        "cengiz",       "negun",        "melise",          "mahmur",
        "halis",        "recep",            "sema",         "elif",         "murat",        "melike",          "rumeysa",
        "okan",         "kazim",          "neriman",        "aysun",        "kemal",        "hacer",           "muhammed",
        "nuran",        "fatma",           "engin",         "fikret",       "musatafa",      "yusuf",            "omer",
        "ali",          "nurbanu",          "zehra",        "abdurrahman",  "ercan",        "fatih",            "suleyman",
        "mine",         "melek",           "esad",          "enis",         "enes",         "tarik",            "su",
        "osman",        "ertugrul",         "yildirim",     "kadir",        "ekrem",        "yunus",            "sefa",
        "bengu",        "derya",            "gizem",        "ela",          "cansu",        "nur",              "ceza",
        "sahin",        "guray",            "alp",          "abdullah",     "tarkan",       "nurullah",         "said",
    };


    for(int c = 'a'; c <= 'z'; ++c){
        int cnt = 0;
        printf("icinde (%c) olan isimler\n", c);
        for (size_t i = 0; i < asize(p); ++i) {
              if(strchr(p[i], c)){
                printf("%s  ", p[i]);
                ++cnt;
              }
        }
     printf("\topalm %d tane\n", cnt);
     printf("\n*************************************************************************\n");
    }
}


/****************************************************/
/****************************************************/


#include <stdio.h>
#include "utility.h"
#include <string.h>
#include <ctype.h>

#define     SIZE        100

int main()
{
    const char *const pmons[] = {
        "Ocak",
        "Subat",
        "Mart",
        "Nisan",
        "Mayis",
        "Haziran",
        "Temmuz",
        "Agutos",
        "Eylul",
        "Ekim",
        "Kasim",
        "Aralik",
    };

    int n;

    printf("yilin kacinci ayi : ");
    scanf("%d", &n);

    printf("yilin %d. ayi %s\n", n, pmons[n-1]);
}


/****************************************************/
/****************************************************/


#include <stdio.h>
#include "utility.h"
#include <string.h>
#include <ctype.h>

#define     SIZE        100

int main()
{
    const char *const pmons[] = {
        "Ocak",
        "Subat",
        "Mart",
        "Nisan",
        "Mayis",
        "Haziran",
        "Temmuz",
        "Agutos",
        "Eylul",
        "Ekim",
        "Kasim",
        "Aralik",
    };

    char entry[40];

    printf("ay ismi girin : ");
    scanf("%s", entry);

    int i = 0;

    //olur boyle bir kod ama yazmayın
    for (; i < 12; ++i) {
        if(!strcmp(entry, pmons[i]))
            break;
    }

    if(i < 12){
        printf("%s yilin %d. ayi\n", entry, i+1);
    }
    else{
        printf("%s gecerli bir ay ismi degil\n", entry);
    }
}


/****************************************************/
/****************************************************/
#include <stdio.h>
#include "utility.h"
#include <string.h>
#include <ctype.h>

#define     SIZE        100

int main()
{
    const char *const pmons[] = {
        "Ocak",
        "Subat",
        "Mart",
        "Nisan",
        "Mayis",
        "Haziran",
        "Temmuz",
        "Agutos",
        "Eylul",
        "Ekim",
        "Kasim",
        "Aralik",
    };

    char entry[40];

    printf("ay ismi girin : ");
    scanf("%s", entry);

    int i = 0;

    for (; i < 12 && strcmp(entry, pmons[i]); ++i)
          ;

    if(i < 12){
        printf("%s yilin %d. ayi\n", entry, i+1);
    }
    else{
        printf("%s gecerli bir ay ismi degil\n", entry);
    }
}


/****************************************************/
/****************************************************/


#include <stdio.h>
#include "utility.h"
#include <string.h>
#include <ctype.h>

#define     SIZE        100

int main()
{
    const char *const pmons[] = {
        "Ocak",
        "Subat",
        "Mart",
        "Nisan",
        "Mayis",
        "Haziran",
        "Temmuz",
        "Agutos",
        "Eylul",
        "Ekim",
        "Kasim",
        "Aralik",
    };

    for (; ; ) {
        puts(pmons[rand() % asize(pmons)]);
        getchar();
    }
}


/****************************************************/
/****************************************************/

#include <stdio.h>
#include "utility.h"
#include <string.h>
#include <ctype.h>

#define     SIZE        100


const char *p[] = {
    "orhan",         "esma",          "busra",         "azize",         "ahmet",        "nermin",        "cemile",
    "naciye",       "meryem",          "sergen",        "cengiz",       "negun",        "melise",          "mahmur",
    "halis",        "recep",            "sema",         "elif",         "murat",        "melike",          "rumeysa",
    "okan",         "kazim",          "neriman",        "aysun",        "kemal",        "hacer",           "muhammed",
    "nuran",        "fatma",           "engin",         "fikret",       "musatafa",      "yusuf",            "omer",
    "ali",          "nurbanu",          "zehra",        "abdurrahman",  "ercan",        "fatih",            "suleyman",
    "mine",         "melek",           "esad",          "enis",         "enes",         "tarik",            "su",
    "osman",        "ertugrul",         "yildirim",     "kadir",        "ekrem",        "yunus",            "sefa",
    "bengu",        "derya",            "gizem",        "ela",          "cansu",        "nur",              "ceza",
    "sahin",        "guray",            "alp",          "abdullah",     "tarkan",       "nurullah",         "said",
};

int main()
{

    randomize();

    for (; ; ) {
        printf("%s", relem(p));
        getchar();
    }

}


/****************************************************/
/****************************************************/


#include <stdio.h>
#include "utility.h"
#include <string.h>
#include <ctype.h>

#define     SIZE        100


const char *p[] = {
    "orhan",         "esma",          "busra",         "azize",         "ahmet",        "nermin",        "cemile",
    "naciye",       "meryem",          "sergen",        "cengiz",       "negun",        "melise",          "mahmur",
    "halis",        "recep",            "sema",         "elif",         "murat",        "melike",          "rumeysa",
    "okan",         "kazim",          "neriman",        "aysun",        "kemal",        "hacer",           "muhammed",
    "nuran",        "fatma",           "engin",         "fikret",       "musatafa",      "yusuf",            "omer",
    "ali",          "nurbanu",          "zehra",        "abdurrahman",  "ercan",        "fatih",            "suleyman",
    "mine",         "melek",           "esad",          "enis",         "enes",         "tarik",            "su",
    "osman",        "ertugrul",         "yildirim",     "kadir",        "ekrem",        "yunus",            "sefa",
    "bengu",        "derya",            "gizem",        "ela",          "cansu",        "nur",              "ceza",
    "sahin",        "guray",            "alp",          "abdullah",     "tarkan",       "nurullah",         "said",
};

int main()
{

    char str[40];

    printf("bir yazi girin : ");
   scanf("%s", str);

   for (size_t i = 0; i < asize(p); ++i) {
       if(strstr(p[i], str)){
           printf("%s ", p[i]);
       }
   }

   printf("\n");

}


/****************************************************/
/****************************************************/


#include <stdio.h>
#include "utility.h"
#include <string.h>
#include <ctype.h>

#define     SIZE        100


const char *p[] = {
    "orhan",         "esma",          "busra",         "azize",         "ahmet",        "nermin",        "cemile",
    "naciye",       "meryem",          "sergen",        "cengiz",       "negun",        "melise",          "mahmur",
    "halis",        "recep",            "sema",         "elif",         "murat",        "melike",          "rumeysa",
    "okan",         "kazim",          "neriman",        "aysun",        "kemal",        "hacer",           "muhammed",
    "nuran",        "fatma",           "engin",         "fikret",       "musatafa",      "yusuf",            "omer",
    "ali",          "nurbanu",          "zehra",        "abdurrahman",  "ercan",        "fatih",            "suleyman",
    "mine",         "melek",           "esad",          "enis",         "enes",         "tarik",            "su",
    "osman",        "ertugrul",         "yildirim",     "kadir",        "ekrem",        "yunus",            "sefa",
    "bengu",        "derya",            "gizem",        "ela",          "cansu",        "nur",              "ceza",
    "sahin",        "guray",            "alp",          "abdullah",     "tarkan",       "nurullah",         "said",
};

int main()
{

    char str[40];

    printf("bir yazi girin : ");
   scanf("%s", str);

   for (size_t i = 0; i < asize(p); ++i) {
       if(strpbrk(p[i], str)){
           printf("%s ", p[i]);
       }
   }

   printf("\n");

}


/****************************************************/
/****************************************************/



#include <stdio.h>
#include "utility.h"
#include <string.h>
#include <ctype.h>

#define     SIZE        100


const char *p[] = {
    "orhan",         "esma",          "busra",         "azize",         "ahmet",        "nermin",        "cemile",
    "naciye",       "meryem",          "sergen",        "cengiz",       "negun",        "melise",          "mahmur",
    "halis",        "recep",            "sema",         "elif",         "murat",        "melike",          "rumeysa",
    "okan",         "kazim",          "neriman",        "aysun",        "kemal",        "hacer",           "muhammed",
    "nuran",        "fatma",           "engin",         "fikret",       "musatafa",      "yusuf",            "omer",
    "ali",          "nurbanu",          "zehra",        "abdurrahman",  "ercan",        "fatih",            "suleyman",
    "mine",         "melek",           "esad",          "enis",         "enes",         "tarik",            "su",
    "osman",        "ertugrul",         "yildirim",     "kadir",        "ekrem",        "yunus",            "sefa",
    "bengu",        "derya",            "gizem",        "ela",          "cansu",        "nur",              "ceza",
    "sahin",        "guray",            "alp",          "abdullah",     "tarkan",       "nurullah",         "said",
};

int main()
{

   //yazıları sıralam
    //buble sort ile sıralayalım

    for (size_t i = 0; i < asize(p); ++i) {
        printf("%s ", p[i]);
    }

    printf("\n\n");

    for (size_t i = 0; i < asize(p) - 1; ++i) {
        for (size_t k = 0; k < asize(p) - 1 - i; ++k) {
            if(strcmp(p[k], p[k+1]) > 0){
                const char *ptemp = p[k];
                p[k] = p[k+1];
                p[k+1] = ptemp;
            }
        }
    }

    printf("siralama bitti\n");
    for (size_t i = 0; i < asize(p); ++i) {
        printf("%s ", p[i]);
    }

    printf("\n\n");

}


/****************************************************/
/****************************************************/


#include <stdio.h>
#include "utility.h"
#include <string.h>
#include <ctype.h>

#define     SIZE        100


const char *p[] = {
    "orhan",         "esma",          "busra",         "azize",         "ahmet",        "nermin",        "cemile",
    "naciye",       "meryem",          "sergen",        "cengiz",       "negun",        "melise",          "mahmur",
    "halis",        "recep",            "sema",         "elif",         "murat",        "melike",          "rumeysa",
    "okan",         "kazim",          "neriman",        "aysun",        "kemal",        "hacer",           "muhammed",
    "nuran",        "fatma",           "engin",         "fikret",       "musatafa",      "yusuf",            "omer",
    "ali",          "nurbanu",          "zehra",        "abdurrahman",  "ercan",        "fatih",            "suleyman",
    "mine",         "melek",           "esad",          "enis",         "enes",         "tarik",            "su",
    "osman",        "ertugrul",         "yildirim",     "kadir",        "ekrem",        "yunus",            "sefa",
    "bengu",        "derya",            "gizem",        "ela",          "cansu",        "nur",              "ceza",
    "sahin",        "guray",            "alp",          "abdullah",     "tarkan",       "nurullah",         "said",
};

int main()
{

   //yazıları sıralam
    //buble sort ile sıralayalım

    for (size_t i = 0; i < asize(p); ++i) {
        printf("%s ", p[i]);
    }

    printf("\n\n");

    for (size_t i = 0; i < asize(p) - 1; ++i) {
        for (size_t k = 0; k < asize(p) - 1 - i; ++k) {
            size_t len1 = strlen(p[k]);
            size_t len2 = strlen(p[k+1]);
            if(len1 > len2 || (len1 == len2 && strcmp(p[k], p[k+1]) > 0)){
                const char *ptemp = p[k];
                p[k] = p[k+1];
                p[k+1] = ptemp;
            }
        }
    }

    printf("siralama bitti\n");
    for (size_t i = 0; i < asize(p); ++i) {
        printf("%s ", p[i]);
    }

    printf("\n\n");

}


/****************************************************/
/****************************************************/



#include <stdio.h>
#include "utility.h"
#include <string.h>
#include <ctype.h>

#define     SIZE        100

//ödev sorusu

const char *p[] = {
    "orhan",         "esma",          "busra",         "azize",         "ahmet",        "nermin",        "cemile",
    "naciye",       "meryem",          "sergen",        "cengiz",       "negun",        "melise",          "mahmur",
    "halis",        "recep",            "sema",         "elif",         "murat",        "melike",          "rumeysa",
    "okan",         "kazim",          "neriman",        "aysun",        "kemal",        "hacer",           "muhammed",
    "nuran",        "fatma",           "engin",         "fikret",       "musatafa",      "yusuf",            "omer",
    "ali",          "nurbanu",          "zehra",        "abdurrahman",  "ercan",        "fatih",            "suleyman",
    "mine",         "melek",           "esad",          "enis",         "enes",         "tarik",            "su",
    "osman",        "ertugrul",         "yildirim",     "kadir",        "ekrem",        "yunus",            "sefa",
    "bengu",        "derya",            "gizem",        "ela",          "cansu",        "nur",              "ceza",
    "sahin",        "guray",            "alp",          "abdullah",     "tarkan",       "nurullah",         "said",
};

int main()
{

  //yukarıdaki dizide icinde aynı harften fazla olanları yazdırın

}


/****************************************************/
/****************************************************/


#include <stdio.h>
#include "utility.h"
#include <string.h>
#include <ctype.h>

#define     SIZE        100

const char *p[] = {
    "orhan",         "esma",          "busra",         "azize",         "ahmet",        "nermin",        "cemile",
    "naciye",       "meryem",          "sergen",        "cengiz",       "negun",        "melise",          "mahmur",
    "halis",        "recep",            "sema",         "elif",         "murat",        "melike",          "rumeysa",
    "okan",         "kazim",          "neriman",        "aysun",        "kemal",        "hacer",           "muhammed",
    "nuran",        "fatma",           "engin",         "fikret",       "musatafa",      "yusuf",            "omer",
    "ali",          "nurbanu",          "zehra",        "abdurrahman",  "ercan",        "fatih",            "suleyman",
    "mine",         "melek",           "esad",          "enis",         "enes",         "tarik",            "su",
    "osman",        "ertugrul",         "yildirim",     "kadir",        "ekrem",        "yunus",            "sefa",
    "bengu",        "derya",            "gizem",        "ela",          "cansu",        "nur",              "ceza",
    "sahin",        "guray",            "alp",          "abdullah",     "tarkan",       "nurullah",         "said",
    NULL,
};

int main()
{

    int i = 0;

    while(p[i] != NULL){
        printf("%s ", p[i]);
        ++i;
    }

}


/****************************************************/
/****************************************************/


#include <stdio.h>
#include "utility.h"
#include <string.h>
#include <ctype.h>

#define     SIZE        100



int main()
{
    const char *const pmons[] = {
        "", //null string
        "Ocak",
        "Subat",
        "Mart",
        "Nisan",
        "Mayis",
        "Haziran",
        "Temmuz",
        "Agutos",
        "Eylul",
        "Ekim",
        "Kasim",
        "Aralik",
    };

    int n;

    printf("yilin kacinci ayi : ");
    scanf("%d", &n);

    printf("yilin %d. ayi %s\n", n, pmons[n]);
}


/****************************************************/
/****************************************************/


pointer to pointer -- gösterici gösteren gösterici



#include <stdio.h>
#include "utility.h"

#define     SIZE        100


int main()
{
   int x = 23;
   int *p = &x;

   printf("&x   = %p\n", &x);
   printf("p    = %p\n", p);
   printf("&p   = %p\n", &p);

   //&p  int ** dir türü
}


/****************************************************/
/****************************************************/


#include <stdio.h>
#include "utility.h"

#define     SIZE        100


int main()
{
   char *p;
   double *dp;

   &p; //char **
    &dp; //double **
}


/****************************************************/
/****************************************************/



#include <stdio.h>
#include "utility.h"

#define     SIZE        100


int main()
{
   int x = 10;
   int *ptr = &x;
   int **p = &ptr;  //pointer to pointer

}


/****************************************************/
/****************************************************/


#include <stdio.h>
#include "utility.h"

#define     SIZE        100


int main()
{
   int x = 10;
    int y = 55;

   int *ptr = &x;
   printf("*ptr = %d\n", *ptr);
   int **p = &ptr;

   printf("**p = %d\n", **p);

   *p = &y;
   printf("*ptr = %d\n", *ptr);
   printf("**p = %p\n", **p);

}


/****************************************************/
/****************************************************/


#include <stdio.h>
#include "utility.h"

#define     SIZE        100


int main()
{
   int x = 10;
   int *ptr = &x;
   int **p = &ptr;
   **p = 99;

   printf("x = %d\n", x);
   printf("*ptr = %d\n", *ptr);

}


/****************************************************/
/****************************************************/


#include <stdio.h>
#include "utility.h"

#define     SIZE        100


int main()
{
   int x = 10;
   int *ptr = &x;
   int **p = &ptr;
   **p = 99;

   printf("x = %d\n", x);

   ++**p;

   printf("x = %d\n", x);

   ++*p; //++ptr

   printf("*ptr = %d\n", *ptr);
   printf("**p = %d\n", **p);

}


/****************************************************/
/****************************************************/

#include <stdio.h>
#include "utility.h"

#define     SIZE        100


int main()
{
    int a[5] = {1, 4, 7, 8, 9};
    int *ptr = a;
    int **p = &ptr;

    print_array(a, 5);
    ++*p;//++ptr
    ++**p;//{1, 5, 7, 8, 9};
    print_array(a, 5);
    print_array(ptr, 4);
    print_array(p, 4);
}


/****************************************************/
/****************************************************/


#include <stdio.h>
#include "utility.h"

#define     SIZE        100


int main()
{
    int x = 10;
    int *ptr = &x;
    int **p = &ptr;

}

expression       data type       value category
x                int             Lvalue
&x               int *           Rvalue
ptr              int *           Lvalue
*ptr             int             Lvalue
&ptr             int **          Rvalue
p                int **          Lvalue
*p               int *           Lvalue
**p              int             Lvalue
&p               int ***         Rvalue


/****************************************************/
/****************************************************/

#include <stdio.h>
#include "utility.h"

#define     SIZE        100


int main()
{
    //uretimde boyle bir kod görmezsiniz

    int x = 10;
    int *p1 = &x;
    int **p2 = &p1;
    int ***p3 = &p2;
    int ****p4 = &p3;
    int *****p5 = &p4;
    int ******p6 = &p5;
    int *******p7 = &p6;
    int ********p8 = &p7;
    int *********p9 = &p8;
    int **********p10 = &p9;
    int ***********p11 = &p10;
    int ************p12 = &p11;
    int *************p13 = &p12;
    int **************p14 = &p13;
    int ***************p15 = &p14;
    int ****************p16 = &p15;
    int *****************p17 = &p16;
    int ******************p18 = &p17;
    int *******************p19 = &p18;
    int ********************p20 = &p19;

    ********************p20; //x

    printf("********************p20 =   %d\n", ********************p20);

    int y = 50;
    p1 = &y;

    printf("********************p20 =   %d\n", ********************p20);

    int z = 12;
    *******************p20 = &z; //p1

    printf("*p1 = %d\n", *p1);
    printf("********************p20 =   %d\n", ********************p20);

}


/****************************************************/
/****************************************************/


#include <stdio.h>
#include "utility.h"

#define     SIZE        100


int main()
{
  int x = 10;
  int y = 20;
  int *p1 = &x;
  int *p2 = &y;

  printf("*p1 = %d   *p2 = %d\n", *p1, *p2);

  int *ptemp = p1;
  p1 = p2;
  p2 = ptemp;

  printf("*p1 = %d   *p2 = %d\n", *p1, *p2);

}


/****************************************************/
/****************************************************/




#include <stdio.h>
#include "utility.h"

#define     SIZE        100

void pswap(int **ptr1, int **ptr2)
{
    int *ptemp = *ptr1;
    *ptr1 = *ptr2;
    *ptr2 = ptemp;
}

int main()
{
  int x = 10;
  int y = 20;
  int *p1 = &x;
  int *p2 = &y;

  printf("*p1 = %d   *p2 = %d\n", *p1, *p2);

  pswap(&p1, &p2);

  printf("*p1 = %d   *p2 = %d\n", *p1, *p2);

}


/****************************************************/
/****************************************************/


#include <stdio.h>
#include "utility.h"

#define     SIZE        100

void pswap(int **ptr1, int **ptr2)
{
    int *ptemp = *ptr1;
    *ptr1 = *ptr2;
    *ptr2 = ptemp;
}

int main()
{
  int x = 10;
  int y = 20;
  int *p1 = &x;
  int *p2 = &y;

  printf("*p1 = %d   *p2 = %d\n", *p1, *p2);

  pswap(&p1, &p2);

  printf("*p1 = %d   *p2 = %d\n", *p1, *p2);

  swap(p1, p2);
  printf("x = %d\n", x);
  printf("y = %d\n", y);

}


/****************************************************/
/****************************************************/


#include <stdio.h>
#include "utility.h"

#define     SIZE        10


void get_min_max(const int *pa, size_t size, int **ptr_min, int **ptr_max)
{
    *ptr_max = *ptr_min = (int *)pa;

    for (size_t i = 1; i < size; ++i) {
        if(pa[i] > **ptr_max)
            *ptr_max = (int *)(pa + i);
        else if(pa[i] < **ptr_min)
            *ptr_min = (int *)(pa + i);
    }
}

int main()
{
  int a[SIZE];
  randomize();
  set_array_random(a, SIZE);
  print_array(a, SIZE);

  int *pmin, *pmax;
  get_min_max(a, SIZE, &pmin, &pmax);
  printf("min = %d ve %d indisli elemani\n", *pmin, pmin - a);
  printf("max = %d ve %d indisli elemani\n", *pmax, pmax - a);

  swap(pmin, pmax);
  print_array(a, SIZE);

}


/****************************************************/
/****************************************************/


#include <stdio.h>
#include "utility.h"

#define     SIZE        10


int main()
{
  printf("sizeof (int *) = %zu\n", sizeof (int *));
  printf("sizeof (int **) = %zu\n", sizeof (int **));
  printf("sizeof (int ***) = %zu\n", sizeof (int ***));

}


/****************************************************/
/****************************************************/


#include <stdio.h>
#include "utility.h"

#define     SIZE        10


int main()
{
  int **p = NULL;
  int ******c = NULL;
  double **dp = NULL;
  char ** cp = 0;

}


/****************************************************/
/****************************************************/




#include <stdio.h>
#include "utility.h"

#define     SIZE        10


void func(int **pa, size_t size)
{
    for (size_t i = 0; i < size; ++i) {
        printf("p[%d] = %p\n", i, pa[i]);
    }
}

int a = 12, b = 11, c = 55, d = 15;

int main()
{

    int *w[] = {&a, &b, &c, &d};

    printf("&a = %p\n", &a);
    printf("&b = %p\n", &b);
    printf("&c = %p\n", &c);
    printf("&d = %p\n", &d);


    func(w, 4);
}


/****************************************************/
/****************************************************/

#include <stdio.h>
#include "utility.h"

#define     SIZE        10

void display_names(char **ptr, size_t size)
{
    for (size_t i = 0; i < size; ++i) {
        printf("%s ", ptr[i]);
    }

    printf("\n***************************************\n");

}

int main()
{

    const char *p[] = {
        "orhan",         "esma",          "busra",         "azize",         "ahmet",        "nermin",        "cemile",
        "naciye",       "meryem",          "sergen",        "cengiz",       "negun",        "melise",          "mahmur",
        "halis",        "recep",            "sema",         "elif",         "murat",        "melike",          "rumeysa",
        "okan",         "kazim",          "neriman",        "aysun",        "kemal",        "hacer",           "muhammed",
        "nuran",        "fatma",           "engin",         "fikret",       "musatafa",      "yusuf",            "omer",
        "ali",          "nurbanu",          "zehra",        "abdurrahman",  "ercan",        "fatih",            "suleyman",
        "mine",         "melek",           "esad",          "enis",         "enes",         "tarik",            "su",
        "osman",        "ertugrul",         "yildirim",     "kadir",        "ekrem",        "yunus",            "sefa",
        "bengu",        "derya",            "gizem",        "ela",          "cansu",        "nur",              "ceza",
        "sahin",        "guray",            "alp",          "abdullah",     "tarkan",       "nurullah",         "said",
    };

    display_names(p, asize(p));

}


/****************************************************/
/****************************************************/



#include <stdio.h>
#include "utility.h"

#define     SIZE        10

void display_names(char **ptr, size_t size)
{
   while(size--) {
        printf("%s ", *ptr++);
    }

    printf("\n***************************************\n");

}

int main()
{

    const char *p[] = {
        "orhan",         "esma",          "busra",         "azize",         "ahmet",        "nermin",        "cemile",
        "naciye",       "meryem",          "sergen",        "cengiz",       "negun",        "melise",          "mahmur",
        "halis",        "recep",            "sema",         "elif",         "murat",        "melike",          "rumeysa",
        "okan",         "kazim",          "neriman",        "aysun",        "kemal",        "hacer",           "muhammed",
        "nuran",        "fatma",           "engin",         "fikret",       "musatafa",      "yusuf",            "omer",
        "ali",          "nurbanu",          "zehra",        "abdurrahman",  "ercan",        "fatih",            "suleyman",
        "mine",         "melek",           "esad",          "enis",         "enes",         "tarik",            "su",
        "osman",        "ertugrul",         "yildirim",     "kadir",        "ekrem",        "yunus",            "sefa",
        "bengu",        "derya",            "gizem",        "ela",          "cansu",        "nur",              "ceza",
        "sahin",        "guray",            "alp",          "abdullah",     "tarkan",       "nurullah",         "said",
    };

    display_names(p, asize(p));

}


/****************************************************/
/****************************************************/
#include <stdio.h>
#include "utility.h"
#include <string.h>

#define     SIZE        10

void display_names(char **ptr, size_t size)
{
   while(size--) {
        printf("%s ", *ptr++);
    }

    printf("\n***************************************\n");

}

void cpswap(char **p1, char **p2)
{
    char *ptemp = *p1;
    *p1 = *p2;
    *p2 = ptemp;
}

void sort_names(char **pa, size_t size)
{
    for (size_t i = 0; i < size -1; ++i) {
        for (size_t k = 0; k < size - 1 -i; ++k) {
            if(strcmp(pa[k], pa[k+1]) > 0)
                cpswap(pa+k, pa+k+1);
        }
    }
}

int main()
{

    const char *p[] = {
        "orhan",         "esma",          "busra",         "azize",         "ahmet",        "nermin",        "cemile",
        "naciye",       "meryem",          "sergen",        "cengiz",       "negun",        "melise",          "mahmur",
        "halis",        "recep",            "sema",         "elif",         "murat",        "melike",          "rumeysa",
        "okan",         "kazim",          "neriman",        "aysun",        "kemal",        "hacer",           "muhammed",
        "nuran",        "fatma",           "engin",         "fikret",       "musatafa",      "yusuf",            "omer",
        "ali",          "nurbanu",          "zehra",        "abdurrahman",  "ercan",        "fatih",            "suleyman",
        "mine",         "melek",           "esad",          "enis",         "enes",         "tarik",            "su",
        "osman",        "ertugrul",         "yildirim",     "kadir",        "ekrem",        "yunus",            "sefa",
        "bengu",        "derya",            "gizem",        "ela",          "cansu",        "nur",              "ceza",
        "sahin",        "guray",            "alp",          "abdullah",     "tarkan",       "nurullah",         "said",
    };

    display_names(p, asize(p));
    sort_names(p, asize(p));
    display_names(p, asize(p));
}


/****************************************************/
/****************************************************/



#include <stdio.h>
#include "utility.h"
#include <string.h>

#define     SIZE        10


int main()
{
    int a[10] = {0, 1, 2, 3, 5, 66, 77, 22, 11, 44};

    int *p = a;
    int **ptr = &p;

    ++(*ptr)[5];

    print_array(a, 10);

}


/****************************************************/
/****************************************************/


#include <stdio.h>
#include "utility.h"
#include <string.h>

#define     SIZE        10

int a[10] = {0, 1, 2, 3, 5, 66, 77, 22, 11, 44};
int b[10] = {0, 1, 2, 3, 5, 66, 77, 22, 11, 44};
int c[10] = {0, 1, 2, 3, 5, 66, 77, 22, 11, 44};


int *p1 = a;
int *p2 = b;
int *p3 = c;

int main()
{
    int *w[] = {p1, p2, p3};

    ++w[1][2];
    //++p2[2];

    printf("x = %d \n", w[1][2]);
}


/****************************************************/
/****************************************************/


pointer to pointer  ve const keyword


int * const p = &x;  //p yi degiştiremem
const pointer to int
top-level const

const int *p = &x;  //x i degiştiremem
pointer to const int
low-level const


* neden önce gelirse const olan odur




#include <stdio.h>
#include "utility.h"
#include <string.h>

#define     SIZE        10


int main()
{
   int x = 10;
   int *p = &x;
   int y = 20;
   int *q = &y;

   int **ptr = &q;

   ptr = &p;

   *ptr = &y;
   **ptr = 99;

}


/****************************************************/
/****************************************************/





#include <stdio.h>
#include "utility.h"
#include <string.h>

#define     SIZE        10


int main()
{
   int x = 10;
   int *p = &x;
   int y = 20;
   int *w = &y;

   int ** const ptr = &w;

   ptr = &p; //sentaks
   *ptr = &y;
   **ptr = 99;

}


/****************************************************/
/****************************************************/
#include <stdio.h>
#include "utility.h"
#include <string.h>

#define     SIZE        10


int main()
{
   int x = 10;
   int *p = &x;
   int y = 20;
   int *w = &y;

   int * const * ptr = &w;

   ptr = &p;
   *ptr = &y; //sentaks hatası
   **ptr = 99;

}


/****************************************************/
/****************************************************/


#include <stdio.h>
#include "utility.h"
#include <string.h>

#define     SIZE        10


int main()
{
   int x = 10;
   int *p = &x;
   int y = 20;
   int *w = &y;

   const int ** ptr = &w;

   ptr = &p;
   *ptr = &y;
   **ptr = 99;//sentaks hatası

}


/****************************************************/
/****************************************************/



#include <stdio.h>
#include "utility.h"
#include <string.h>

#define     SIZE        10


int main()
{
   int x = 10;
   int *p = &x;
   int y = 20;
   int *w = &y;

   const int * const * ptr = &w;

   ptr = &p;
   *ptr = &y;  //sentask hatası
   **ptr = 99;//sentaks hatası

}


/****************************************************/
/****************************************************/



#include <stdio.h>
#include "utility.h"
#include <string.h>

#define     SIZE        10


int main()
{
   int x = 10;
   int *p = &x;
   int y = 20;
   int *w = &y;

   const int * const * const ptr = &w;

   ptr = &p;  //sentasks hatası
   *ptr = &y;  //sentask hatası
   **ptr = 99;//sentaks hatası

}


/****************************************************/
/****************************************************/



#include <stdio.h>
#include "utility.h"
#include <string.h>

#define     SIZE        10

void func(int * const *ptr, int size)
{
    *ptr = NULL; //sentask shatası
}

int main()
{

    int *p[10];

}


/****************************************************/
/****************************************************/


#include <stdio.h>
#include "utility.h"
#include <string.h>

#define     SIZE        10

int *p1, *p2, *p3;

int main()
{

    //böyle bir dizi olabilir
    int **p[10] = {&p1, &p2, &p3};

}


/****************************************************/
/****************************************************/


#include <stdio.h>
#include "utility.h"
#include <string.h>

#define     SIZE        10

int **gptr;

int **foo(void)
{

    ///

    return gptr;
}

int main()
{


}


/****************************************************/
/****************************************************/



#include <stdio.h>
#include "utility.h"
#include <string.h>

#define     SIZE        10

//soru


void foo(int **a, int **b)
{
    int c = **a;
    **a = **b;
    **b = c;
}

int main()
{

    int x = 10, *p = &x, y = 45, *q = &y;

    printf("x = %d    y = %d\n", x, y);
    foo(&p, &q);
    printf("x = %d    y = %d\n", x, y);

}


/****************************************************/
/****************************************************/


std string fonksilarından bazıları

strncpy
strncmp
strncat





#include <stdio.h>
#include "utility.h"
#include <string.h>

#define     SIZE        10



int main()
{

    char source[100] = "tugay";
    char dest[100];

    strncpy(dest, source, 3);
    //tug
    //null karateri koymuyor bu bize tanımsız davranışile karsı karsı ya bırakıyor

    printf("%s\n", dest); ///tanımsız olusturacak

}


/****************************************************/
/****************************************************/


#include <stdio.h>
#include "utility.h"
#include <string.h>

#define     SIZE        10



int main()
{

    char source[100] = "tugay";
    char dest[100];

    strncpy(dest, source, 6);
    //tugay\0
    //null karateri artık bulunuyor

    printf("%s\n", dest); //tanısmız davranıs yok artık

}


/****************************************************/
/****************************************************/


#include <stdio.h>
#include "utility.h"
#include <string.h>

#define     SIZE        10



int main()
{

    char source[100] = "tugay";
    char dest[100];

    strncpy(dest, source, 3);
    dest[3] = '\0';

    printf("%s\n", dest); //tanısmız davranıs yok artık

}


/****************************************************/
/****************************************************/


#include <stdio.h>
#include "utility.h"
#include <string.h>

#define     SIZE        10



int main()
{

    char source[100] = "tugay";
    char dest[100];

    //böylede yazabiliriz
    strncpy(dest, source, 3)[3] = '\0';

    printf("%s\n", dest); //tanısmız davranıs yok artık

}


/****************************************************/
/****************************************************/

#include <stdio.h>
#include "utility.h"
#include <string.h>

#define     SIZE        10



int main()
{

    char source[100] = "tugay";
    char dest[100] = "0123456789";

    //012uga6789 hale gerir

    printf("%s\n", dest);
    strncpy(dest + 3, source + 1, 3);

    printf("%s\n", dest);

}


/****************************************************/
/****************************************************/



#include <stdio.h>
#include "utility.h"
#include <string.h>

#define     SIZE        10



int main()
{

    char source[100] = "tugay";
    char dest[100] = "ahmet";

    printf("%s\n", dest);
    strncat(dest, source , 3);

    puts(dest);

}


/****************************************************/
/****************************************************/


#include <stdio.h>
#include "utility.h"
#include <string.h>

#define     SIZE        10



int main()
{

    char source[100] = "tugay";
    char dest[100] = "ahmet";

    printf("%s\n", dest);
    strncat(dest, source +1 , 3);

    puts(dest);

}


/****************************************************/
/****************************************************/



#include <stdio.h>
#include "utility.h"
#include <string.h>

#define     SIZE        10



int main()
{

    char source[100] = "okanersoy";
    char dest[100] = "tarkanyesil";


    if(!strncmp(source +1, dest + 3, 3))
        printf("yazilar esit\n");
    else
       printf("yazilar esit degil\n");

}


/****************************************************/
/****************************************************/

void pointers


void C ve C++ da bir tür

1- bir nesneinin türü void olamaz
2- bir dizinin türü void olamz
3- bir ifadenini türü void olamaz

a- geri donuş türü void olan fonksiyon -- geri donusu yok demek
b- ifadelerin türü void'e cast edebiliriz



tür donusturm opeatoru hedef tür void oşabilir



#include <stdio.h>
#include "utility.h"
#include <string.h>

#define     SIZE        10

int foo(int);


int main()
{

    foo(2);

    //bilerek ve isteyer k yaptıgımı okuyucu ve derleyiciye soyleriz
    (void)foo(2);

}


/****************************************************/
/****************************************************/

#include <stdio.h>
#include "utility.h"
#include <string.h>

#define     SIZE        10

int foo(void); //benim parametrem yok
int func();//benim parametrem hakkın bilgim yok


int main()
{
    //foo(1, 2); //sentaks hatası

    func(1, 2);

}


/****************************************************/
/****************************************************/


#include <stdio.h>
#include "utility.h"
#include <string.h>

#define     SIZE        10


void func(void *p);

//vptr herhangi bir türden bir nesnenin adresinin tutabilir
int main()
{
    int x = 10;
    double dval = 2.31;
    char str[] = "orhan";


    void *vptr = &x;
    vptr = &dval;
    vptr = str;

    func(&x);
    func(&dval);
    func(str);
}


/****************************************************/
/****************************************************/

#include <stdio.h>
#include "utility.h"
#include <string.h>

#define     SIZE        10


void func(void *p);

//vptr herhangi bir türden bir nesnenin adresinin tutabilir
int main()
{
    int x = 10;
    void *vptr = &x;

    //peki ne işe yarar .....
    *vptr = 20; //gecerli  degil
    vptr + 5;
    vptr[2];
}


/****************************************************/
/****************************************************/

#include <stdio.h>
#include "utility.h"
#include <string.h>

#define     SIZE        10


void func(void *p);

//vptr herhangi bir türden bir nesnenin adresinin tutabilir
int main()
{
    int x = 10;
    char str[15] = "orhan";
    void *vptr = &x;

    vptr = str;
    vptr = x; //C de yanlıs ama gecerli C++ sentask hatsı
    vptr = 0; //gercerli
    vptr = NULL; //gecerli

}


/****************************************************/
/****************************************************/

#include <stdio.h>
#include "utility.h"
#include <string.h>

#define     SIZE        10


void func(void *p);

//vptr herhangi bir türden bir nesnenin adresinin tutabilir
int main()
{
    int x = 10;
    char str[15] = "orhan";
    void *vptr = &x;

    if(vptr == &x)
        printf("evet dogru\n");
    else
        printf("yanlis\n");

    vptr =str;

    if(vptr == &x)
        printf("evet dogru\n");
    else
        printf("yanlis\n");


    if(vptr == NULL)
        printf("evet dogru\n");
    else
        printf("yanlis\n");

    vptr = NULL;


    if(vptr == NULL)
        printf("evet dogru\n");
    else
        printf("yanlis\n");



}


/****************************************************/
/****************************************************/


T (void dısında ) herhangi bir tür olmak uzere

T* ---> void * otomatik donusum var


void * --->  T*

C dilinde otomatik donusum var fakat C++ dilinde otomatik dobnusum yok



#include <stdio.h>
#include "utility.h"
#include <string.h>

#define     SIZE        10


int main()
{
    int x = 10;
    void *vptr = &x;

    //int *iptr = vptr;  //C++ da gecersiz
    //c de gecerli

    int *iptr = (int *) vptr;

}


/****************************************************/
/****************************************************/
#include <stdio.h>
#include "utility.h"
#include <string.h>

#define     SIZE        10


int main()
{
    printf("sizeof(int *) = %zu\n", sizeof (int *));
    printf("sizeof(double *) = %zu\n", sizeof (double *));
    printf("sizeof(void *) = %zu\n", sizeof (void *));

}


/****************************************************/
/****************************************************/


#include <stdio.h>
#include "utility.h"
#include <string.h>

#define     SIZE        10

void *foo(void);

int main()
{

    int *p;

    p = foo(); //c++ da gecersiz

    //c+++ gecerli hala getirmek icin cast etmemeiz laızm

}


/****************************************************/
/****************************************************/


öyle bir bir fonksiyon olsun ki

aynı türden  (türleri ne olursa olsun) 2 değişkenin takas edebilmesi için kullanılabilsin


böyle kodlara generik programlama denir

C de genereik programalma void pointerlarla yapılır


#include <stdio.h>
#include "utility.h"
#include <string.h>

#define     SIZE        10

void gswap(void *vp1, void *vp2, size_t n)
{
    char *p1 = (char *)vp1;
    char *p2 = (char *)vp2;

    while (n--) {
        char temp = *p1;
        *p1++ = *p2;
        *p2++ = temp;
    }
}

int main()
{
    int x = 45642;
    int y = 91233;

    gswap(&x, &y, sizeof (int));

    printf("x  = %d   y = %d\n", x, y);

    double d1 = 2.35;
    double d2 = 44.5;

    gswap(&d1, &d2, sizeof (double));

    printf("d1  = %f   d2 = %f\n", d1, d2);


int a[] = {1, 2, 3, 4, 5};
int b[] = {6, 7, 8, 9, 10};

gswap(a, b, sizeof (a));
print_array(a, 5);
print_array(b, 5);
}


/****************************************************/
/****************************************************/

#include <stdio.h>
#include "utility.h"
#include <string.h>

#define     SIZE        10

int main()
{
    int a[SIZE];
    int b[SIZE];

    randomize();
    set_array_random(a, SIZE);
    set_array_random(b, SIZE);
    print_array(a, SIZE);
    print_array(b, SIZE);


    //a dizisinin ilk 4 elemanı ile
    //b dizisin son 4 elemaının yerini değiştirecez

    gswap(a, b + SIZE -4, 4* sizeof (int));

    print_array(a, SIZE);
    print_array(b, SIZE);

}


/****************************************************/
/****************************************************/

bazı  std generik fonksiyonların

string.h

mem --> ile baslıyor

mem --> memory kısaltmasından gelir

memset
memcpy
memmove
memchr
memcmp

memset  --> bir bellek blogunun bytlarını bir tam sayı ile dolduran fonksiyondur

void *memset(void *vp, int val, size_t n);



#include <stdio.h>
#include "utility.h"
#include <string.h>

#define     SIZE        10

int main()
{
    int a[SIZE];

    randomize();
    set_array_random(a, SIZE);
    print_array(a, SIZE);

    //a dizisinin butun elemanırını 0 lamak ıstıyorum
    memset(a, 0, sizeof (a));
    //memset(a, 0, sizeof (int) * SIZE);

    print_array(a, SIZE);

}


/****************************************************/
/****************************************************/

#include <stdio.h>
#include "utility.h"
#include <string.h>

#define     SIZE        100

int main()
{
    int a[SIZE];

    randomize();
    set_array_random(a, SIZE);
    print_array(a, SIZE);

    memset(a, 0, sizeof (int) * 20);

    print_array(a, SIZE);

}


/****************************************************/
/****************************************************/

#include <stdio.h>
#include "utility.h"
#include <string.h>

#define     SIZE        100

int main()
{
    int a[SIZE];

    randomize();
    set_array_random(a, SIZE);
    print_array(a, SIZE);

    memset(a + 20, 0, sizeof (int) * 20);

    print_array(a, SIZE);

}


/****************************************************/
/****************************************************/




#include <stdio.h>
#include "utility.h"
#include <string.h>

#define     SIZE        100

int main()
{
    char str[100];
    printf("bir yazi girin : ");
    sgets(str);

    //bu yazi 5 zunlugundan buyuk ise yaıznın 2. 3. 4. 5. karterleri ! karateri olsun

    printf("%s\n", str);

    if(strlen(str) > 5)
        memset(str+1, '!', 4);

    printf("%s\n", str);

}


/****************************************************/
/****************************************************/


#include <stdio.h>
#include "utility.h"
#include <string.h>

#define     SIZE        100


void *mymemset(void *vp, int val, size_t n)
{
    char *p = (char *)vp;

    while (n--)
        *p++ = (char)val;

    return vp;
}

int main()
{
    char str[100];
    printf("bir yazi girin : ");
    sgets(str);

    //bu yazi 5 zunlugundan buyuk ise yaıznın 2. 3. 4. 5. karterleri ! karateri olsun

    printf("%s\n", str);

    if(strlen(str) > 5)
        mymemset(str+1, '!', 4);

    printf("%s\n", str);

}


/****************************************************/
/****************************************************/


#include <stdio.h>
#include "utility.h"
#include <string.h>

#define     SIZE        100

void *mymemset(void *vp, int val, size_t n)
{
    char *p = (char *)vp;

    while (n--)
        *p++ = (char)val;

    return vp;
}

//mulakat sorusu

//int 4 byte

//ekrana ne yazdırır
int main()
{
    int x = 0;

    memset(&x, 255, sizeof (x));//1111 1111
    printf("x = %d\n", x);
    memset(&x, 1, sizeof (x)); //0000 0001 0000 0001 0000 0001
    printf("x = %d\n", x);
}


/****************************************************/
/****************************************************/


memcpy  türden bagımsız kopyalama işlevidir
bir bellek blogunu bir yerden bir başka yere kopyalamak için memcpy işlevini cagırırz


#include <stdio.h>
#include "utility.h"
#include <string.h>

#define     SIZE        100


int main()
{
    int a[SIZE];
    int b[SIZE];

    randomize();
    set_array_random(a, SIZE);
    print_array(a, SIZE);

   // memcpy(b, a, sizeof (a));
    memcpy(b, a, sizeof (int) * SIZE);
    print_array(b, SIZE);

}


/****************************************************/
/****************************************************/


#include <stdio.h>
#include "utility.h"
#include <string.h>

#define     SIZE        100


int main()
{
    int a[SIZE];
    int b[SIZE] = {0};

    randomize();
    set_array_random(a, SIZE);

    int idx_a;
    int idx_b;
    int n;

    printf("a da hangi indeksten baslayarak ? :");
    scanf("%d", &idx_a);
    printf("b de hangi indeksten baslayarak ? :");
    scanf("%d", &idx_b);
    printf("kac oge kopyalanacak :");
    scanf("%d", &n);

    memcpy(b+idx_b, a+idx_a, sizeof (int) * n);


    print_array(a, SIZE);
    print_array(b, SIZE);

}


/****************************************************/
/****************************************************/


#include <stdio.h>
#include "utility.h"
#include <string.h>

#define     SIZE        100


void *mymemcpy(void *vpdest, const void *vpsource, size_t n)
{
    char *pdest = vpdest;
    const char *psource = vpsource;

    while (n--)
        *pdest++ = *psource++;

    return vpdest;
}


int main()
{
    int a[SIZE];
    int b[SIZE] = {0};

    randomize();
    set_array_random(a, SIZE);

    int idx_a;
    int idx_b;
    int n;

    printf("a da hangi indeksten baslayarak ? :");
    scanf("%d", &idx_a);
    printf("b de hangi indeksten baslayarak ? :");
    scanf("%d", &idx_b);
    printf("kac oge kopyalanacak :");
    scanf("%d", &n);

    mymemcpy(b+idx_b, a+idx_a, sizeof (int) * n);

    print_array(a, SIZE);
    print_array(b, SIZE);

}


/****************************************************/
/****************************************************/

overlapped bloklar

strcpy aynı blok uzerınde calısma garantısı yok

memcpy aynı blok uzerınde calısma garantısı yok


C99 ile beraber

restrict anahtar sözcüğü

overlapped olmadıgını bildirmek için kullanılır


memmove ile aynıu bloklar uzerınde işlem yapabilcez


void *memcpy(void *restrict vpdest, const void *restrict vpsource, size_t n);
void *memmove(void *vpdest, const void *vpsource, size_t n);



#include <stdio.h>
#include "utility.h"
#include <string.h>

#define     SIZE        100


int main()
{
   int a[SIZE];
   randomize();
   set_array_random(a, SIZE);
   print_array(a, SIZE);

   //a nın ilk 40 elemanın 10 kaydırmak ıstıyorum

   //auynı bloklar uzerınde bunu kullnama
   //memcpy(a+10, a + 40, sizeof (int) * 40); //tnaımsız davranıs olusturur

   memmove(a+10, a + 40, sizeof (int) * 40);
   print_array(a, SIZE);

}


/****************************************************/
/****************************************************/

#include <stdio.h>
#include "utility.h"
#include <string.h>

#define     SIZE        100


int main()
{
   char str[SIZE];

   printf("bir isim girin : ");
   sgets(str);

   strcpy(str +5, str); //tanımsız davranıs

   printf("%s\n", str);

}


/****************************************************/
/****************************************************/


#include <stdio.h>
#include "utility.h"
#include <string.h>

#define     SIZE        100


int main()
{
   char str[SIZE];

   printf("bir isim girin : ");
   sgets(str);

   memmove(str +5, str, strlen(str) + 1);

   printf("%s\n", str);

}


/****************************************************/
/****************************************************/

memchr

bir bellek blogunda belirli bir tamsayı degerine sahip byte arar

memchr(const void *vp, int val, size_t n)

n byte kadar alanda val degeri aranıyor

bulursa buldugu yerin adresi bulmazsa null pointer donduruyor


#include <stdio.h>
#include "utility.h"
#include <string.h>

#define     SIZE        100


int main()
{
   char str[SIZE];

   printf("bir isim girin : ");
   sgets(str);

   //yazının uzunlugu 15 den buyuk ise yazının 5 in ci karaterinden baslayarak
   //10 karaterlik lnda i  karteri arayacaz


   printf("%s\n", str);
   if(strlen(str) > 15)
   {
       char *p = memchr(str + 5, 'i', 10);
       if(p != NULL)
       {
           printf("bulundu .. yazinini %d indisli karateri\n", p - str);
       }else{
           printf("bulunamadi\n");
       }
   }


}


/****************************************************/
/****************************************************/


#include <stdio.h>
#include "utility.h"
#include <string.h>

#define     SIZE        100


int main()
{
    unsigned char buffer[SIZE] = {0};

    randomize();

    for (int i = 0; i < 400; ++i) {
        buffer[rand() % SIZE] = 1;
    }

    for (int i = 0; i <SIZE; ++i) {
        printf("%d", buffer[i]);
    }

    printf("\n");

    unsigned char *p = (unsigned char *)memchr(buffer, 0, SIZE);

    if(!p){
        printf("bulunamadi\n");
    }
    else{
        printf("bulundu idx = %d\n", p - buffer);
    }

}


/****************************************************/
/****************************************************/

#include <stdio.h>
#include "utility.h"
#include <string.h>

#define     SIZE        100

void *mymemchr(const void *vp, int val, size_t n)
{
    const char *p = (const char *)vp;

    while (n--) {
        if(*p == val)
            return (char *)p;
        ++p;
    }

    return NULL;
}


int main()
{
    unsigned char buffer[SIZE] = {0};

    randomize();

    for (int i = 0; i < 400; ++i) {
        buffer[rand() % SIZE] = 1;
    }

    for (int i = 0; i <SIZE; ++i) {
        printf("%d", buffer[i]);
    }

    printf("\n");

    unsigned char *p = (unsigned char *)mymemchr(buffer, 0, SIZE);

    if(!p){
        printf("bulunamadi\n");
    }
    else{
        printf("bulundu idx = %d\n", p - buffer);
    }

}


/****************************************************/
/****************************************************/


memcmp

türden bagımsız 2 bellek blogunu karsılastırıyor ve bize karsılatırma sonucunu donduruyor

void * memcmp(const void *vp1, const void *vp2, size_t n)





#include <stdio.h>
#include "utility.h"
#include <string.h>

#define     SIZE        100

int mymemcmp(const void *vp1, const void *vp2, size_t n)
{
    const unsigned char *p1 = vp1;
    const unsigned char *p2 = vp2;

    while (n--) {
        if(*p1 != *p2)//byte'lar eşitmi değilmi
            return *p1 > *p2 ? 1: -1;

        ++p1;
        ++p2;
    }

  return 0; //iki bellek blogu eslit ise basarlı demek
}



int main()
{


}


/****************************************************/
/****************************************************/

#include <stdio.h>
#include "utility.h"
#include <string.h>

#define     SIZE        100

int mymemcmp(const void *vp1, const void *vp2, size_t n)
{
    const unsigned char *p1 = vp1;
    const unsigned char *p2 = vp2;

    while (n--) {
        if(*p1 != *p2)//byte'lar eşitmi değilmi
            return *p1 > *p2 ? 1: -1;

        ++p1;
        ++p2;
    }

  return 0; //iki bellek blogu eslit ise basarlı demek
}



int main()
{
    int a[SIZE];
    int b[SIZE];

    randomize();
    set_array_random(a, SIZE);
    memcpy(b, a, sizeof (a));

    if(!memcmp(a, b, sizeof (a)))
        printf("evet esit\n");
    else
        printf("hayir esit deil\n");

    ++a[rand() % SIZE];

    if(!memcmp(a, b, sizeof (a)))
        printf("evet esit\n");
    else
        printf("hayir esit deil\n");


}


/****************************************************/
/****************************************************/
#include <stdio.h>
#include "utility.h"
#include <string.h>

#define     SIZE        100

//HomeWork


int main()
{
    char s1[SIZE];
    char s2[SIZE];

    printf("birinci yaziyi girin : \n");
    sgets(s1);
    printf("ikinci yaziyi girin : \n");
    sgets(s2);

    int n;
    printf("kac karater : "); //4
    scanf("%d", &n);

    //ilk 4 karaterler esit mi
    //bu sınamyı memcmp ile yapınız

}


/****************************************************/
/****************************************************/



#include <stdio.h>
#include "utility.h"
#include <string.h>

#define     SIZE        10


void *greverse(void *vpa, size_t size, size_t sz)
{
    char *p = (char *)vpa;

    for (size_t i = 0; i < size / 2; ++i) {
        //vpa[i] <<===>> vpa[size -1 -i];
        gswap(p + i * sz, p + (size -1 -i) *sz, sz);
    }

    return vpa;
}


int main()
{
   int a[SIZE];
   randomize();
   set_array_random(a, SIZE);
   print_array(a, SIZE);
   greverse(a, SIZE, sizeof (int));
   print_array(a, SIZE);

   double b[] = {1.2, 3.4, 5.5, 6.6 , 7.7};
   greverse(b, asize(b), sizeof (*b));

   for (size_t i = 0; i < asize(b); ++i) {
       printf("%f\n", b[i]);
   }

}


/****************************************************/
/****************************************************/

#include <stdio.h>
#include "utility.h"
#include <string.h>

#define     SIZE        10


void *greverse(void *vpa, size_t size, size_t sz)
{
    char *ps = (char *)vpa;
    char *pe = ps + (size - 1) *sz;

    while (ps < pe) {
        gswap(ps, pe, sz);
        ps += sz;
        pe -= sz;
    }

    return vpa;
}


int main()
{
   int a[SIZE];
   randomize();
   set_array_random(a, SIZE);
   print_array(a, SIZE);
   greverse(a, SIZE, sizeof (int));
   print_array(a, SIZE);

   double b[] = {1.2, 3.4, 5.5, 6.6 , 7.7};
   greverse(b, asize(b), sizeof (*b));

   for (size_t i = 0; i < asize(b); ++i) {
       printf("%f\n", b[i]);
   }

}


/****************************************************/
/****************************************************/


#include <stdio.h>
#include "utility.h"
#include <string.h>

#define     SIZE        10


void *gsearch(const *vpa, size_t size, size_t sz, const void *vpkey)
{
    const char *p = vpa;

    for (size_t i = 0; i < size; ++i) {
        if(!memcmp(p+i*sz, vpkey, sz))
            return (void *)(p+i*sz);
    }

    return NULL;
}

int main()
{
   int a[SIZE];
   randomize();
   set_array_random(a, SIZE);
   print_array(a, SIZE);

   int ival;

   printf("aranacak degeri girin : ");
   scanf("%d", &ival);

   int *p = (int *)gsearch(a, SIZE, sizeof (int), &ival);

   if(p != NULL)
       printf("bulundu...dizinini %d indisli elemani\n", p-a);
   else
       printf("bulunamadi\n");

}


/****************************************************/
/****************************************************/


#include <stdio.h>
#include "utility.h"
#include <string.h>

#define     SIZE        10


void *gsearch(const *vpa, size_t size, size_t sz, const void *vpkey)
{
    const char *p = vpa;

    while (size--) {
        if(!memcmp(p, vpkey, sz))
            return (void *)p;
        p += sz;
    }

    return NULL;
}

int main()
{
   int a[SIZE];
   randomize();
   set_array_random(a, SIZE);
   print_array(a, SIZE);

   int ival;

   printf("aranacak degeri girin : ");
   scanf("%d", &ival);

   int *p = (int *)gsearch(a, SIZE, sizeof (int), &ival);

   if(p != NULL)
       printf("bulundu...dizinini %d indisli elemani\n", p-a);
   else
       printf("bulunamadi\n");

}


/****************************************************/
/****************************************************/


#include <stdio.h>
#include "utility.h"
#include <string.h>

#define     SIZE        10


int main()
{
    int x = 10;
    int y = 20;

    void *vp= &x;

    void **vptr = &vp;
    *vptr = &y; //vp = &y


    printf("val = %d\n", *(int *)vp);

}


/****************************************************/
/****************************************************/


function pointer


türden bagımsız bir diziyi sıralamyan fonksiyon yazabilirmiyiz

evet, std kutuphanede de boyle fonksiyon var

qsort işlevi















































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































