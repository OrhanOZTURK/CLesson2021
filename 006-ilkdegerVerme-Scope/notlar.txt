// C dilinde static ömürlü değişkenlere ilk deger vere ifadeler


#include <stdio.h>

// C dilinde static ömürlü değişkenlere ilk deger vere ifadeler

int g = 10; //sentak hatası yok
int t = g; //sentaks hatası
//global değişkenlere ilk deger veren ifadeler constant olmak zorundadır.

int main()
{


    return 0;
}


/**************************************************/
/**************************************************/

#include <stdio.h>

// C dilinde static ömürlü değişkenlere ilk deger vere ifadeler

//static int g
int g = 10; //sentak hatası yok
int t = g; //sentaks hatası
//global değişkenlere ilk deger veren ifadeler constant olmak zorundadır.

void func()
{
    int x = 10;
    int y = x + 5; // gecerli

    static int w = x + 5; // gecerli değil
}

int main()
{


    return 0;
}


/**************************************************/
/**************************************************/

#include <stdio.h>

// C dilinde static ömürlü değişkenlere ilk deger vere ifadeler

//C de 99 standartlarından önce kısıltlama vardır
// bu aykırı bir kısıltlamaydı
//C99 standartları ile bu kısıltlama kalktı

// C99 öncesi yerel değişknelerin bildirim fonksiyon blok baslarında yapılmalıdır

void func()
{

    //code
    printf("orhan");

    //C99 standartlarından önce bu bildirm gecerli degildi
    int x = 10;
}


int main()
{


    return 0;
}


/**************************************************/
/**************************************************/


#include <stdio.h>

// C dilinde static ömürlü değişkenlere ilk deger vere ifadeler

//C de 99 standartlarından önce kısıltlama vardır
// bu aykırı bir kısıltlamaydı
//C99 standartları ile bu kısıltlama kalktı

int g = 5;

void func()
{

    //code
    printf("orhan"); // statement

    //C99 standartlarından önce bu bildirm gecerli degildi
    int x = 10;

    x += g;

    int y = x;
}


int main()
{


    return 0;
}


/**************************************************/
/**************************************************/

 scope leakage

 kapsam sızıntısı



#include <stdio.h>


int main()
{

    int x  = 10;

    //x
    for(int i = 0; i < 10; ++i)
    {
      //x
    }

    //x

    return 0;
}


/**************************************************/
/**************************************************/

#include <stdio.h>


int main()
{

    for(int i = 0; i < 10; ++i)
    {
        //code
      int x = 10;


    }

    //x kullanama

    return 0;
}


/**************************************************/
/**************************************************/



#include <stdio.h>


int main()
{
    int y;
    //code
    //code
    //code

    y = 5; // statement

    // x bulundugu noktanın üstünde kullanamayın sentaks hatası

    int x = 10;

    x;

    return 0;
}


/**************************************************/
/**************************************************/




// scope (kapsam)

// scope : bir simin gecerli olarak kullanılabileceği kod alanıdır

//name lookup --- isim aramaydı


C de scope kuralları 4 kategoriye ayrılır

1- file scope (dosya bilinirlik alanı- dosyayı kapsar)
2- block scope (blok bilinirlik alanı - blok kapsamı)
3- function prototype scope
4- function scope


/**************************************************/
/**************************************************/

1- file scope (dosya bilinirlik alanı- dosyayı kapsar)

#include <stdio.h>

// scope (kapsam)

int x; // global deişkenler file scope dur
//bildirilen noktadan kaynak dosyanın sonuna kadar tum kod alanında gecerlidir


void func()
{
    x = 5;
}

int main()
{

    int a = x;

    return 0;
}


/**************************************************/
/**************************************************/

#include <stdio.h>

// scope (kapsam)


//Soru gecerlimi bu kod

void func()
{
    x = 5; // geersiz
}

int x;

int main()
{

    int a = x;

    return 0;
}


/**************************************************/
/**************************************************/


#include <stdio.h>

// scope (kapsam)

//2- block scope (blok bilinirlik alanı - blok kapsamı)
//blok içinde yapılan bildirimler bildirildiği noktadan closing breace kadar kullanılabılır

void func()
{
    int a  = 10;

    if(1){

        int b = 20;

        if(1){
            //b burada gecerli
            //c gecerli
            // a gecerli
            int c = 30;
        }
        //b burda gecerli
        // a gecerli
    }

    //b gecersiz
    // a gecerli
}


int main()
{


    return 0;
}


/**************************************************/
/**************************************************/

#include <stdio.h>

// scope (kapsam)

//2- block scope (blok bilinirlik alanı - blok kapsamı)
//blok içinde yapılan bildirimler bildirildiği noktadan closing breace kadar kullanılabılır

void func()
{
    //scope leakage böyle tanımlanırsa
    int a  = 10;
    int b = 20;
    int c = 30;

    if(1){

        //int b = 20;

        if(1){

            //int c = 30;
        }

    }


}


int main()
{


    return 0;
}


/**************************************************/
/**************************************************/


#include <stdio.h>

// scope (kapsam)

//2- block scope (blok bilinirlik alanı - blok kapsamı)
//blok içinde yapılan bildirimler bildirildiği noktadan closing breace kadar kullanılabılır

//istisna durum
// fonksiyon parametreleri
//blok basından sonan kadar gecerli sayılır

void func(int a)
{
    int a;

}


int main()
{


    return 0;
}


/**************************************************/
/**************************************************/

name lookup
Derleyici derleme işlemi aşamasında kullanılan bir ismi hangi varlıgın ısmı odlugunu anlamaya
çalışır

asamalar

1- isim arama yapılır.
2- dilin kuralları kontrol edilir
3- isim bulundu ve kontroller tmama bir daha da baslamaz bu arama


//3
{
  //2
  {
  //1
   x = 10;
  }
}


#include <stdio.h>

// scope (kapsam)


//3

void func(int a)
{
    //2
    int x;

    {
        //1
        x = 5;
    }

}


int main()
{


    return 0;
}


/**************************************************/
/**************************************************/


// soru fonksiyon parametreleri aranıyormu
// evet aranıyor-- blok baslarında tanımlandıgını varsayıyor

void foo(int a)
{

 {

   a
 }

}

/**************************************************/
/**************************************************/

//legalmi

int x = 10;
double x = 7;

int main()
{


}


/**************************************************/
/**************************************************/

#include <stdio.h>

// scope (kapsam)


//3

//global varlıga verilen isim ile baska bir global degişken ismi olmaz
int x = 10;
double x = 7;

int main()
{


}


/**************************************************/
/**************************************************/


#include <stdio.h>

// scope (kapsam)


//aynı isimde değişken isimleri tnaımlanırmı
//farklı scope lar içinde tanınmlayabiliriz


int x = 10;

void foo()
{
    int x;
}

int main()
{
    int x;
}


/**************************************************/
/**************************************************/

//bu kod gecerlimi


int x = 10;


int main()
{
    int x;

   {

      int x;
      {
        double x;
      }
   }
}


/**********************************************/
#include <stdio.h>

// scope (kapsam)

//aynı isimde değişken isimleri tnaımlanırmı
//farklı scope lar içinde tanınmlayabiliriz

// butun x bildirimleri gecerlidir
int x = 10;

int main()
{
   int x;

   {

      int x;
      {
        double x;
      }
   }
}


/**************************************************/
/**************************************************/


// soru hangi scope taki deger ekrana yazdırır

int a = 10;

int main()
{
  int a = 20;

  printf("a: %d\n", a);

  return 0;
}



#include <stdio.h>

// scope (kapsam)

//aynı isimde değişken isimleri tnaımlanırmı
//farklı scope lar içinde tanınmlayabiliriz

int a = 10;

int main()
{
    {
        int a = 20;

    }

  printf("a: %d\n", a);

  return 0;
}


/**************************************************/
/**************************************************/


#include <stdio.h>

// scope (kapsam)

//mulakat sorusu
//hata ise bu ne hatasıdır


int main()
{
  int printf = 20;

  printf("merhaba dunya\n");

  return 0;
}


/**************************************************/
/**************************************************/


#include <stdio.h>

// scope (kapsam)

//soru ekrana ne yazdıracak


int main()
{
    int a = 20;

    if(1){
        int a = 20;

        if(1){
           // int a = 30;
            printf("a : %d\n", a);
        }
    }

  return 0;
}


/**************************************************/
/**************************************************/



#include <stdio.h>

// scope (kapsam)

//soru

int a = 10;

int main()
{
    double a = 1.3;

    //teknik terimler
    //hide
    //mask
    //shadow

    a = 20;

  return 0;
}


/**************************************************/
/**************************************************/
#include <stdio.h>

// scope (kapsam)

//soru

//c ve c++ arasındakı farklılklardan bir tanesi

// C de bu operator gecerli degildir

// : --> colom

//:: --> scope resolution opeator

int a = 10;

int main()
{
    int a = 5;

    //teknik terimler
    //hide
    //mask
    //shadow

    printf("::a = %d\n", ::a);
    printf("::a = %d\n", a);

  return 0;
}


/**************************************************/
/**************************************************/

#include <stdio.h>

// scope (kapsam)

//soru

//c ve c++ arasındakı farklılklardan bir tanesi

// C de bu operator gecerli degildir

// : --> colom

//:: --> scope resolution opeator


int main()
{
    int a = 5;

    {
        int a = 20;
        //c ve c++ dıştak aynı ısımdekı degıskene erşım yoktur
    }

  return 0;
}


/**************************************************/
/**************************************************/


#include <stdio.h>

// scope (kapsam)

// asla ve asla iç iç bloklardaki değişkenlerde aynı ismi kullanmaya
// veya maskeleme yapmayalım
//yukardakı kural globallar ıcınde gecerlıdır

int a;

int main()
{
    int a = 5;

    {
        int a = 20;
        //c ve c++ dıştak aynı ısımdekı degıskene erşım yoktur
    }

  return 0;
}


/**************************************************/
/**************************************************/

#include <stdio.h>

// scope (kapsam)

//farklı fonksiyonlarda  aynı isimleri tercih eediniz

void func(double radius)
{

}

void foo(double radius)
{

}

int main()
{


  return 0;
}


/**************************************************/
/**************************************************/


#include <stdio.h>

// scope (kapsam)

//kısa bir mulakat sorusu

//tanımsız davranıs

int a = 10;

int main()
{
    int a = a; // tanımsız davranıs

    printf("a = %d\n", a);

  return 0;
}


/**************************************************/
/**************************************************/

Fonksiyon --- Functions











